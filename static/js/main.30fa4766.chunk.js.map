{"version":3,"sources":["hooks/useJungle.tsx","constants/types/lottery.ts","utils/index.ts","constants/types/jungle.ts","contexts/Jungle/Context.tsx","contexts/Lottery/Context.tsx","components/ConfirmationModal/index.tsx","contexts/Jungle/Provider.tsx","contexts/Lottery/Provider.tsx","utils/merkleTree.ts","constants/index.ts","components/Navbar/DesktopSubNav.tsx","components/Navbar/items.ts","components/Navbar/DesktopNav.tsx","components/Navbar/MobileNav.tsx","components/Navbar/WalletButton.tsx","assets/logo192.9904efa0.png","components/Navbar/Navbar.tsx","assets/the_jungle.png","views/Home/Home.tsx","components/TokenCard/index.tsx","views/Staking/Staking.tsx","hooks/useLottery.tsx","components/FactionCard/index.tsx","components/ParticipationCard/index.tsx","views/Lottery/Lottery.tsx","views/Admin/Admin.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useJungle","useContext","JungleContext","IDL","shortAddress","address","substring","length","factionToNumber","faction","Error","buildLeaves","data","leaves","idx","animal","push","Buffer","from","mint","toBuffer","anchor","rarity","toArray","Context","createContext","animals","stakedAnimals","getRarityMultiplier","getPendingStakingRewards","fetchAnimal","Promise","refreshAnimals","fetchUserAccount","createAccount","stakeAnimal","unstakeAnimal","claimStakingRewards","userParticipations","fetchRound","newLotteryRound","participate","claimParticipation","ConfirmationModal","isOpen","onClose","wallet","useWallet","maxW","spacing","my","src","icon","w","h","size","thickness","programID","PublicKey","idl","metadata","JungleProvider","children","toast","useToast","useSolana","connection","providerMut","useConnectedWallet","useDisclosure","confirming","onOpen","useState","userAccount","setUserAccount","jungle","setJungle","setAnimals","setStakedAnimals","provider","useMemo","preflightCommitment","tree","constants","map","e","i","MerkleTree","fetchAnimals","useCallback","a","Metadata","findDataByOwner","publicKey","owned","collectionMints","filter","includes","metadataItem","f","arweave","console","log","useEffect","fetchStakedAnimals","program","account","all","memcmp","offset","bytes","toString","staked","fetchJungle","Program","JundleIdl","findProgramAddress","jungleKey","jungleAddress","fetch","fetchedJungle","key","owner","escrow","rewardsAccount","animalsStaked","maximumRarity","maximumRarityMultiplier","baseWeeklyEmissions","root","Math","min","toNumber","end","animalMultiplier","lastClaim","valueOf","div","animalAddress","fetchedAnimal","Date","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","associatedAddress","token","getAccountInfo","signTransaction","createTokenAccount","payer","title","description","status","duration","isClosable","programId","animalBump","deposit","depositBump","bumps","stakerAccount","indexStaked","findIndex","rpc","getProofArray","accounts","staker","depositAccount","tokenProgram","clock","SYSVAR_CLOCK_PUBKEY","rent","SYSVAR_RENT_PUBKEY","systemProgram","SystemProgram","name","rewardsStakerAccount","animalStakerAccount","instructions","createAssociatedTokenAccountInstruction","instruction","claimStaking","Provider","value","LotteryProvider","lottery","setLottery","currentRound","setCurrentRound","nextPot","setNextPot","setUserParticipations","fetchLottery","LotteryIdl","lotteryKey","lotteryAddress","fetchedLottery","treasury","period","lastRound","lastTimestamp","unclaimedPot","index","BN","toArrayLike","round","lotteryRound","fetchedRound","start","spendings","pot","winner","fetchCurrentRound","fetchUserParticipations","resolve","setTimeout","lotteryParticipation","participations","findProgramAddressSync","participationAddress","equals","player","sort","b","fetchNextPot","getBalance","roundsToSkip","floor","now","add","roundBump","previousRound","oldLotteryRound","participation","participationBump","updateParticipation","playerAccount","leafs","layers","this","slice","hashes","nodeHash","reduce","acc","cur","arr","nxt","internalHash","Array","getRoot","values","v","proof","layer","sibling","res","getProof","el","pair","item","keccak_256","digest","first","second","compare","fst","snd","leaf","MAINNET","FACTIONS","WalletAdapterNetwork","Devnet","mainnet","network","Mainnet","ticker","wrappedSol","mainnetMetadata","DesktopSubNav","label","href","subLabel","newTab","role","display","p","rounded","_hover","bg","useColorModeValue","target","undefined","direction","align","transition","fontWeight","fontSize","transform","opacity","_groupHover","justify","flex","as","ChevronRightIcon","NAV_ITEMS","DesktopNav","linkColor","linkHoverColor","popoverContentBgColor","navItem","trigger","placement","color","textDecoration","border","boxShadow","minW","child","MobileNavItem","onToggle","onClick","py","Link","ChevronDownIcon","in","animateOpacity","style","marginTop","mt","pl","borderLeft","borderStyle","borderColor","MobileNav","md","WalletButton","connected","disconnect","connect","useWalletKit","useCollection","variant","colorScheme","amount","toFixed","WithSubnavigation","minH","base","px","borderBottom","ml","logo","boxSize","Home","textAlign","hero","to","TokenCard","stakable","augmentedAnimal","setAugmentedAnimal","stakingPeriod","setStakingPeriod","fetchAnimalStats","interval","setInterval","clearInterval","handleStake","handleUnstake","handleClaim","pt","background","alignItems","justifyContent","borderWidth","shadow","image","maxH","top","isFullWidth","Staking","verticalAlign","m","leftIcon","useLottery","LotteryContext","FactionCard","setAmount","handleParticipation","fill","currentParticipation","type","placeholder","onChange","Number","ParticipationCard","setRound","fetchCorrespondingRound","r","gt","mul","Lottery","setNow","formatTime","difference","sub","days","hours","minutes","seconds","timer","clearTimeout","handleNewRound","disabled","pb","Admin","handleSend","Transaction","getRecentBlockhash","blockhash","recentBlockhash","feePayer","transfer","fromPubkey","toPubkey","lamports","signed","web3","sendAndConfirmRawTransaction","serialize","handleChange","n","WalletProviders","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","onError","error","message","app","initialStep","ModalStep","Select","defaultNetwork","networkConfigs","commitment","WalletProvider","Providers","Jungle","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30fa4766.chunk.js","sourcesContent":["import { useContext } from \"react\";\n\nimport { JungleContext } from \"../contexts/Jungle\";\n\nconst useJungle = () => {\n  return {\n    ...useContext(JungleContext),\n  };\n};\n\nexport default useJungle;\n","export type Lottery = {\n  \"version\": \"0.1.0\",\n  \"name\": \"lottery\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeLottery\",\n      \"accounts\": [\n        {\n          \"name\": \"lotteryKey\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"InitializeLotteryBumps\"\n          }\n        },\n        {\n          \"name\": \"period\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"setLottery\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"mint\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"treasury\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"period\",\n          \"type\": \"i64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"newLotteryRound\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"oldLotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bump\",\n          \"type\": \"u8\"\n        }\n      ]\n    },\n    {\n      \"name\": \"participate\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"playerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bump\",\n          \"type\": \"u8\"\n        },\n        {\n          \"name\": \"spendings\",\n          \"type\": {\n            \"array\": [\n              \"u64\",\n              8\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"updateParticipation\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"playerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"spendings\",\n          \"type\": {\n            \"array\": [\n              \"u64\",\n              8\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"claimParticipation\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"lottery\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"InitializeLotteryBumps\"\n            }\n          },\n          {\n            \"name\": \"key\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"treasury\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"period\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastRound\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastTimestamp\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"unclaimedPot\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"lotteryRound\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"start\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"spendings\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                8\n              ]\n            }\n          },\n          {\n            \"name\": \"pot\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"winner\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"lotteryParticipation\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"player\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"spendings\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                8\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeLotteryBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"lottery\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"round\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"TooSoonForNewRound\",\n      \"msg\": \"Trying to start a new round earlier than the period\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"RoundFinished\",\n      \"msg\": \"Too late to participate in this round\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"RoundNotFinished\",\n      \"msg\": \"The round is not finished yet\"\n    }\n  ]\n};\n\nexport const IDL: Lottery = {\n  \"version\": \"0.1.0\",\n  \"name\": \"lottery\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeLottery\",\n      \"accounts\": [\n        {\n          \"name\": \"lotteryKey\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"InitializeLotteryBumps\"\n          }\n        },\n        {\n          \"name\": \"period\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"setLottery\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"mint\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"treasury\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"period\",\n          \"type\": \"i64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"newLotteryRound\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"oldLotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bump\",\n          \"type\": \"u8\"\n        }\n      ]\n    },\n    {\n      \"name\": \"participate\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"playerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bump\",\n          \"type\": \"u8\"\n        },\n        {\n          \"name\": \"spendings\",\n          \"type\": {\n            \"array\": [\n              \"u64\",\n              8\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"updateParticipation\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"playerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"spendings\",\n          \"type\": {\n            \"array\": [\n              \"u64\",\n              8\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"claimParticipation\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"lottery\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"InitializeLotteryBumps\"\n            }\n          },\n          {\n            \"name\": \"key\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"treasury\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"period\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastRound\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastTimestamp\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"unclaimedPot\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"lotteryRound\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"start\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"spendings\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                8\n              ]\n            }\n          },\n          {\n            \"name\": \"pot\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"winner\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"lotteryParticipation\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"player\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"spendings\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                8\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeLotteryBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"lottery\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"round\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"TooSoonForNewRound\",\n      \"msg\": \"Trying to start a new round earlier than the period\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"RoundFinished\",\n      \"msg\": \"Too late to participate in this round\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"RoundNotFinished\",\n      \"msg\": \"The round is not finished yet\"\n    }\n  ]\n};\n","import * as anchor from \"@project-serum/anchor\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\nexport const shortAddress = (address: string | undefined): string => {\n  if (!address) return \"???\";\n  return (\n    address.substring(0, 4) +\n    \"...\" +\n    address.substring(address.length - 4, address.length)\n  );\n};\n\nexport const findTokenAddress = async (\n  walletAddress: anchor.web3.PublicKey,\n  tokenMintAddress: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      TOKEN_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const findAssociatedTokenAddress = async (\n  walletAddress: anchor.web3.PublicKey,\n  tokenMintAddress: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const factionToNumber = (faction: string) => {\n  switch (faction) {\n    case \"Sarengti\":\n      return 1;\n    case \"Amphibian\":\n      return 2;\n    case \"Reptile\":\n      return 3;\n    case \"Misfit\":\n      return 4;\n    case \"Bird\":\n      return 5;\n    case \"Monkey\":\n      return 6;\n    case \"Carnivore\":\n      return 7;\n    case \"Mythic\":\n      return 8;\n    default:\n      throw new Error(`unknown faction: ${faction}`)\n  }\n};\n\nexport const buildLeaves = (\n  data: { mint: anchor.web3.PublicKey; rarity: number; faction: number }[]\n) => {\n  const leaves: Array<Buffer> = [];\n  for (let idx = 0; idx < data.length; ++idx) {\n    const animal = data[idx];\n    leaves.push(\n      Buffer.from([\n        ...animal.mint.toBuffer(),\n        ...new anchor.BN(animal.rarity).toArray(\"le\", 8),\n        ...new anchor.BN(animal.faction).toArray(\"le\", 8),\n      ])\n    );\n  }\n\n  return leaves;\n};","export type Jungle = {\n  \"version\": \"0.1.0\",\n  \"name\": \"jungle\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeJungle\",\n      \"accounts\": [\n        {\n          \"name\": \"jungleKey\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"InitializeJungleBumps\"\n          }\n        },\n        {\n          \"name\": \"maxRarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"maxMultiplier\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"baseWeeklyEmissions\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"root\",\n          \"type\": {\n            \"array\": [\n              \"u8\",\n              32\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"setJungle\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"newOwner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"maxRarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"maxMultiplier\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"baseWeeklyEmissions\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"root\",\n          \"type\": {\n            \"array\": [\n              \"u8\",\n              32\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"withdrawRewards\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"ownerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"stakeAnimal\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"depositAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"StakeAnimalBumps\"\n          }\n        },\n        {\n          \"name\": \"proof\",\n          \"type\": {\n            \"vec\": {\n              \"array\": [\n                \"u8\",\n                32\n              ]\n            }\n          }\n        },\n        {\n          \"name\": \"rarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"faction\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"unstakeAnimal\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"depositAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"claimStaking\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"jungle\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"key\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"InitializeJungleBumps\"\n            }\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardsAccount\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"animalsStaked\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"maximumRarity\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"maximumRarityMultiplier\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"baseWeeklyEmissions\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"start\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"root\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                32\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"animal\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"StakeAnimalBumps\"\n            }\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"staker\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rarity\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"faction\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"lastClaim\",\n            \"type\": \"i64\"\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeJungleBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"jungle\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"rewards\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"StakeAnimalBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"animal\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"deposit\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InvalidMultiplier\",\n      \"msg\": \"Invalid multiplier, must be greater than 10000\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"TooEarly\",\n      \"msg\": \"Too early to stake\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"InvalidProof\",\n      \"msg\": \"Merkle proof is invalid\"\n    }\n  ]\n};\n\nexport const IDL: Jungle = {\n  \"version\": \"0.1.0\",\n  \"name\": \"jungle\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeJungle\",\n      \"accounts\": [\n        {\n          \"name\": \"jungleKey\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"InitializeJungleBumps\"\n          }\n        },\n        {\n          \"name\": \"maxRarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"maxMultiplier\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"baseWeeklyEmissions\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"root\",\n          \"type\": {\n            \"array\": [\n              \"u8\",\n              32\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"setJungle\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"newOwner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"maxRarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"maxMultiplier\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"baseWeeklyEmissions\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"root\",\n          \"type\": {\n            \"array\": [\n              \"u8\",\n              32\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"withdrawRewards\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"ownerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"stakeAnimal\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"depositAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"StakeAnimalBumps\"\n          }\n        },\n        {\n          \"name\": \"proof\",\n          \"type\": {\n            \"vec\": {\n              \"array\": [\n                \"u8\",\n                32\n              ]\n            }\n          }\n        },\n        {\n          \"name\": \"rarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"faction\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"unstakeAnimal\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"depositAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"claimStaking\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"jungle\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"key\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"InitializeJungleBumps\"\n            }\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardsAccount\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"animalsStaked\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"maximumRarity\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"maximumRarityMultiplier\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"baseWeeklyEmissions\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"start\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"root\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                32\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"animal\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"StakeAnimalBumps\"\n            }\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"staker\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rarity\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"faction\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"lastClaim\",\n            \"type\": \"i64\"\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeJungleBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"jungle\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"rewards\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"StakeAnimalBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"animal\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"deposit\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InvalidMultiplier\",\n      \"msg\": \"Invalid multiplier, must be greater than 10000\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"TooEarly\",\n      \"msg\": \"Too early to stake\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"InvalidProof\",\n      \"msg\": \"Merkle proof is invalid\"\n    }\n  ]\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport { createContext } from \"react\";\n\nimport { ContextValues } from \"./types\";\n\nconst Context = createContext<ContextValues>({\n  animals: [],\n  stakedAnimals: [],\n  getRarityMultiplier: () => 0,\n  getPendingStakingRewards: () => 0,\n  fetchAnimal: (mint: PublicKey) => new Promise(() => {}),\n  refreshAnimals: () => new Promise(() => {}),\n  fetchUserAccount: () => new Promise(() => {}),\n  createAccount: () => new Promise(() => {}),\n  stakeAnimal: () => new Promise(() => {}),\n  unstakeAnimal: () => new Promise(() => {}),\n  claimStakingRewards: () => new Promise(() => {}),\n});\n\nexport default Context;\n","import { createContext } from \"react\";\n\nimport { ContextValues } from \"./types\";\n\nconst Context = createContext<ContextValues>({\n  userParticipations: [],\n  fetchRound: () => new Promise(() => {}),\n  newLotteryRound: () => new Promise(() => {}),\n  participate: () => new Promise(() => {}),\n  claimParticipation: () => new Promise(() => {}),\n});\n\nexport default Context;\n","import {\n  VStack,\n  Image,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\ninterface ConfirmationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst ConfirmationModal: React.FC<ConfirmationModalProps> = ({\n  isOpen,\n  onClose\n}) => {\n  const wallet = useWallet();\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent maxW=\"350px\">\n        <ModalHeader>Confirming transaction...</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing=\"8px\" my={2}>\n            <Image src={wallet.wallet?.icon} w=\"100%\" h=\"100%\" />\n            <Spinner size=\"xl\" thickness={\"8px\"} />\n          </VStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ConfirmationModal;\n","import React, { useCallback, useEffect, useState, useMemo } from \"react\";\nimport { useSolana } from \"@saberhq/use-solana\";\nimport { createTokenAccount } from \"@saberhq/token-utils\";\nimport { useConnectedWallet } from \"@gokiprotocol/walletkit\";\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\nimport {\n  AccountInfo as TokenAccount,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Program } from \"@project-serum/anchor\";\nimport { Metadata } from \"@metaplex-foundation/mpl-token-metadata\";\nimport { useDisclosure, useToast } from \"@chakra-ui/react\";\n\nimport { buildLeaves, factionToNumber } from \"../../utils\";\nimport ConfirmationModal from \"../../components/ConfirmationModal\";\nimport Context from \"./Context\";\nimport constants from \"../../constants\";\nimport { Animal, Jungle } from \".\";\nimport {\n  Jungle as JungleProgram,\n  IDL as JundleIdl,\n} from \"../../constants/types/jungle\";\nimport idl from \"../../constants/idls/jungle.json\";\nimport { MerkleTree } from \"../../utils/merkleTree\";\n\nconst programID = new PublicKey(idl.metadata.address);\n\nconst JungleProvider: React.FC = ({ children }) => {\n  const toast = useToast();\n  const { connection, providerMut } = useSolana();\n  const wallet = useConnectedWallet();\n\n  const { isOpen: confirming, onOpen, onClose } = useDisclosure();\n  const [userAccount, setUserAccount] = useState<TokenAccount>();\n  const [jungle, setJungle] = useState<Jungle>();\n  const [animals, setAnimals] = useState<Animal[]>();\n  const [stakedAnimals, setStakedAnimals] = useState<Animal[]>();\n\n  const provider = useMemo(() => {\n    if (!providerMut) return;\n    return new anchor.Provider(providerMut?.connection, wallet as any, {\n      preflightCommitment: \"confirmed\",\n    });\n  }, [providerMut, wallet]);\n\n  const tree = useMemo(() => {\n    const leaves = buildLeaves(\n      constants.metadata.map((e, i) => ({\n        mint: new PublicKey(e.mint),\n        rarity: e.rarity,\n        faction: factionToNumber(e.faction),\n      }))\n    );\n    return new MerkleTree(leaves);\n  }, []);\n\n  /**\n   * Fetches the animals owned by the user\n   */\n  const fetchAnimals = useCallback(async () => {\n    if (!connection || !wallet) return;\n\n    try {\n      const owned = await Metadata.findDataByOwner(\n        connection,\n        wallet.publicKey\n      );\n      const collectionMints = constants.metadata.map((e) => e.mint);\n      setAnimals(\n        owned\n          .map((e) => e.mint)\n          .filter((e) => collectionMints.includes(e))\n          .map((e) => {\n            const metadataItem = constants.metadata.filter(\n              (f) => f.mint === e\n            )[0];\n            return {\n              mint: new PublicKey(e),\n              metadata: metadataItem.arweave,\n              rarity: metadataItem.rarity,\n              faction: metadataItem.faction,\n            };\n          })\n      );\n    } catch (err) {\n      console.log(\"Failed fetching owned tokens\", err);\n    }\n  }, [wallet, connection]);\n\n  useEffect(() => {\n    if (!animals) fetchAnimals();\n  }, [fetchAnimals, animals]);\n\n  /**\n   * Fetches the animals staked by the user\n   */\n  const fetchStakedAnimals = useCallback(async () => {\n    if (!connection || !wallet) return;\n\n    const program = new anchor.Program(idl as anchor.Idl, programID, provider);\n\n    try {\n      const staked = await program.account.animal.all([\n        {\n          memcmp: {\n            offset: 42, // Bumps + mint\n            bytes: wallet.publicKey?.toString(),\n          },\n        },\n      ]);\n      const collectionMints = constants.metadata.map((e) => e.mint);\n      setStakedAnimals(\n        staked\n          .map((e) => e.account.mint.toString())\n          .filter((e) => collectionMints.includes(e))\n          .map((e) => {\n            const metadataItem = constants.metadata.filter(\n              (f) => f.mint === e\n            )[0];\n            return {\n              mint: new PublicKey(e),\n              metadata: metadataItem.arweave,\n              rarity: metadataItem.rarity,\n              faction: metadataItem.faction,\n            };\n          })\n      );\n    } catch (err) {\n      console.log(\"Failed fetching owned tokens\", err);\n    }\n  }, [provider, wallet, connection]);\n\n  useEffect(() => {\n    fetchStakedAnimals();\n  }, [fetchStakedAnimals]);\n\n  /**\n   * Fetches the jungle\n   */\n  const fetchJungle = useCallback(async () => {\n    if (!provider) return;\n    const program = new Program<JungleProgram>(JundleIdl, programID, provider);\n\n    const [jungleAddress] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"jungle\"), constants.jungleKey.toBuffer()],\n      programID\n    );\n\n    const fetchedJungle = await program.account.jungle.fetch(jungleAddress);\n\n    setJungle({\n      key: fetchedJungle.key,\n      owner: fetchedJungle.owner,\n      escrow: fetchedJungle.escrow,\n      mint: fetchedJungle.mint,\n      rewardsAccount: fetchedJungle.rewardsAccount,\n      animalsStaked: fetchedJungle.animalsStaked,\n      maximumRarity: fetchedJungle.maximumRarity,\n      maximumRarityMultiplier: fetchedJungle.maximumRarityMultiplier,\n      baseWeeklyEmissions: fetchedJungle.baseWeeklyEmissions,\n      root: fetchedJungle.root,\n    });\n  }, [provider]);\n\n  useEffect(() => {\n    fetchJungle();\n  }, [fetchJungle]);\n\n  const getRarityMultiplier = useCallback(\n    (animal: Animal) => {\n      if (!jungle) return;\n\n      return (\n        ((Math.min(jungle.maximumRarity.toNumber(), animal.rarity) /\n          jungle.maximumRarity.toNumber()) *\n          (jungle.maximumRarityMultiplier.toNumber() - 10000) +\n          10000) /\n        10000\n      );\n    },\n    [jungle]\n  );\n\n  const getPendingStakingRewards = useCallback(\n    (animal: Animal, end: Date) => {\n      const animalMultiplier = getRarityMultiplier(animal) || 1;\n      if (!jungle || !animal.lastClaim || end < animal.lastClaim) return 0;\n\n      const elapsed = (end.valueOf() - animal.lastClaim.valueOf()) / 1000;\n      const emissionsPerSecond = jungle.baseWeeklyEmissions\n        .div(new anchor.BN(604800))\n        .toNumber();\n\n      return (\n        (elapsed * emissionsPerSecond * animalMultiplier) /\n        jungle.animalsStaked.toNumber() /\n        10 ** 9\n      );\n    },\n    [jungle, getRarityMultiplier]\n  );\n\n  /**\n   * Fetches a staking account\n   */\n  const fetchAnimal = useCallback(\n    async (mint: PublicKey) => {\n      if (!connection) return;\n\n      const program = new anchor.Program(\n        idl as anchor.Idl,\n        programID,\n        provider\n      );\n\n      const [animalAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"animal\"), mint.toBuffer()],\n        programID\n      );\n\n      const metadataItem = constants.metadata.filter(\n        (e) => e.mint === mint.toString()\n      )[0];\n      try {\n        const fetchedAnimal = await program.account.animal.fetch(animalAddress);\n\n        return {\n          mint: mint,\n          metadata: metadataItem.arweave,\n          rarity: fetchedAnimal.rarity.toString(),\n          faction: metadataItem.faction,\n          lastClaim: new Date(fetchedAnimal.lastClaim.toNumber() * 1000),\n        };\n      } catch (err) {\n        return {\n          mint: mint,\n          metadata: metadataItem.arweave,\n          rarity: metadataItem.rarity,\n          faction: metadataItem.faction,\n        };\n      }\n    },\n    [connection, provider]\n  );\n\n  /**\n   * Fetches the staking rewards account\n   */\n  const fetchUserAccount = useCallback(async () => {\n    if (!jungle || !connection || !wallet || !wallet.publicKey) return;\n\n    try {\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        jungle.mint,\n        wallet.publicKey\n      );\n      const token = new Token(\n        connection,\n        jungle.mint,\n        TOKEN_PROGRAM_ID,\n        wallet as any\n      );\n      setUserAccount(await token.getAccountInfo(associatedAddress));\n    } catch (err) {\n      console.log(\"User has no account yet\");\n    }\n  }, [connection, jungle, wallet]);\n\n  useEffect(() => {\n    fetchUserAccount();\n  }, [fetchUserAccount]);\n\n  const createAccount = useCallback(async () => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signTransaction ||\n      !jungle ||\n      !providerMut\n    )\n      return;\n\n    onOpen();\n\n    try {\n      await createTokenAccount({\n        provider: providerMut,\n        mint: jungle.mint,\n        owner: wallet.publicKey,\n        payer: wallet.publicKey,\n      });\n      toast({\n        title: \"Account creation successful\",\n        description: `Successfully created an account`,\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      });\n      fetchUserAccount();\n    } catch (err) {\n      console.log(err);\n\n      toast({\n        title: \"Account creation failed\",\n        description: `Failed to created an account`,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      onClose();\n    }\n  }, [jungle, providerMut, toast, wallet, onClose, onOpen, fetchUserAccount]);\n\n  const stakeAnimal = useCallback(\n    async (animal: Animal) => {\n      if (!wallet || !wallet.publicKey || !jungle) return;\n\n      onOpen();\n\n      const program = new Program<JungleProgram>(\n        JundleIdl,\n        programID,\n        provider\n      );\n      const [jungleAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"jungle\", \"utf8\"), jungle.key.toBuffer()],\n        program.programId\n      );\n      const [animalAddress, animalBump] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"animal\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n      const [deposit, depositBump] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"deposit\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n\n      const bumps = {\n        animal: animalBump,\n        deposit: depositBump,\n      };\n\n      const stakerAccount = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        animal.mint,\n        wallet.publicKey\n      );\n      const indexStaked = constants.metadata.findIndex(\n        (e) => e.mint === animal.mint.toString()\n      );\n\n      try {\n        await program.rpc.stakeAnimal(\n          bumps,\n          tree.getProofArray(indexStaked),\n          new anchor.BN(animal.rarity),\n          new anchor.BN(factionToNumber(animal.faction)),\n          {\n            accounts: {\n              jungle: jungleAddress,\n              escrow: jungle.escrow,\n              animal: animalAddress,\n              staker: wallet.publicKey,\n              mint: animal.mint,\n              stakerAccount: stakerAccount,\n              depositAccount: deposit,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n              systemProgram: SystemProgram.programId,\n            },\n          }\n        );\n\n        toast({\n          title: \"Staking successful\",\n          description: `Successfully staked \"${animal.metadata.name}\"`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchAnimals();\n        fetchStakedAnimals();\n      } catch (err) {\n        console.log(\"Failed staking animal\", err);\n\n        toast({\n          title: \"Staking failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      jungle,\n      provider,\n      tree,\n      toast,\n      wallet,\n      onClose,\n      onOpen,\n      fetchAnimals,\n      fetchStakedAnimals,\n    ]\n  );\n\n  const unstakeAnimal = useCallback(\n    async (animal: Animal) => {\n      if (!wallet || !wallet.publicKey || !jungle) return;\n\n      onOpen();\n\n      const program = new Program<JungleProgram>(\n        JundleIdl,\n        programID,\n        provider\n      );\n      const [jungleAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"jungle\", \"utf8\"), jungle.key.toBuffer()],\n        program.programId\n      );\n      const [rewardsAccount] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"rewards\", \"utf8\"),\n          jungle.key.toBuffer(),\n          jungle.mint.toBuffer(),\n        ],\n        program.programId\n      );\n      const [animalAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"animal\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n      const [deposit] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"deposit\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n\n      const rewardsStakerAccount = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        jungle.mint,\n        wallet.publicKey\n      );\n      const animalStakerAccount = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        animal.mint,\n        wallet.publicKey\n      );\n\n      try {\n        // Create a reward account if the user does not have one\n        const instructions = userAccount\n          ? []\n          : [\n              Token.createAssociatedTokenAccountInstruction(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                jungle.mint,\n                rewardsStakerAccount,\n                wallet.publicKey,\n                wallet.publicKey\n              ),\n            ];\n\n        // Claim rewards as well\n        instructions.push(\n          program.instruction.claimStaking({\n            accounts: {\n              jungle: jungleAddress,\n              escrow: jungle.escrow,\n              animal: animalAddress,\n              staker: wallet.publicKey,\n              mint: jungle.mint,\n              stakerAccount: rewardsStakerAccount,\n              rewardsAccount: rewardsAccount,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n              systemProgram: SystemProgram.programId,\n            },\n          })\n        );\n\n        await program.rpc.unstakeAnimal({\n          accounts: {\n            jungle: jungleAddress,\n            escrow: jungle.escrow,\n            animal: animalAddress,\n            staker: wallet.publicKey,\n            mint: animal.mint,\n            stakerAccount: animalStakerAccount,\n            depositAccount: deposit,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          },\n          instructions: instructions,\n        });\n\n        toast({\n          title: \"Unstaking successful\",\n          description: `Successfully unstaked \"${animal.metadata.name}\"`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchAnimals();\n        fetchStakedAnimals();\n        fetchUserAccount();\n      } catch (err) {\n        console.log(\"Failed unstaking animal\", err);\n\n        toast({\n          title: \"Unstaking failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      jungle,\n      provider,\n      toast,\n      userAccount,\n      wallet,\n      onClose,\n      onOpen,\n      fetchAnimals,\n      fetchStakedAnimals,\n      fetchUserAccount,\n    ]\n  );\n\n  const claimStakingRewards = useCallback(\n    async (animal: Animal) => {\n      if (!wallet || !wallet.publicKey || !jungle) return;\n\n      onOpen();\n\n      const program = new Program<JungleProgram>(\n        JundleIdl,\n        programID,\n        provider\n      );\n      const [jungleAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"jungle\", \"utf8\"), jungle.key.toBuffer()],\n        program.programId\n      );\n      const [rewardsAccount] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"rewards\", \"utf8\"),\n          jungle.key.toBuffer(),\n          jungle.mint.toBuffer(),\n        ],\n        program.programId\n      );\n      const [animalAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"animal\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n\n      const stakerAccount = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        jungle.mint,\n        wallet.publicKey\n      );\n\n      try {\n        // Create an reward account if the user does not have one\n        const instructions = userAccount\n          ? []\n          : [\n              Token.createAssociatedTokenAccountInstruction(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                jungle.mint,\n                stakerAccount,\n                wallet.publicKey,\n                wallet.publicKey\n              ),\n            ];\n\n        await program.rpc.claimStaking({\n          accounts: {\n            jungle: jungleAddress,\n            escrow: jungle.escrow,\n            animal: animalAddress,\n            staker: wallet.publicKey,\n            mint: jungle.mint,\n            stakerAccount: stakerAccount,\n            rewardsAccount: rewardsAccount,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            clock: SYSVAR_CLOCK_PUBKEY,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId,\n          },\n          instructions: instructions,\n        });\n\n        toast({\n          title: \"Claiming successful\",\n          description: `Successfully claimed staking rewards for \"${animal.metadata.name}\"`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchAnimals();\n        fetchStakedAnimals();\n        fetchUserAccount();\n      } catch (err) {\n        console.log(\"Failed claiming rewards\", err);\n\n        toast({\n          title: \"Claiming staking rewards failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      jungle,\n      provider,\n      toast,\n      userAccount,\n      wallet,\n      onClose,\n      onOpen,\n      fetchAnimals,\n      fetchStakedAnimals,\n      fetchUserAccount,\n    ]\n  );\n\n  const refreshAnimals = useCallback(async () => {\n    setAnimals([]);\n    setStakedAnimals([]);\n    await fetchJungle();\n    await fetchAnimals();\n    await fetchStakedAnimals();\n  }, [\n    fetchJungle,\n    fetchStakedAnimals,\n    fetchAnimals,\n    setAnimals,\n    setStakedAnimals,\n  ]);\n\n  return (\n    <Context.Provider\n      value={{\n        jungle,\n        animals: animals || [],\n        stakedAnimals: stakedAnimals || [],\n        userAccount,\n        getRarityMultiplier,\n        getPendingStakingRewards,\n        fetchAnimal,\n        refreshAnimals,\n        fetchUserAccount,\n        createAccount,\n        stakeAnimal,\n        unstakeAnimal,\n        claimStakingRewards,\n      }}\n    >\n      {children}\n      <ConfirmationModal isOpen={confirming} onClose={onClose} />\n    </Context.Provider>\n  );\n};\n\nexport default JungleProvider;\n","import React, { useCallback, useEffect, useState, useMemo } from \"react\";\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { BN, Program } from \"@project-serum/anchor\";\nimport { useDisclosure, useToast } from \"@chakra-ui/react\";\n\nimport ConfirmationModal from \"../../components/ConfirmationModal\";\nimport Context from \"./Context\";\nimport constants from \"../../constants\";\nimport { Lottery, LotteryRound, Participation } from \".\";\nimport {\n  Lottery as LotteryProgram,\n  IDL as LotteryIdl,\n} from \"../../constants/types/lottery\";\nimport idl from \"../../constants/idls/lottery.json\";\nimport useJungle from \"hooks/useJungle\";\nimport { useConnectedWallet, useSolana } from \"@saberhq/use-solana\";\nimport { findProgramAddressSync } from \"@project-serum/anchor/dist/cjs/utils/pubkey\";\n\nconst programID = new PublicKey(idl.metadata.address);\n\nconst LotteryProvider: React.FC = ({ children }) => {\n  const toast = useToast();\n  const { providerMut } = useSolana();\n  const wallet = useConnectedWallet();\n  const { jungle, userAccount, fetchUserAccount } = useJungle();\n\n  const { isOpen: confirming, onOpen, onClose } = useDisclosure();\n  const [lottery, setLottery] = useState<Lottery>();\n  const [currentRound, setCurrentRound] = useState<LotteryRound>();\n  const [nextPot, setNextPot] = useState<number>();\n  const [userParticipations, setUserParticipations] = useState<Participation[]>(\n    []\n  );\n\n  const provider = useMemo(() => {\n    if (!providerMut) return;\n    return new anchor.Provider(providerMut.connection, wallet as any, {\n      preflightCommitment: \"confirmed\",\n    });\n  }, [providerMut, wallet]);\n\n  /**\n   * Fetches the lottery\n   */\n  const fetchLottery = useCallback(async () => {\n    if (!provider) return;\n\n    const program = new Program<LotteryProgram>(\n      LotteryIdl,\n      programID,\n      provider\n    );\n\n    const [lotteryAddress] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"lottery\"), constants.lotteryKey.toBuffer()],\n      programID\n    );\n\n    const fetchedLottery = await program.account.lottery.fetch(lotteryAddress);\n\n    setLottery({\n      key: fetchedLottery.key,\n      owner: fetchedLottery.owner,\n      escrow: fetchedLottery.escrow,\n      mint: fetchedLottery.mint,\n      treasury: fetchedLottery.treasury,\n      period: fetchedLottery.period,\n      lastRound: fetchedLottery.lastRound,\n      lastTimestamp: fetchedLottery.lastTimestamp,\n      unclaimedPot: fetchedLottery.unclaimedPot,\n    });\n  }, [provider]);\n\n  useEffect(() => {\n    fetchLottery();\n  }, [fetchLottery]);\n\n  /**\n   * Fetches a specific round\n   */\n  const fetchRound = useCallback(\n    async (index: number) => {\n      if (!lottery || !provider) return;\n\n      const program = new Program<LotteryProgram>(\n        LotteryIdl,\n        programID,\n        provider\n      );\n\n      const [round] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\"),\n          lottery.key.toBuffer(),\n          new BN(index).toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n\n      const fetchedRound = await program.account.lotteryRound.fetch(round);\n\n      return {\n        index: fetchedRound.index,\n        start: fetchedRound.start,\n        spendings: fetchedRound.spendings,\n        pot: fetchedRound.pot,\n        winner: fetchedRound.winner,\n      };\n    },\n    [provider, lottery]\n  );\n\n  /**\n   * Fetches the current lottery round\n   */\n  const fetchCurrentRound = useCallback(async () => {\n    if (!lottery) return;\n    setCurrentRound(await fetchRound(lottery.lastRound.toNumber()));\n  }, [lottery, fetchRound]);\n\n  useEffect(() => {\n    fetchCurrentRound();\n  }, [fetchCurrentRound]);\n\n  /**\n   * Fetches the user participations\n   */\n  const fetchUserParticipations = useCallback(async () => {\n    if (!wallet || !wallet.publicKey || !lottery || !provider) return;\n\n    const program = new Program<LotteryProgram>(\n      LotteryIdl,\n      programID,\n      provider\n    );\n\n    [1, 2, 3].filter(\n      async (e) =>\n        new Promise(async (resolve) => setTimeout(() => resolve(true), 1000))\n    );\n\n    try {\n      // TODO: User filters to only fetch this player's participations\n      const participations = await program.account.lotteryParticipation.all();\n      setUserParticipations(\n        participations\n          // Filter participations for this lottery only\n          .filter((e) => {\n            const [participationAddress] = findProgramAddressSync(\n              [\n                Buffer.from(\"participation\"),\n                lottery.key.toBuffer(),\n                new BN(e.account.index).toArrayLike(Buffer, \"le\", 8),\n              ],\n              programID\n            );\n            return e.publicKey.equals(participationAddress);\n          })\n          .map((e) => ({\n            player: e.account.player,\n            index: e.account.index,\n            spendings: e.account.spendings,\n          }))\n          .filter((e) => e.player.toString() === wallet.publicKey?.toString())\n          .sort((a, b) => a.index.toNumber() - b.index.toNumber())\n      );\n    } catch (err) {\n      console.log(\"Failed fetching owned tokens\", err);\n    }\n  }, [provider, lottery, wallet]);\n\n  useEffect(() => {\n    fetchUserParticipations();\n  }, [fetchUserParticipations]);\n\n  /**\n   * Fetch the amount of SOL currently waiting for the next round\n   */\n  const fetchNextPot = useCallback(async () => {\n    if (!lottery || !provider) return;\n    setNextPot(\n      ((await provider.connection.getBalance(lottery.escrow)) -\n        lottery.unclaimedPot.toNumber()) /\n        10 ** 9\n    );\n  }, [lottery, provider, setNextPot]);\n\n  useEffect(() => {\n    fetchNextPot();\n  }, [fetchNextPot]);\n\n  /**\n   * Create a new round of lottery.\n   * This can be called only after the previous round expires\n   */\n  const newLotteryRound = useCallback(async () => {\n    if (!wallet || !wallet.publicKey || !lottery || !provider) return;\n\n    onOpen();\n\n    const program = new Program<LotteryProgram>(\n      LotteryIdl,\n      programID,\n      provider\n    );\n    const [lotteryAddress] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"lottery\", \"utf8\"), lottery.key.toBuffer()],\n      program.programId\n    );\n    const [escrow] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"escrow\", \"utf8\"), lottery.key.toBuffer()],\n      program.programId\n    );\n\n    // Checking the number of rounds behind and skip several in one tx\n    const roundsToSkip = Math.min(\n      16, // Maximum number possible\n      Math.floor(\n        (Math.round(Date.now() / 1000) - lottery.lastTimestamp.toNumber()) /\n          lottery.period.toNumber()\n      )\n    );\n\n    console.log(\n      `${Math.floor(\n        (Math.round(Date.now() / 1000) - lottery.lastTimestamp.toNumber()) /\n          lottery.period.toNumber()\n      )} rounds behind`\n    );\n\n    const instructions = [];\n    for (let i = 0; i < roundsToSkip - 1; i++) {\n      const [round, roundBump] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound.add(new BN(i + 1)).toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      const [previousRound] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound.add(new BN(i)).toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      instructions.push(\n        program.instruction.newLotteryRound(roundBump, {\n          accounts: {\n            lottery: lotteryAddress,\n            escrow: escrow,\n            lotteryRound: round,\n            oldLotteryRound: previousRound,\n            payer: wallet.publicKey,\n            clock: SYSVAR_CLOCK_PUBKEY,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId,\n          },\n        })\n      );\n    }\n\n    try {\n      const [round, roundBump] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound\n            .add(new BN(roundsToSkip))\n            .toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      const [previousRound] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound\n            .add(new BN(roundsToSkip - 1))\n            .toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n\n      await program.rpc.newLotteryRound(roundBump, {\n        accounts: {\n          lottery: lotteryAddress,\n          escrow: escrow,\n          lotteryRound: round,\n          oldLotteryRound: previousRound,\n          payer: wallet.publicKey,\n          clock: SYSVAR_CLOCK_PUBKEY,\n          rent: SYSVAR_RENT_PUBKEY,\n          systemProgram: SystemProgram.programId,\n        },\n        instructions: instructions,\n      });\n\n      toast({\n        title: \"A new round is starting!\",\n        description: `Successfully started round #${lottery.lastRound\n          .add(new BN(roundsToSkip))\n          .toNumber()}`,\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      });\n      fetchLottery();\n      fetchUserParticipations();\n    } catch (err) {\n      console.log(\"Failed new round\", err);\n\n      toast({\n        title: \"Starting a new round failed\",\n        description: `${err}`,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n\n    onClose();\n  }, [\n    lottery,\n    provider,\n    toast,\n    wallet,\n    onClose,\n    onOpen,\n    fetchLottery,\n    fetchUserParticipations,\n  ]);\n\n  const participate = useCallback(\n    async (spendings: BN[]) => {\n      if (\n        !wallet ||\n        !wallet.publicKey ||\n        !lottery ||\n        !jungle ||\n        !userAccount ||\n        !provider\n      )\n        return;\n\n      onOpen();\n\n      const program = new Program<LotteryProgram>(\n        LotteryIdl,\n        programID,\n        provider\n      );\n      const [lotteryAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"lottery\", \"utf8\"), lottery.key.toBuffer()],\n        program.programId\n      );\n\n      const [round] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound.toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      const [participation, participationBump] =\n        await PublicKey.findProgramAddress(\n          [\n            Buffer.from(\"participation\", \"utf8\"),\n            lottery.key.toBuffer(),\n            lottery.lastRound.toArrayLike(Buffer, \"le\", 8),\n            wallet.publicKey.toBuffer(),\n          ],\n          programID\n        );\n\n      try {\n        try {\n          // Check if there already is a participation\n          await program.account.lotteryParticipation.fetch(participation);\n\n          // If it works, update it, else create it\n          await program.rpc.updateParticipation(spendings, {\n            accounts: {\n              lottery: lotteryAddress,\n              lotteryRound: round,\n              participation: participation,\n              player: wallet.publicKey,\n              playerAccount: userAccount.address,\n              treasury: jungle.rewardsAccount,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n              systemProgram: SystemProgram.programId,\n            },\n          });\n        } catch (err) {\n          await program.rpc.participate(participationBump, spendings, {\n            accounts: {\n              lottery: lotteryAddress,\n              lotteryRound: round,\n              participation: participation,\n              player: wallet.publicKey,\n              playerAccount: userAccount.address,\n              treasury: jungle.rewardsAccount,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n              systemProgram: SystemProgram.programId,\n            },\n          });\n        }\n        toast({\n          title: \"Your bet is accepted!\",\n          description: `Successfully bet round #${\n            lottery.lastRound.toNumber() + 1\n          }`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchLottery();\n        fetchUserAccount();\n        fetchUserParticipations();\n      } catch (err) {\n        console.log(\"Failed participating\", err);\n\n        toast({\n          title: \"Participation failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      lottery,\n      provider,\n      jungle,\n      userAccount,\n      toast,\n      wallet,\n      onClose,\n      onOpen,\n      fetchLottery,\n      fetchUserAccount,\n      fetchUserParticipations,\n    ]\n  );\n\n  const claimParticipation = useCallback(\n    async (index: number) => {\n      if (\n        !wallet ||\n        !wallet.publicKey ||\n        !lottery ||\n        !jungle ||\n        !userAccount ||\n        !provider\n      )\n        return;\n\n      onOpen();\n\n      const program = new Program<LotteryProgram>(\n        LotteryIdl,\n        programID,\n        provider\n      );\n      const [lotteryAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"lottery\", \"utf8\"), lottery.key.toBuffer()],\n        program.programId\n      );\n      const [escrow] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"escrow\", \"utf8\"), lottery.key.toBuffer()],\n        program.programId\n      );\n      const [round] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          new BN(index).toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      const [participation] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"participation\", \"utf8\"),\n          lottery.key.toBuffer(),\n          new BN(index).toArrayLike(Buffer, \"le\", 8),\n          wallet.publicKey.toBuffer(),\n        ],\n        programID\n      );\n\n      try {\n        await program.rpc.claimParticipation({\n          accounts: {\n            lottery: lotteryAddress,\n            escrow: escrow,\n            lotteryRound: round,\n            participation: participation,\n            player: wallet.publicKey,\n            clock: SYSVAR_CLOCK_PUBKEY,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId,\n          },\n        });\n\n        toast({\n          title: \"Claimed participation\",\n          description: `Successfully claimed round #${index}`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchLottery();\n        fetchUserParticipations();\n      } catch (err) {\n        console.log(\"Failed claiming\", err);\n\n        toast({\n          title: \"Claiming failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      lottery,\n      provider,\n      jungle,\n      userAccount,\n      toast,\n      wallet,\n      onClose,\n      onOpen,\n      fetchLottery,\n      fetchUserParticipations,\n    ]\n  );\n\n  return (\n    <Context.Provider\n      value={{\n        lottery,\n        currentRound,\n        nextPot,\n        userParticipations,\n        fetchRound,\n        newLotteryRound,\n        participate,\n        claimParticipation,\n      }}\n    >\n      {children}\n      <ConfirmationModal isOpen={confirming} onClose={onClose} />\n    </Context.Provider>\n  );\n};\n\nexport default LotteryProvider;\n","import { keccak_256 } from \"js-sha3\";\n\nexport class MerkleTree {\n  leafs: Array<Buffer>;\n  layers: Array<Array<Buffer>>;\n\n  constructor(leafs: Array<Buffer>) {\n    this.leafs = leafs.slice();\n    this.layers = [];\n\n    let hashes = this.leafs.map(MerkleTree.nodeHash);\n    while (hashes.length > 0) {\n      this.layers.push(hashes.slice());\n      if (hashes.length === 1) break;\n      hashes = hashes.reduce((acc, cur, idx, arr) => {\n        if (idx % 2 === 0) {\n          const nxt = arr[idx + 1];\n          acc.push(MerkleTree.internalHash(cur, nxt));\n        }\n        return acc;\n      }, Array<Buffer>());\n    }\n  }\n\n  static nodeHash(data: Buffer): Buffer {\n    return Buffer.from(keccak_256.digest([0x00, ...data]));\n  }\n\n  static internalHash(first: Buffer, second: Buffer | undefined): Buffer {\n    if (!second) return first;\n    const [fst, snd] = [first, second].sort(Buffer.compare);\n    return Buffer.from(keccak_256.digest([0x01, ...fst, ...snd]));\n  }\n\n  getRoot(): Buffer {\n    return this.layers[this.layers.length - 1][0];\n  }\n\n  getRootArray(): number[] {\n    let arr = [];\n    for (let v of this.getRoot().values()) {\n      arr.push(v);\n    }\n    return arr;\n  }\n\n  getProof(idx: number): Buffer[] {\n    return this.layers.reduce((proof, layer) => {\n      const sibling = idx ^ 1;\n      if (sibling < layer.length) {\n        proof.push(layer[sibling]);\n      }\n\n      idx = Math.floor(idx / 2);\n\n      return proof;\n    }, []);\n  }\n\n  getProofArray(index: number) {\n    let res = [];\n\n    for (let e of this.getProof(index)) {\n      let arr: number[] = [];\n      for (let v of e.values()) {\n        arr.push(v);\n      }\n      res.push(arr)\n    }\n    return res;\n  }\n\n  getHexRoot(): string {\n    return this.getRoot().toString(\"hex\");\n  }\n\n  getHexProof(idx: number): string[] {\n    return this.getProof(idx).map((el) => el.toString(\"hex\"));\n  }\n\n  verifyProof(idx: number, proof: Buffer[], root: Buffer): boolean {\n    let pair = MerkleTree.nodeHash(this.leafs[idx]);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n  static verifyClaim(leaf: Buffer, proof: Buffer[], root: Buffer): boolean {\n    let pair = MerkleTree.nodeHash(leaf);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n}\n","import * as anchor from \"@project-serum/anchor\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\n\nimport mainnetMetadata from \"./mainnetMetadata.json\";\nimport devnetMetadata from \"./devnetMetadata.json\";\nimport { MetadataJson } from \"@metaplex/js\";\n\nconst MAINNET = true;\n\nexport type StaticMetadata = {\n  metadata: {\n    name: string;\n    symbol: string;\n    uri: string;\n    seller_fee_basis_points: number;\n    creators: {\n      address: string;\n      share: number;\n    }[];\n  };\n  arweave: MetadataJson;\n  mint: string;\n  rarity: number;\n  faction: string;\n};\n\nexport const COLLECTION_CLAIM_DELAY = new anchor.BN(86400);\n\nexport const FACTIONS = [\n  { name: \"Serengetis\" },\n  { name: \"Amphibians\" },\n  { name: \"Reptiles\" },\n  { name: \"Misfits\" },\n  { name: \"Birds\" },\n  { name: \"Monkeys\" },\n  { name: \"Carnivores\" },\n  { name: \"Extincts\" },\n];\n\nconst devnetConstants = {\n  mainnet: MAINNET,\n  network: WalletAdapterNetwork.Devnet,\n  ticker: \"ANIMAL\",\n  wrappedSol: new anchor.web3.PublicKey(\n    \"So11111111111111111111111111111111111111112\"\n  ),\n  jungleKey: new anchor.web3.PublicKey(\n    \"7sL8xCP733dh7TnsqREQi9DzK2xDQjQjodAgEtkz9NKa\"\n  ),\n  lotteryKey: new anchor.web3.PublicKey(\n    \"EEisFsGbo3BTaLN8JayBeGcCrJkJCxGB16DkCAnP6qWY\"\n  ),\n  metadata: devnetMetadata as any as StaticMetadata[],\n};\n\nconst mainnetConstants = {\n  mainnet: MAINNET,\n  network: WalletAdapterNetwork.Mainnet,\n  ticker: \"ANIMAL\",\n  wrappedSol: new anchor.web3.PublicKey(\n    \"So11111111111111111111111111111111111111112\"\n  ),\n  jungleKey: new anchor.web3.PublicKey(\n    \"5fkaiL886wsZSBPJKG77SxUMsaKFJ4tyLD5bw2jpdMfH\"\n  ),\n  lotteryKey: new anchor.web3.PublicKey(\n    \"2w6hdN1jfHxF44ksb4ZGnf3NQxujNjbRZc62xwP4RBk2\"\n  ),\n  metadata: mainnetMetadata as any as StaticMetadata[],\n};\n\nconst constants = MAINNET ? mainnetConstants : devnetConstants;\n\nexport default constants;\n","import { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Flex,\n  Stack,\n  Link,\n  Text,\n  useColorModeValue,\n  Icon,\n} from \"@chakra-ui/react\";\nimport { NavItem } from \"./types\";\n\nconst DesktopSubNav = ({ label, href, subLabel, newTab }: NavItem) => {\n  return (\n    <Link\n      href={href}\n      role={\"group\"}\n      display={\"block\"}\n      p={2}\n      rounded={\"md\"}\n      _hover={{ bg: useColorModeValue(\"gray.300\", \"pink.50\") }}\n      target={newTab ? \"_blank\" : undefined}\n    >\n      <Stack direction={\"row\"} align={\"center\"}>\n        <Box>\n          <Text\n            transition={\"all .3s ease\"}\n            fontWeight={500}\n          >\n            {label}\n          </Text>\n          <Text fontSize={\"sm\"}>{subLabel}</Text>\n        </Box>\n        <Flex\n          transition={\"all .3s ease\"}\n          transform={\"translateX(-10px)\"}\n          opacity={0}\n          _groupHover={{ opacity: \"100%\", transform: \"translateX(0)\" }}\n          justify={\"flex-end\"}\n          align={\"center\"}\n          flex={1}\n        >\n          <Icon w={5} h={5} as={ChevronRightIcon} />\n        </Flex>\n      </Stack>\n    </Link>\n  );\n};\n\nexport default DesktopSubNav;\n","import { NavItem } from \"./types\";\n\nconst NAV_ITEMS: Array<NavItem> = [\n  {\n    label: \"Home\",\n    href: \"#/\"\n  },\n  {\n    label: \"Staking\",\n    href: \"#/staking\"\n  },\n  {\n    label: \"Lottery\",\n    href: \"#/lottery\"\n  },\n  {\n    label: \"Resources\",\n    children: [\n      {\n        label: \"The Jungle Discord\",\n        subLabel: \"The Jungle NFT official Discord server\",\n        href: \"https://discord.gg/MN3c63Sn\",\n        newTab: true,\n      },\n    ],\n  },\n];\n\nexport default NAV_ITEMS;\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\nimport {\n  Box,\n  Stack,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  Link,\n} from \"@chakra-ui/react\";\nimport DesktopSubNav from \"./DesktopSubNav\";\nimport NAV_ITEMS from \"./items\";\n\nconst DesktopNav = () => {\n  const linkColor = useColorModeValue(\"gray.200\", \"gray.600\");\n  const linkHoverColor = useColorModeValue(\"white\", \"gray.800\");\n  const popoverContentBgColor = useColorModeValue(\"gray.800\", \"white\");\n\n  return (\n    <Stack direction={\"row\"} spacing={4}>\n      {NAV_ITEMS.map((navItem) => (\n        <Box key={navItem.label}>\n          <Popover trigger={\"hover\"} placement={\"bottom-start\"}>\n            <PopoverTrigger>\n              <Link\n                p={2}\n                href={navItem.href}\n                fontSize={\"sm\"}\n                fontWeight={500}\n                color={linkColor}\n                _hover={{\n                  textDecoration: \"none\",\n                  color: linkHoverColor,\n                }}\n                target={navItem.newTab ? \"_blank\" : undefined}\n              >\n                {navItem.label}\n              </Link>\n            </PopoverTrigger>\n\n            {navItem.children && (\n              <PopoverContent\n                border={0}\n                boxShadow={\"xl\"}\n                bg={popoverContentBgColor}\n                p={4}\n                rounded={\"xl\"}\n                minW={\"sm\"}\n              >\n                <Stack>\n                  {navItem.children.map((child) => (\n                    <DesktopSubNav key={child.label} {...child} />\n                  ))}\n                </Stack>\n              </PopoverContent>\n            )}\n          </Popover>\n        </Box>\n      ))}\n    </Stack>\n  );\n};\n\nexport default DesktopNav;\n","import { ChevronDownIcon } from \"@chakra-ui/icons\";\nimport {\n  Collapse,\n  Flex,\n  Link,\n  Icon,\n  Stack,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport NAV_ITEMS from \"./items\";\nimport { NavItem } from \"./types\";\n\nconst MobileNavItem = ({ label, children, href }: NavItem) => {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack spacing={4} onClick={children && onToggle}>\n      <Flex\n        py={2}\n        as={Link}\n        href={href ?? \"#\"}\n        justify={\"space-between\"}\n        align={\"center\"}\n        _hover={{\n          textDecoration: \"none\",\n        }}\n      >\n        <Text\n          fontWeight={600}\n          color={useColorModeValue(\"gray.600\", \"gray.200\")}\n        >\n          {label}\n        </Text>\n        {children && (\n          <Icon\n            as={ChevronDownIcon}\n            transition={\"all .25s ease-in-out\"}\n            transform={isOpen ? \"rotate(180deg)\" : \"\"}\n            w={6}\n            h={6}\n          />\n        )}\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity style={{ marginTop: \"0!important\" }}>\n        <Stack\n          mt={2}\n          pl={4}\n          borderLeft={1}\n          borderStyle={\"solid\"}\n          borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n          align={\"start\"}\n        >\n          {children &&\n            children.map((child) => (\n              <Link key={child.label} py={2} href={child.href}>\n                {child.label}\n              </Link>\n            ))}\n        </Stack>\n      </Collapse>\n    </Stack>\n  );\n};\n\nconst MobileNav = () => {\n  return (\n    <Stack\n      bg={useColorModeValue(\"white\", \"gray.800\")}\n      p={4}\n      display={{ md: \"none\" }}\n    >\n      {NAV_ITEMS.map((navItem) => (\n        <MobileNavItem key={navItem.label} {...navItem} />\n      ))}\n    </Stack>\n  );\n};\n\nexport default MobileNav;\n","import { Button, Tag, TagLabel } from \"@chakra-ui/react\";\nimport { useWalletKit } from \"@gokiprotocol/walletkit\";\nimport { useSolana } from \"@saberhq/use-solana\";\nimport { shortAddress } from \"utils\";\n\nimport useCollection from \"../../hooks/useJungle\";\nimport constants from \"../../constants\";\n\nconst WalletButton: React.FC = () => {\n  const { connected, publicKey, disconnect } = useSolana();\n  const { connect } = useWalletKit();\n  const { userAccount } = useCollection();\n\n  return (\n    <>\n      {connected ? (\n        <>\n          {userAccount && (\n            <Tag size=\"lg\" variant=\"subtle\" colorScheme=\"cyan\">\n              <TagLabel>\n                {(userAccount.amount.toNumber() / 10 ** 9).toFixed(2)} $\n                {constants.ticker}\n              </TagLabel>\n            </Tag>\n          )}\n          <Button onClick={disconnect}>\n            {shortAddress(publicKey?.toString())}\n          </Button>\n        </>\n      ) : (\n        <Button colorScheme=\"teal\" onClick={() => connect()}>Connect Wallet</Button>\n      )}\n    </>\n  );\n};\n\nexport default WalletButton;\n","export default __webpack_public_path__ + \"static/media/logo192.9904efa0.2f3a314e.png\";","import {\n  Box,\n  Flex,\n  IconButton,\n  Stack,\n  Collapse,\n  useColorModeValue,\n  useDisclosure,\n  Image,\n} from \"@chakra-ui/react\";\nimport { HamburgerIcon, CloseIcon } from \"@chakra-ui/icons\";\n\nimport DesktopNav from \"./DesktopNav\";\nimport MobileNav from \"./MobileNav\";\nimport WalletButton from \"./WalletButton\";\n\nimport logo from \"../../assets/logo192.9904efa0.png\";\n\nexport default function WithSubnavigation() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Box>\n      <Flex\n        bg={useColorModeValue(\"gray.800\", \"gray.800\")}\n        color={useColorModeValue(\"gray.500\", \"white\")}\n        minH={\"60px\"}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={\"solid\"}\n        borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\n        align={\"center\"}\n      >\n        <Flex\n          flex={{ base: 1, md: \"auto\" }}\n          ml={{ base: -2 }}\n          display={{ base: \"flex\", md: \"none\" }}\n        >\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={\"ghost\"}\n            aria-label={\"Toggle Navigation\"}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: \"center\", md: \"start\" }}>\n          <Image src={logo} boxSize={8} color={useColorModeValue(\"white\", \"white\")}/>\n\n          <Flex display={{ base: \"none\", md: \"flex\" }} ml={10}>\n            <DesktopNav />\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={\"flex-end\"}\n          direction={\"row\"}\n          spacing={6}\n        >\n          <WalletButton />\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <MobileNav />\n      </Collapse>\n    </Box>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/the_jungle.d497567e.png\";","import React from \"react\";\nimport {\n  Button,\n  Container,\n  Image,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\n\nimport hero from \"../../assets/the_jungle.png\"\n\nconst Home: React.FC = () => {\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack\n        textAlign={\"center\"}\n        align={\"center\"}\n        spacing={{ base: 8, md: 10 }}\n      >\n        <Image src={hero} />\n        <Text color={\"white\"} maxW={\"3xl\"}>\n          The Jungle is a collection of 1,555 pixel animals living on Solana\n          blockchain. With over 50 unique characters belonging to 8 factions,\n          our aim is to bring together the many DAOs in the Solana eco-system\n          through co-operation, competition, staking rewards and striving to\n          make a positive change in the world.\n        </Text>\n        <Stack spacing={6} direction={\"row\"}>\n          <Button\n            as={Link}\n            to=\"staking\"\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n          >\n            Get started staking\n          </Button>\n        </Stack>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Flex,\n  Box,\n  Image,\n  Text,\n  HStack,\n  Button,\n  Spacer,\n} from \"@chakra-ui/react\";\nimport { Animal } from \"contexts/Jungle\";\nimport useJungle from \"hooks/useJungle\";\n\ninterface TokenCardProps {\n  token: Animal;\n  stakable?: boolean;\n}\n\nconst TokenCard: React.FC<TokenCardProps> = ({ token, stakable }) => {\n  const {\n    getRarityMultiplier,\n    getPendingStakingRewards,\n    fetchAnimal,\n    stakeAnimal,\n    unstakeAnimal,\n    claimStakingRewards,\n  } = useJungle();\n\n  const [augmentedAnimal, setAugmentedAnimal] = useState<Animal>();\n  const [stakingPeriod, setStakingPeriod] = useState<Date>(new Date());\n\n  const fetchAnimalStats = useCallback(async () => {\n    setAugmentedAnimal(await fetchAnimal(token.mint));\n  }, [token, fetchAnimal]);\n\n  useEffect(() => {\n    if (!token.lastClaim) fetchAnimalStats();\n  }, [token, fetchAnimalStats]);\n\n  useEffect(() => {\n    const interval = setInterval(() => setStakingPeriod(new Date()), 500);\n    return () => clearInterval(interval);\n  }, [setStakingPeriod]);\n\n  const handleStake = useCallback(async () => {\n    if (!augmentedAnimal) return;\n    await stakeAnimal(augmentedAnimal);\n  }, [augmentedAnimal, stakeAnimal]);\n\n  const handleUnstake = useCallback(async () => {\n    if (!augmentedAnimal) return;\n    await unstakeAnimal(augmentedAnimal);\n  }, [augmentedAnimal, unstakeAnimal]);\n\n  const handleClaim = useCallback(async () => {\n    if (!augmentedAnimal) return;\n    await claimStakingRewards(augmentedAnimal);\n    fetchAnimalStats();\n  }, [augmentedAnimal, claimStakingRewards, fetchAnimalStats]);\n\n  return (\n    <Flex\n      w=\"280px\"\n      h=\"100%\"\n      pt=\"0\"\n      background=\"white\"\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth=\"2px\"\n      rounded=\"lg\"\n      shadow=\"lg\"\n    >\n      <Image\n        src={token.metadata.image}\n        rounded=\"lg\"\n        w=\"280px\"\n        maxH=\"400px\"\n        top=\"0\"\n      />\n      <Text fontSize=\"2xl\" fontWeight=\"bold\" w=\"280px\" textAlign=\"center\">\n        {token.metadata.name}\n      </Text>\n      <Box p=\"3\" w=\"100%\">\n        <Flex w=\"100%\">\n          <Text>Rarity multiplier:</Text>\n          <Spacer />\n          <Text>{getRarityMultiplier(token)}</Text>\n        </Flex>\n        {augmentedAnimal?.lastClaim && (\n          <Flex w=\"100%\">\n            <Text>Pending rewards:</Text>\n            <Spacer />\n            <Text>\n              {getPendingStakingRewards(augmentedAnimal, stakingPeriod).toFixed(\n                2\n              )}\n            </Text>\n          </Flex>\n        )}\n        {augmentedAnimal?.lastClaim && stakable ? (\n          <HStack>\n            <Button isFullWidth colorScheme=\"blue\" onClick={handleUnstake}>\n              Unstake\n            </Button>\n            <Button isFullWidth colorScheme=\"green\" onClick={handleClaim}>\n              Claim\n            </Button>\n          </HStack>\n        ) : (\n          <Button isFullWidth colorScheme=\"green\" onClick={handleStake}>\n            Stake\n          </Button>\n        )}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default TokenCard;\n","import React from \"react\";\nimport { Box, Button, Divider, Flex, Heading, Wrap } from \"@chakra-ui/react\";\nimport { BiRefresh } from \"react-icons/bi\";\n\nimport useJungle from \"../../hooks/useJungle\";\nimport TokenCard from \"../../components/TokenCard\";\n\nconst Staking: React.FC = () => {\n  const { animals, stakedAnimals, refreshAnimals } = useJungle();\n\n  return (\n    <Flex direction=\"column\" w=\"100%\" align=\"center\" p=\"10px\">\n      <Box>\n        <Flex justify=\"center\">\n          <Box verticalAlign=\"center\">\n            <Heading m=\"8px\" verticalAlign=\"center\" color=\"white\">\n              Your animals\n            </Heading>\n          </Box>\n          <Button\n            align=\"center\"\n            m=\"3\"\n            leftIcon={<BiRefresh />}\n            onClick={refreshAnimals}\n          >\n            Refresh\n          </Button>\n        </Flex>\n        {animals.length > 0 ? (\n          <Wrap justify=\"center\">\n            {animals.map((e) => (\n              <TokenCard key={e.mint.toString()} token={e} />\n            ))}\n          </Wrap>\n        ) : (\n          <Heading p=\"5\" color=\"white\">\n            You don't have any animals...\n          </Heading>\n        )}\n      </Box>\n      <Divider my=\"3\" />\n      <Box>\n        <Flex justify=\"center\">\n          <Heading m=\"8px\" verticalAlign=\"center\" color=\"white\">\n            Your staked animals\n          </Heading>\n        </Flex>\n        {stakedAnimals.length > 0 ? (\n          <Wrap justify=\"center\">\n            {stakedAnimals.map((e) => (\n              <TokenCard key={e.mint.toString()} token={e} stakable />\n            ))}\n          </Wrap>\n        ) : (\n          <Heading p=\"5\" color=\"white\">\n            You don't have any staked animals...\n          </Heading>\n        )}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Staking;\n","import { useContext } from \"react\";\n\nimport { LotteryContext } from \"../contexts/Lottery\";\n\nconst useLottery = () => {\n  return {\n    ...useContext(LotteryContext),\n  };\n};\n\nexport default useLottery;\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport {\n  Flex,\n  Text,\n  Button,\n  Spacer,\n  VStack,\n  Heading,\n  FormControl,\n  FormLabel,\n  Input,\n} from \"@chakra-ui/react\";\nimport constants, { FACTIONS } from \"../../constants\";\nimport useLottery from \"hooks/useLottery\";\nimport { BN } from \"@project-serum/anchor\";\n\ninterface TokenCardProps {\n  faction: number;\n}\n\nconst FactionCard: React.FC<TokenCardProps> = ({ faction }) => {\n  const { currentRound, userParticipations, participate } = useLottery();\n\n  const [amount, setAmount] = useState<number>();\n\n  const handleParticipation = useCallback(() => {\n    if (!amount) return;\n\n    const spendings = Array(8)\n      .fill(0)\n      .map(() => new BN(0));\n    spendings[faction] = new BN(amount * 10 ** 9);\n    participate(spendings);\n  }, [amount, faction, participate]);\n\n  const currentParticipation = useMemo(() => {\n    return userParticipations.filter(\n      (e) => e.index.toNumber() === currentRound?.index.toNumber()\n    )[0];\n  }, [userParticipations, currentRound]);\n\n  return (\n    <Flex\n      w=\"280px\"\n      h=\"100%\"\n      pt=\"0\"\n      background=\"white\"\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth=\"2px\"\n      rounded=\"lg\"\n      shadow=\"lg\"\n    >\n      <VStack spacing=\"2\" p=\"2\">\n        <Heading>{FACTIONS[faction].name}</Heading>\n        <FormControl>\n          <FormLabel>Amount of ${constants.ticker} to bet</FormLabel>\n          <Input\n            type=\"number\"\n            placeholder=\"Choose an amount to bet\"\n            onChange={(e) => setAmount(Number(e.target.value))}\n          />\n        </FormControl>\n        <Flex w=\"100%\">\n          <Text>Your bets on this faction:</Text>\n          <Spacer />\n          <Text>\n            {currentParticipation\n              ? currentParticipation.spendings[faction].toNumber() / 10 ** 9\n              : 0}\n          </Text>\n        </Flex>\n        <Flex w=\"100%\">\n          <Text>Total bets:</Text>\n          <Spacer />\n          <Text>\n            {currentRound\n              ? currentRound.spendings[faction].toNumber() / 10 ** 9\n              : 0}\n          </Text>\n        </Flex>\n        <Button isFullWidth colorScheme=\"green\" onClick={handleParticipation}>\n          Bet on this faction\n        </Button>\n      </VStack>\n    </Flex>\n  );\n};\n\nexport default FactionCard;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Flex, Text, Button, Spacer, VStack, Heading } from \"@chakra-ui/react\";\nimport useLottery from \"hooks/useLottery\";\nimport { LotteryRound, Participation } from \"contexts/Lottery\";\nimport { BN } from \"@project-serum/anchor\";\nimport constants, { FACTIONS } from \"../../constants\";\n\ninterface TokenCardProps {\n  participation: Participation;\n}\n\nconst ParticipationCard: React.FC<TokenCardProps> = ({ participation }) => {\n  const { fetchRound, claimParticipation } = useLottery();\n\n  const [round, setRound] = useState<LotteryRound>();\n\n  const fetchCorrespondingRound = useCallback(async () => {\n    const r = await fetchRound(participation.index.toNumber());\n    if (r) setRound(r);\n  }, [participation.index, fetchRound]);\n\n  useEffect(() => {\n    fetchCorrespondingRound();\n  }, [fetchCorrespondingRound]);\n\n  const handleParticipation = useCallback(\n    (index: number) => {\n      claimParticipation(index);\n    },\n    [claimParticipation]\n  );\n\n  return (\n    <Flex\n      w=\"100%\"\n      h=\"100%\"\n      p=\"5\"\n      direction=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth=\"2px\"\n      rounded=\"lg\"\n      shadow=\"lg\"\n    >\n      <Heading>Round #{participation.index.toNumber()}</Heading>\n      <Spacer />\n      <VStack align=\"start\">\n        <Text>\n          You spent{\" \"}\n          {participation.spendings.reduce((a, b) => a.add(b)).toNumber() /\n            10 ** 9}{\" \"}\n          ${constants.ticker} on this round\n        </Text>\n        {round && (\n          <>\n            <Text>\n              The winners were <b>{FACTIONS[round.winner - 1].name}</b>, you\n              spent{\" \"}\n              {participation.spendings[round.winner - 1].toNumber() / 10 ** 9} $\n              {constants.ticker} on them.\n            </Text>\n            <Text>The pot was {round.pot.toString()} SOL</Text>\n            <Text>\n              You earned{\" \"}\n              {round.spendings[round.winner - 1].gt(new BN(0))\n                ? participation.spendings[round.winner - 1]\n                    .mul(round.pot)\n                    .div(round.spendings[round.winner - 1])\n                    .toNumber() /\n                  10 ** 9\n                : 0}{\" \"}\n              SOL (\n              {round.spendings[round.winner - 1].gt(new BN(0))\n                ? participation.spendings[round.winner - 1]\n                    .mul(new BN(10000))\n                    .div(round.spendings[round.winner - 1])\n                    .toNumber() / 100\n                : 0}\n              % of the pot)\n            </Text>\n          </>\n        )}\n      </VStack>\n      <Spacer />\n      <Button\n        colorScheme=\"blue\"\n        onClick={() => handleParticipation(participation.index.toNumber())}\n      >\n        Claim participation\n      </Button>\n    </Flex>\n  );\n};\n\nexport default ParticipationCard;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  Heading,\n  VStack,\n  Wrap,\n} from \"@chakra-ui/react\";\n\nimport useLottery from \"hooks/useLottery\";\nimport { FACTIONS } from \"../../constants\";\nimport { BN } from \"@project-serum/anchor\";\nimport FactionCard from \"components/FactionCard\";\nimport ParticipationCard from \"components/ParticipationCard\";\nimport { useConnectedWallet } from \"@saberhq/use-solana\";\n\nconst Lottery: React.FC = () => {\n  const wallet = useConnectedWallet();\n  const {\n    lottery,\n    currentRound,\n    nextPot,\n    userParticipations,\n    newLotteryRound,\n  } = useLottery();\n\n  const [now, setNow] = useState<number>();\n\n  const formatTime = useCallback(() => {\n    if (!currentRound || !lottery || !now) return null;\n\n    let difference;\n    if (currentRound.start.toNumber() > now) {\n      difference = currentRound.start.sub(new BN(now)).toNumber();\n    } else {\n      difference = currentRound.start\n        .add(lottery.period)\n        .sub(new BN(now))\n        .toNumber();\n    }\n    const days = Math.floor(difference / (60 * 60 * 24));\n    const hours = Math.floor((difference / (60 * 60)) % 24);\n    const minutes = Math.floor((difference / 60) % 60);\n    const seconds = Math.floor(difference % 60);\n\n    return `${days < 10 ? \"0\" + days : days}:${\n      hours < 10 ? \"0\" + hours : hours\n    }:${minutes < 10 ? \"0\" + minutes : minutes}:${\n      seconds < 10 ? \"0\" + seconds : seconds\n    }`;\n  }, [lottery, currentRound, now]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(Math.round(Date.now() / 1000));\n    }, 1000);\n    // Clear timeout if the component is unmounted\n    return () => clearTimeout(timer);\n  });\n\n  const handleNewRound = useCallback(() => {\n    newLotteryRound();\n  }, [newLotteryRound]);\n\n  return (\n    <Flex direction=\"column\" w=\"100%\" align=\"center\" p=\"10px\">\n      <Box>\n        <Heading textAlign=\"center\" color=\"white\">Lottery</Heading>\n        {lottery && currentRound && (\n          <Box align=\"center\" color=\"white\">\n            <Heading textAlign=\"center\" size=\"lg\">\n              Current round {currentRound.index.toNumber()}\n            </Heading>\n            <Heading textAlign=\"center\" size=\"md\">\n              This round's jackpot is worth{\" \"}\n              {currentRound.pot.div(new BN(10 ** 9)).toNumber()} SOL\n            </Heading>\n            {now &&\n            lottery.lastTimestamp.add(lottery.period).toNumber() > now ? (\n              <Heading textAlign=\"center\" size=\"sm\">\n                Next round starts in {formatTime()} and its pot is currently{\" \"}\n                {nextPot || 0} SOL\n              </Heading>\n            ) : (\n              <Button\n                colorScheme=\"blue\"\n                m=\"3\"\n                onClick={handleNewRound}\n                disabled={!wallet}\n              >\n                Start next round\n              </Button>\n            )}\n          </Box>\n        )}\n        <Wrap m=\"2\" justify=\"center\">\n          {FACTIONS.map((e, i) => (\n            <FactionCard key={e.name} faction={i} />\n          ))}\n        </Wrap>\n        {userParticipations.length > 0 && (\n          <>\n            <Divider my=\"30px\" />\n            <Heading textAlign=\"center\" pb=\"3\">\n              Your past participations\n            </Heading>\n            <VStack>\n              {userParticipations\n                .filter(\n                  (e) => e.index.toNumber() !== currentRound?.index.toNumber()\n                )\n                .map((e) => (\n                  <ParticipationCard\n                    key={e.index.toNumber()}\n                    participation={e}\n                  />\n                ))}\n            </VStack>\n          </>\n        )}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Lottery;\n","import React, { useCallback, useState } from \"react\";\nimport { Button, Container, Input } from \"@chakra-ui/react\";\nimport useLottery from \"hooks/useLottery\";\nimport { SystemProgram, Transaction } from \"@solana/web3.js\";\nimport { useConnectedWallet, useSolana } from \"@saberhq/use-solana\";\nimport { web3 } from \"@project-serum/anchor\";\n\nconst Admin: React.FC = () => {\n  const { connection } = useSolana();\n  const wallet = useConnectedWallet();\n  const { lottery } = useLottery();\n  const [amount, setAmount] = useState<number>(0);\n\n  const handleSend = useCallback(async () => {\n    if (!lottery || !wallet) return;\n    const signed = await wallet.signTransaction(\n      new Transaction({\n        recentBlockhash: (await connection.getRecentBlockhash()).blockhash,\n        feePayer: wallet.publicKey,\n      }).add(\n        SystemProgram.transfer({\n          fromPubkey: wallet.publicKey,\n          toPubkey: lottery.escrow,\n          lamports: amount,\n        })\n      )\n    );\n    await web3.sendAndConfirmRawTransaction(\n      connection,\n      signed.serialize()\n    );\n  }, [connection, wallet, lottery, amount]);\n\n  const handleChange = useCallback(\n    (n: number) => {\n      setAmount(n * 10 ** 9);\n    },\n    [setAmount]\n  );\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Input\n        type=\"number\"\n        onChange={(e) => handleChange(Number(e.target.value))}\n      />\n      <Button onClick={handleSend} disabled={amount === 0}>\n        Send SOL\n      </Button>\n    </Container>\n  );\n};\n\nexport default Admin;\n","import React, { useCallback, useMemo } from \"react\";\nimport { Route, HashRouter as Router, Routes } from \"react-router-dom\";\nimport { ChakraProvider, useToast } from \"@chakra-ui/react\";\nimport { WalletAdapterNetwork, WalletError } from \"@solana/wallet-adapter-base\";\nimport { WalletKitProvider } from \"@gokiprotocol/walletkit\";\nimport { ModalStep } from \"@gokiprotocol/walletkit/dist/cjs/components/WalletSelectorModal\";\nimport { WalletProvider } from \"@solana/wallet-adapter-react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./views/Home\";\nimport { JungleProvider } from \"contexts/Jungle\";\nimport Staking from \"views/Staking\";\nimport constants from \"./constants\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport Lottery from \"views/Lottery\";\nimport { LotteryProvider } from \"contexts/Lottery\";\nimport Admin from \"views/Admin\";\n\nconst WalletProviders: React.FC = ({ children }) => {\n  const network = constants.mainnet\n    ? WalletAdapterNetwork.Mainnet\n    : WalletAdapterNetwork.Devnet;\n\n  const devnetEnpoint = useMemo(() => clusterApiUrl(network), [network]);\n  // const endpoint = constants.mainnet\n  //   ? \"https://connect.runnode.com/?apikey=\" +\n  //     process.env.REACT_APP_RUN_NODE_API_KEY\n  //   : devnetEnpoint;\n  const endpoint = devnetEnpoint\n  const toast = useToast();\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: { clientId: \"Get a client ID @ https://developer.tor.us\" },\n      }),\n      getLedgerWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  );\n\n  const onError = useCallback(\n    (error: WalletError) =>\n      toast({\n        title: \"Error\",\n        description: error.message\n          ? `${error.name}: ${error.message}`\n          : error.name,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      }),\n    [toast]\n  );\n\n  return (\n    <WalletKitProvider\n      app={{\n        name: \"The Jungle\",\n      }}\n      initialStep={ModalStep.Select}\n      defaultNetwork={network}\n      networkConfigs={{\n        \"mainnet-beta\": { name: \"RunNode\", endpoint: endpoint }\n      }}\n      commitment=\"confirmed\"\n    >\n      <WalletProvider wallets={wallets} onError={onError}>\n        <WalletModalProvider>{children}</WalletModalProvider>\n      </WalletProvider>\n    </WalletKitProvider>\n  );\n};\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <ChakraProvider>\n      <WalletProviders>\n        <JungleProvider>\n          <LotteryProvider>{children}</LotteryProvider>\n        </JungleProvider>\n      </WalletProviders>\n    </ChakraProvider>\n  );\n};\n\nfunction App() {\n  return (\n    <Providers>\n      <Router>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/staking\" element={<Staking />} />\n          <Route path=\"/lottery\" element={<Lottery />} />\n          <Route path=\"/admin\" element={<Admin />} />\n        </Routes>\n      </Router>\n    </Providers>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}