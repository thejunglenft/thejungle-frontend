{"version":3,"sources":["constants/types/lottery.ts","utils/index.ts","constants/types/jungle.ts","contexts/Jungle/Context.tsx","contexts/Lottery/Context.tsx","components/ConfirmationModal/index.tsx","contexts/Jungle/Provider.tsx","contexts/Lottery/Provider.tsx","utils/merkleTree.ts","constants/index.ts","components/Navbar/DesktopSubNav.tsx","components/Navbar/items.ts","components/Navbar/DesktopNav.tsx","components/Navbar/MobileNav.tsx","components/WalletModal/WalletModal.tsx","components/Navbar/WalletButton.tsx","components/Navbar/Navbar.tsx","views/Home/Home.tsx","components/TokenCard/index.tsx","views/Staking/Staking.tsx","hooks/useLottery.tsx","components/FactionCard/index.tsx","components/ParticipationCard/index.tsx","views/Lottery/Lottery.tsx","views/Admin/Admin.tsx","App.tsx","reportWebVitals.ts","index.tsx","hooks/useJungle.tsx"],"names":["IDL","shortAddress","address","substring","length","findTokenAddress","walletAddress","tokenMintAddress","a","anchor","PublicKey","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","factionToNumber","faction","Error","buildLeaves","data","leaves","idx","animal","push","Buffer","from","mint","rarity","toArray","Context","createContext","animals","stakedAnimals","getRarityMultiplier","getPendingStakingRewards","fetchAnimal","Promise","fetchUserAccount","createAccount","stakeAnimal","unstakeAnimal","claimStakingRewards","userParticipations","fetchRound","newLotteryRound","participate","claimParticipation","ConfirmationModal","isOpen","onClose","wallet","useWallet","maxW","spacing","my","src","icon","w","h","size","thickness","programID","idl","metadata","JungleProvider","children","toast","useToast","connection","useConnection","useDisclosure","confirming","onOpen","useState","userAccount","setUserAccount","jungle","setJungle","setAnimals","setStakedAnimals","provider","useMemo","preflightCommitment","tree","constants","map","e","i","MerkleTree","fetchAnimals","useCallback","publicKey","Metadata","findDataByOwner","owned","collectionMints","filter","includes","metadataItem","f","arweave","console","log","useEffect","fetchStakedAnimals","program","account","all","memcmp","offset","bytes","toString","staked","fetchJungle","Program","JundleIdl","jungleKey","jungleAddress","fetch","fetchedJungle","key","owner","escrow","rewardsAccount","animalsStaked","maximumRarity","maximumRarityMultiplier","baseWeeklyEmissions","root","toNumber","end","animalMultiplier","lastClaim","valueOf","div","animalAddress","fetchedAnimal","Date","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","associatedAddress","token","getAccountInfo","signTransaction","tokenAccountAddress","sendTransaction","Transaction","add","createInitAccountInstruction","title","description","status","duration","isClosable","programId","animalBump","deposit","depositBump","bumps","stakerAccount","indexStaked","findIndex","rpc","getProofArray","accounts","staker","depositAccount","tokenProgram","clock","SYSVAR_CLOCK_PUBKEY","rent","SYSVAR_RENT_PUBKEY","systemProgram","SystemProgram","name","rewardsStakerAccount","animalStakerAccount","instructions","createAssociatedTokenAccountInstruction","instruction","claimStaking","Provider","value","LotteryProvider","useJungle","lottery","setLottery","currentRound","setCurrentRound","nextPot","setNextPot","setUserParticipations","fetchLottery","LotteryIdl","lotteryKey","lotteryAddress","fetchedLottery","treasury","period","lastRound","lastTimestamp","unclaimedPot","index","BN","toArrayLike","round","lotteryRound","fetchedRound","start","spendings","pot","winner","fetchCurrentRound","fetchUserParticipations","lotteryParticipation","participations","player","sort","b","fetchNextPot","getBalance","roundsToSkip","Math","min","floor","now","roundBump","previousRound","oldLotteryRound","payer","participation","participationBump","updateParticipation","playerAccount","leafs","layers","this","slice","hashes","nodeHash","reduce","acc","cur","arr","nxt","internalHash","Array","getRoot","values","v","proof","layer","sibling","res","getProof","el","pair","item","equals","keccak_256","digest","first","second","compare","fst","snd","leaf","MAINNET","FACTIONS","devnetConstants","mainnet","network","WalletAdapterNetwork","Devnet","ticker","wrappedSol","devnetMetadata","Mainnet","DesktopSubNav","label","href","subLabel","newTab","role","display","p","rounded","_hover","bg","useColorModeValue","target","undefined","direction","align","transition","_groupHover","color","fontWeight","fontSize","transform","opacity","justify","flex","as","ChevronRightIcon","NAV_ITEMS","DesktopNav","linkColor","linkHoverColor","popoverContentBgColor","navItem","trigger","placement","textDecoration","border","boxShadow","minW","child","MobileNavItem","onToggle","onClick","py","Link","ChevronDownIcon","in","animateOpacity","style","marginTop","mt","pl","borderLeft","borderStyle","borderColor","MobileNav","md","WalletModal","handleChooseWallet","walletName","select","adapter","connect","wallets","width","leftIcon","alt","WalletButton","connected","disconnect","useCollection","variant","colorScheme","amount","toFixed","Logo","createIcon","displayName","viewBox","path","fill","d","WithSubnavigation","minH","base","px","borderBottom","ml","boxSize","Home","currentImage","textAlign","sm","lineHeight","to","TokenCard","augmentedAnimal","setAugmentedAnimal","stakingPeriod","setStakingPeriod","fetchAnimalStats","interval","setInterval","clearInterval","handleStake","handleUnstake","handleClaim","pt","alignItems","justifyContent","borderWidth","shadow","image","maxH","top","isFullWidth","Staking","concat","useLottery","useContext","LotteryContext","FactionCard","setAmount","handleParticipation","currentParticipation","type","placeholder","onChange","Number","ParticipationCard","setRound","fetchCorrespondingRound","r","gt","mul","Lottery","setNow","formatTime","difference","sub","days","hours","minutes","seconds","timer","setTimeout","clearTimeout","handleNewRound","m","disabled","pb","Admin","handleSend","transfer","fromPubkey","toPubkey","lamports","handleChange","n","WalletProviders","devnetEnpoint","clusterApiUrl","endpoint","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","onError","error","message","ConnectionProvider","config","confirmTransactionInitialTimeout","WalletProvider","Providers","Jungle","App","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","JungleContext"],"mappings":"gHAofA,kCAAO,IAAMA,EAAe,CAC1B,QAAW,QACX,KAAQ,UACR,aAAgB,CACd,CACE,KAAQ,oBACR,SAAY,CACV,CACE,KAAQ,aACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,UACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,WACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,IAGhB,KAAQ,CACN,CACE,KAAQ,QACR,KAAQ,CACN,QAAW,2BAGf,CACE,KAAQ,SACR,KAAQ,OAEV,CACE,KAAQ,QACR,KAAQ,SAId,CACE,KAAQ,aACR,SAAY,CACV,CACE,KAAQ,UACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,IAGhB,KAAQ,CACN,CACE,KAAQ,QACR,KAAQ,OAEV,CACE,KAAQ,QACR,KAAQ,aAEV,CACE,KAAQ,OACR,KAAQ,aAEV,CACE,KAAQ,WACR,KAAQ,aAEV,CACE,KAAQ,SACR,KAAQ,SAId,CACE,KAAQ,kBACR,SAAY,CACV,CACE,KAAQ,UACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,kBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,IAGhB,KAAQ,CACN,CACE,KAAQ,OACR,KAAQ,QAId,CACE,KAAQ,cACR,SAAY,CACV,CACE,KAAQ,UACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,WACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,IAGhB,KAAQ,CACN,CACE,KAAQ,OACR,KAAQ,MAEV,CACE,KAAQ,YACR,KAAQ,CACN,MAAS,CACP,MACA,OAMV,CACE,KAAQ,sBACR,SAAY,CACV,CACE,KAAQ,UACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,WACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,IAGhB,KAAQ,CACN,CACE,KAAQ,YACR,KAAQ,CACN,MAAS,CACP,MACA,OAMV,CACE,KAAQ,qBACR,SAAY,CACV,CACE,KAAQ,UACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,IAGhB,KAAQ,KAGZ,SAAY,CACV,CACE,KAAQ,UACR,KAAQ,CACN,KAAQ,SACR,OAAU,CACR,CACE,KAAQ,QACR,KAAQ,CACN,QAAW,2BAGf,CACE,KAAQ,MACR,KAAQ,aAEV,CACE,KAAQ,QACR,KAAQ,aAEV,CACE,KAAQ,OACR,KAAQ,aAEV,CACE,KAAQ,SACR,KAAQ,aAEV,CACE,KAAQ,WACR,KAAQ,aAEV,CACE,KAAQ,SACR,KAAQ,OAEV,CACE,KAAQ,YACR,KAAQ,OAEV,CACE,KAAQ,gBACR,KAAQ,OAEV,CACE,KAAQ,eACR,KAAQ,UAKhB,CACE,KAAQ,eACR,KAAQ,CACN,KAAQ,SACR,OAAU,CACR,CACE,KAAQ,OACR,KAAQ,MAEV,CACE,KAAQ,QACR,KAAQ,OAEV,CACE,KAAQ,QACR,KAAQ,OAEV,CACE,KAAQ,YACR,KAAQ,CACN,MAAS,CACP,MACA,KAIN,CACE,KAAQ,MACR,KAAQ,OAEV,CACE,KAAQ,SACR,KAAQ,SAKhB,CACE,KAAQ,uBACR,KAAQ,CACN,KAAQ,SACR,OAAU,CACR,CACE,KAAQ,OACR,KAAQ,MAEV,CACE,KAAQ,SACR,KAAQ,aAEV,CACE,KAAQ,QACR,KAAQ,OAEV,CACE,KAAQ,YACR,KAAQ,CACN,MAAS,CACP,MACA,SAQd,MAAS,CACP,CACE,KAAQ,yBACR,KAAQ,CACN,KAAQ,SACR,OAAU,CACR,CACE,KAAQ,UACR,KAAQ,MAEV,CACE,KAAQ,SACR,KAAQ,MAEV,CACE,KAAQ,QACR,KAAQ,UAMlB,OAAU,CACR,CACE,KAAQ,IACR,KAAQ,qBACR,IAAO,uDAET,CACE,KAAQ,KACR,KAAQ,gBACR,IAAO,yCAET,CACE,KAAQ,KACR,KAAQ,mBACR,IAAO,oC,yOC79BAC,EAAe,SAACC,GAC3B,OAAKA,EAEHA,EAAQC,UAAU,EAAG,GACrB,MACAD,EAAQC,UAAUD,EAAQE,OAAS,EAAGF,EAAQE,QAJ3B,OAQVC,EAAgB,uCAAG,WAC9BC,EACAC,GAF8B,SAAAC,EAAA,sEAKtBC,IAAYC,UAAUC,mBAC1B,CACEL,EAAcM,WACdC,mBAAiBD,WACjBL,EAAiBK,YAEnBC,oBAX0B,uCAa5B,IAb4B,2CAAH,wDAgChBC,EAAkB,SAACC,GAC9B,OAAQA,GACN,IAAK,WACH,OAAO,EACT,IAAK,YACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,YACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,QACE,MAAM,IAAIC,MAAM,qBAITC,EAAc,SACzBC,GAGA,IADA,IAAMC,EAAwB,GACrBC,EAAM,EAAGA,EAAMF,EAAKd,SAAUgB,EAAK,CAC1C,IAAMC,EAASH,EAAKE,GACpBD,EAAOG,KACLC,EAAOC,KAAP,sBACKH,EAAOI,KAAKb,YADjB,YAEK,IAAIH,IAAUY,EAAOK,QAAQC,QAAQ,KAAM,IAFhD,YAGK,IAAIlB,IAAUY,EAAON,SAASY,QAAQ,KAAM,OAKrD,OAAOR,K,yDC8bT,kCAAO,IAAMnB,EAAc,CACzB,QAAW,QACX,KAAQ,SACR,aAAgB,CACd,CACE,KAAQ,mBACR,SAAY,CACV,CACE,KAAQ,YACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,iBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,IAGhB,KAAQ,CACN,CACE,KAAQ,QACR,KAAQ,CACN,QAAW,0BAGf,CACE,KAAQ,YACR,KAAQ,OAEV,CACE,KAAQ,gBACR,KAAQ,OAEV,CACE,KAAQ,sBACR,KAAQ,OAEV,CACE,KAAQ,QACR,KAAQ,OAEV,CACE,KAAQ,OACR,KAAQ,CACN,MAAS,CACP,KACA,QAMV,CACE,KAAQ,YACR,SAAY,CACV,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,WACR,OAAS,EACT,UAAY,IAGhB,KAAQ,CACN,CACE,KAAQ,YACR,KAAQ,OAEV,CACE,KAAQ,gBACR,KAAQ,OAEV,CACE,KAAQ,sBACR,KAAQ,OAEV,CACE,KAAQ,QACR,KAAQ,OAEV,CACE,KAAQ,OACR,KAAQ,CACN,MAAS,CACP,KACA,QAMV,CACE,KAAQ,kBACR,SAAY,CACV,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,iBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,IAGhB,KAAQ,CACN,CACE,KAAQ,SACR,KAAQ,SAId,CACE,KAAQ,cACR,SAAY,CACV,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,iBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,IAGhB,KAAQ,CACN,CACE,KAAQ,QACR,KAAQ,CACN,QAAW,qBAGf,CACE,KAAQ,QACR,KAAQ,CACN,IAAO,CACL,MAAS,CACP,KACA,OAKR,CACE,KAAQ,SACR,KAAQ,OAEV,CACE,KAAQ,UACR,KAAQ,SAId,CACE,KAAQ,gBACR,SAAY,CACV,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,iBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,IAGhB,KAAQ,IAEV,CACE,KAAQ,eACR,SAAY,CACV,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,SACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,iBACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,eACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,QACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,OACR,OAAS,EACT,UAAY,GAEd,CACE,KAAQ,gBACR,OAAS,EACT,UAAY,IAGhB,KAAQ,KAGZ,SAAY,CACV,CACE,KAAQ,SACR,KAAQ,CACN,KAAQ,SACR,OAAU,CACR,CACE,KAAQ,MACR,KAAQ,aAEV,CACE,KAAQ,QACR,KAAQ,aAEV,CACE,KAAQ,QACR,KAAQ,CACN,QAAW,0BAGf,CACE,KAAQ,SACR,KAAQ,aAEV,CACE,KAAQ,OACR,KAAQ,aAEV,CACE,KAAQ,iBACR,KAAQ,aAEV,CACE,KAAQ,gBACR,KAAQ,OAEV,CACE,KAAQ,gBACR,KAAQ,OAEV,CACE,KAAQ,0BACR,KAAQ,OAEV,CACE,KAAQ,sBACR,KAAQ,OAEV,CACE,KAAQ,QACR,KAAQ,OAEV,CACE,KAAQ,OACR,KAAQ,CACN,MAAS,CACP,KACA,SAOZ,CACE,KAAQ,SACR,KAAQ,CACN,KAAQ,SACR,OAAU,CACR,CACE,KAAQ,QACR,KAAQ,CACN,QAAW,qBAGf,CACE,KAAQ,OACR,KAAQ,aAEV,CACE,KAAQ,SACR,KAAQ,aAEV,CACE,KAAQ,SACR,KAAQ,OAEV,CACE,KAAQ,UACR,KAAQ,MAEV,CACE,KAAQ,YACR,KAAQ,WAMlB,MAAS,CACP,CACE,KAAQ,wBACR,KAAQ,CACN,KAAQ,SACR,OAAU,CACR,CACE,KAAQ,SACR,KAAQ,MAEV,CACE,KAAQ,SACR,KAAQ,MAEV,CACE,KAAQ,UACR,KAAQ,SAKhB,CACE,KAAQ,mBACR,KAAQ,CACN,KAAQ,SACR,OAAU,CACR,CACE,KAAQ,SACR,KAAQ,MAEV,CACE,KAAQ,UACR,KAAQ,UAMlB,OAAU,CACR,CACE,KAAQ,IACR,KAAQ,oBACR,IAAO,kDAET,CACE,KAAQ,KACR,KAAQ,WACR,IAAO,sBAET,CACE,KAAQ,KACR,KAAQ,eACR,IAAO,8B,iCChiCb,WAIM4B,EAAUC,wBAA6B,CAC3CC,QAAS,GACTC,cAAe,GACfC,oBAAqB,kBAAM,GAC3BC,yBAA0B,kBAAM,GAChCC,YAAa,SAACT,GAAD,OAAqB,IAAIU,SAAQ,gBAC9CC,iBAAkB,kBAAM,IAAID,SAAQ,gBACpCE,cAAe,kBAAM,IAAIF,SAAQ,gBACjCG,YAAa,kBAAM,IAAIH,SAAQ,gBAC/BI,cAAe,kBAAM,IAAIJ,SAAQ,gBACjCK,oBAAqB,kBAAM,IAAIL,SAAQ,kBAG1BP,O,iCClBf,WAIMA,EAAUC,wBAA6B,CAC3CY,mBAAoB,GACpBC,WAAY,kBAAM,IAAIP,SAAQ,gBAC9BQ,gBAAiB,kBAAM,IAAIR,SAAQ,gBACnCS,YAAa,kBAAM,IAAIT,SAAQ,gBAC/BU,mBAAoB,kBAAM,IAAIV,SAAQ,kBAGzBP,O,iCCZf,yDAyCekB,IAvB6C,SAAC,GAGtD,IAAD,EAFJC,EAEI,EAFJA,OACAC,EACI,EADJA,QAEMC,EAASC,cAEf,OACE,eAAC,IAAD,CAAOH,OAAQA,EAAQC,QAASA,EAAhC,UACE,cAAC,IAAD,IACA,eAAC,IAAD,CAAcG,KAAK,QAAnB,UACE,cAAC,IAAD,wCACA,cAAC,IAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,CAAQC,QAAQ,MAAMC,GAAI,EAA1B,UACE,cAAC,IAAD,CAAOC,IAAG,UAAEL,EAAOA,cAAT,aAAE,EAAeM,KAAMC,EAAE,OAAOC,EAAE,SAC5C,cAAC,IAAD,CAASC,KAAK,KAAKC,UAAW,qB,upKCFpCC,EAAY,IAAIlD,YAAUmD,EAAIC,SAAS5D,SAyoB9B6D,IAvoBkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5BC,EAAQC,cACNC,EAAeC,cAAfD,WACFlB,EAASC,cAEf,EAAgDmB,cAAhCC,EAAhB,EAAQvB,OAAoBwB,EAA5B,EAA4BA,OAAQvB,EAApC,EAAoCA,QACpC,EAAsCwB,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA4BF,qBAA5B,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA8BJ,qBAA9B,mBAAO1C,EAAP,KAAgB+C,EAAhB,KACA,EAA0CL,qBAA1C,mBAAOzC,EAAP,KAAsB+C,EAAtB,KAEMC,EAAWC,mBACf,kBACE,IAAIvE,IAAgB0D,EAAYlB,EAAe,CAC7CgC,oBAAqB,gBAEzB,CAACd,EAAYlB,IAGTiC,EAAOF,mBAAQ,WACnB,IAAM7D,EAASF,YACbkE,IAAUrB,SAASsB,KAAI,SAACC,EAAGC,GAAJ,MAAW,CAChC7D,KAAM,IAAIf,YAAU2E,EAAE5D,MACtBC,OAAQ2D,EAAE3D,OACVX,QAASD,YAAgBuE,EAAEtE,cAG/B,OAAO,IAAIwE,IAAWpE,KACrB,IAKGqE,EAAeC,sBAAW,sBAAC,8BAAAjF,EAAA,yDAC1B2D,GAAelB,EAAOyC,UADI,0EAITC,WAASC,gBAC3BzB,EACAlB,EAAOyC,WANoB,OAIvBG,EAJuB,OAQvBC,EAAkBX,IAAUrB,SAASsB,KAAI,SAACC,GAAD,OAAOA,EAAE5D,QACxDoD,EACEgB,EACGT,KAAI,SAACC,GAAD,OAAOA,EAAE5D,QACbsE,QAAO,SAACV,GAAD,OAAOS,EAAgBE,SAASX,MACvCD,KAAI,SAACC,GACJ,IAAMY,EAAed,IAAUrB,SAASiC,QACtC,SAACG,GAAD,OAAOA,EAAEzE,OAAS4D,KAClB,GACF,MAAO,CACL5D,KAAM,IAAIf,YAAU2E,GACpBvB,SAAUmC,EAAaE,QACvBzE,OAAQuE,EAAavE,OACrBX,QAASkF,EAAalF,aArBD,kDA0B7BqF,QAAQC,IAAI,+BAAZ,MA1B6B,0DA4B9B,CAACpD,EAAOyC,UAAWvB,IAEtBmC,qBAAU,WACHxE,GAAS0D,MACb,CAACA,EAAc1D,IAKlB,IAAMyE,EAAqBd,sBAAW,sBAAC,kCAAAjF,EAAA,yDAChC2D,GAAelB,EAAOyC,UADU,wDAG/Bc,EAAU,IAAI/F,IAAeoD,EAAmBD,EAAWmB,GAH5B,kBAMdyB,EAAQC,QAAQpF,OAAOqF,IAAI,CAC9C,CACEC,OAAQ,CACNC,OAAQ,GACRC,MAAK,UAAE5D,EAAOyC,iBAAT,aAAE,EAAkBoB,eAVI,OAM7BC,EAN6B,OAc7BjB,EAAkBX,IAAUrB,SAASsB,KAAI,SAACC,GAAD,OAAOA,EAAE5D,QACxDqD,EACEiC,EACG3B,KAAI,SAACC,GAAD,OAAOA,EAAEoB,QAAQhF,KAAKqF,cAC1Bf,QAAO,SAACV,GAAD,OAAOS,EAAgBE,SAASX,MACvCD,KAAI,SAACC,GACJ,IAAMY,EAAed,IAAUrB,SAASiC,QACtC,SAACG,GAAD,OAAOA,EAAEzE,OAAS4D,KAClB,GACF,MAAO,CACL5D,KAAM,IAAIf,YAAU2E,GACpBvB,SAAUmC,EAAaE,QACvBzE,OAAQuE,EAAavE,OACrBX,QAASkF,EAAalF,aA3BK,kDAgCnCqF,QAAQC,IAAI,+BAAZ,MAhCmC,0DAkCpC,CAACtB,EAAU9B,EAAOyC,UAAWvB,IAEhCmC,qBAAU,WACHvE,GAAewE,MACnB,CAACA,EAAoBxE,IAKxB,IAAMiF,EAAcvB,sBAAW,sBAAC,oCAAAjF,EAAA,6DACxBgG,EAAU,IAAIS,IAAuBC,IAAWtD,EAAWmB,GADnC,SAGArE,YAAUC,mBACtC,CAACY,EAAOC,KAAK,UAAW2D,IAAUgC,UAAUvG,YAC5CgD,GAL4B,0CAGvBwD,EAHuB,cAQFZ,EAAQC,QAAQ9B,OAAO0C,MAAMD,GAR3B,OAQxBE,EARwB,OAU9B1C,EAAU,CACR2C,IAAKD,EAAcC,IACnBC,MAAOF,EAAcE,MACrBC,OAAQH,EAAcG,OACtBhG,KAAM6F,EAAc7F,KACpBiG,eAAgBJ,EAAcI,eAC9BC,cAAeL,EAAcK,cAC7BC,cAAeN,EAAcM,cAC7BC,wBAAyBP,EAAcO,wBACvCC,oBAAqBR,EAAcQ,oBACnCC,KAAMT,EAAcS,OApBQ,4CAsB7B,CAAChD,IAEJuB,qBAAU,WACRU,MACC,CAACA,IAEJ,IAAMhF,EAAsByD,uBAC1B,SAACpE,GACC,GAAKsD,EAEL,OACItD,EAAOK,OAASiD,EAAOiD,cAAcI,YACpCrD,EAAOkD,wBAAwBG,WAAa,KAC7C,KACF,MAGJ,CAACrD,IAGG1C,EAA2BwD,uBAC/B,SAACpE,EAAgB4G,GACf,IAAMC,EAAmBlG,EAAoBX,IAAW,EACxD,OAAKsD,IAAWtD,EAAO8G,WAAaF,EAAM5G,EAAO8G,UAAkB,GAElDF,EAAIG,UAAY/G,EAAO8G,UAAUC,WAAa,IACpCzD,EAAOmD,oBAC/BO,IAAI,IAAI5H,IAAU,SAClBuH,WAG+BE,EAChCvD,EAAOgD,cAAcK,WADrB,SAEA,GAAM,KAGV,CAACrD,EAAQ3C,IAMLE,GAAcuD,sBAAW,uCAC7B,WAAOhE,GAAP,yBAAAjB,EAAA,yDACO2D,EADP,wDAGQqC,EAAU,IAAI/F,IAClBoD,EACAD,EACAmB,GANJ,SASgCrE,YAAUC,mBACtC,CAACY,EAAOC,KAAK,UAAWC,EAAKb,YAC7BgD,GAXJ,0CASS0E,EATT,KAcQrC,EAAed,IAAUrB,SAASiC,QACtC,SAACV,GAAD,OAAOA,EAAE5D,OAASA,EAAKqF,cACvB,GAhBJ,mBAkBgCN,EAAQC,QAAQpF,OAAOgG,MAAMiB,GAlB7D,eAkBUC,EAlBV,yBAoBW,CACL9G,KAAMA,EACNqC,SAAUmC,EAAaE,QACvBzE,OAAQ6G,EAAc7G,OAAOoF,WAC7B/F,QAASwH,EAAcxH,QACvBoH,UAAW,IAAIK,KAA0C,IAArCD,EAAcJ,UAAUH,cAzBlD,2DA4BW,CACLvG,KAAMA,EACNqC,SAAUmC,EAAaE,QACvBzE,OAAQuE,EAAavE,OACrBX,QAASkF,EAAalF,UAhC5B,0DAD6B,sDAqC7B,CAACoD,EAAYY,IAMT3C,GAAmBqD,sBAAW,sBAAC,8BAAAjF,EAAA,yDAC9BmE,GAAWR,GAAelB,EAAOyC,UADH,0EAID+C,QAAMC,0BACpCC,8BACA9H,mBACA8D,EAAOlD,KACPwB,EAAOyC,WARwB,cAI3BkD,EAJ2B,OAU3BC,EAAQ,IAAIJ,QAChBtE,EACAQ,EAAOlD,KACPZ,mBACAoC,GAd+B,KAgBjCyB,EAhBiC,UAgBZmE,EAAMC,eAAeF,GAhBT,qFAkBjCxC,QAAQC,IAAI,2BAlBqB,0DAoBlC,CAAClC,EAAYQ,EAAQ1B,IAExBqD,qBAAU,WACRlE,OACC,CAACA,KAEJ,IAAMC,GAAgBoD,sBAAW,sBAAC,4BAAAjF,EAAA,yDAC3ByC,EAAOyC,WAAczC,EAAO8F,iBAAoBpE,EADrB,wDAGhCJ,IAHgC,SAKElE,YAChC4C,EAAOyC,UACPf,EAAOlD,MAPuB,cAK1BuH,EAL0B,yBAWxB/F,EAAOgG,iBACX,IAAIxI,IAAYyI,aAAcC,IAC5BV,QAAMW,6BACJvI,mBACA8D,EAAOlD,KACPuH,EACA/F,EAAOyC,YAGXvB,GApB4B,OAsB9BF,EAAM,CACJoF,MAAO,8BACPC,YAAY,kCACZC,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEdrH,KA7B8B,kDA+B9BgE,QAAQC,IAAR,MAEApC,EAAM,CACJoF,MAAO,0BACPC,YAAY,+BACZC,OAAQ,QACRC,SAAU,IACVC,YAAY,IAtCgB,yBAyC9BzG,IAzC8B,6EA2C/B,CAAC2B,EAAQR,EAAYF,EAAOhB,EAAQD,EAASuB,EAAQnC,KAElDE,GAAcmD,sBAAW,uCAC7B,WAAOpE,GAAP,2CAAAb,EAAA,yDACOyC,GAAWA,EAAOyC,WAAcf,EADvC,wDAGEJ,IAEMiC,EAAU,IAAIS,IAClBC,IACAtD,EACAmB,GARJ,SAUgCrE,YAAUC,mBACtC,CAACY,EAAOC,KAAK,SAAU,QAASmD,EAAO4C,IAAI3G,YAC3C4F,EAAQkD,WAZZ,0CAUStC,EAVT,eAc4C1G,YAAUC,mBAClD,CAACY,EAAOC,KAAK,SAAU,QAASH,EAAOI,KAAKb,YAC5C4F,EAAQkD,WAhBZ,2CAcSpB,EAdT,KAcwBqB,EAdxB,eAkBuCjJ,YAAUC,mBAC7C,CAACY,EAAOC,KAAK,UAAW,QAASH,EAAOI,KAAKb,YAC7C4F,EAAQkD,WApBZ,2CAkBSE,EAlBT,KAkBkBC,EAlBlB,KAuBQC,EAAQ,CACZzI,OAAQsI,EACRC,QAASC,GAzBb,UA4B8BpB,QAAMC,0BAChCC,8BACA9H,mBACAQ,EAAOI,KACPwB,EAAOyC,WAhCX,eA4BQqE,EA5BR,OAkCQC,EAAc7E,IAAUrB,SAASmG,WACrC,SAAC5E,GAAD,OAAOA,EAAE5D,OAASJ,EAAOI,KAAKqF,cAnClC,oBAuCUN,EAAQ0D,IAAI5H,YAChBwH,EACA5E,EAAKiF,cAAcH,GACnB,IAAIvJ,IAAUY,EAAOK,QACrB,IAAIjB,IAAUY,EAAON,SACrB,CACEqJ,SAAU,CACRzF,OAAQyC,EACRK,OAAQ9C,EAAO8C,OACfpG,OAAQiH,EACR+B,OAAQpH,EAAOyC,UACfjE,KAAMJ,EAAOI,KACbsI,cAAeA,EACfO,eAAgBV,EAChBW,aAAc1J,mBACd2J,MAAOC,sBACPC,KAAMC,qBACNC,cAAeC,gBAAcnB,aAxDvC,QA6DIzF,EAAM,CACJoF,MAAO,qBACPC,YAAY,wBAAD,OAA0BjI,EAAOyC,SAASgH,KAA1C,KACXvB,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEdjE,IACAe,IArEJ,mDAuEIH,QAAQC,IAAI,wBAAZ,MAEApC,EAAM,CACJoF,MAAO,iBACPC,YAAY,GAAD,aACXC,OAAQ,QACRC,SAAU,IACVC,YAAY,IA9ElB,QAkFEzG,IAlFF,2DAD6B,sDAqF7B,CACE2B,EACAI,EACAG,EACAjB,EACAhB,EACAD,EACAuB,EACAiB,EACAe,IAIEhE,GAAgBkD,sBAAW,uCAC/B,WAAOpE,GAAP,6CAAAb,EAAA,yDACOyC,GAAWA,EAAOyC,WAAcf,EADvC,wDAGEJ,IAEMiC,EAAU,IAAIS,IAClBC,IACAtD,EACAmB,GARJ,SAUgCrE,YAAUC,mBACtC,CAACY,EAAOC,KAAK,SAAU,QAASmD,EAAO4C,IAAI3G,YAC3C4F,EAAQkD,WAZZ,0CAUStC,EAVT,eAciC1G,YAAUC,mBACvC,CACEY,EAAOC,KAAK,UAAW,QACvBmD,EAAO4C,IAAI3G,WACX+D,EAAOlD,KAAKb,YAEd4F,EAAQkD,WApBZ,2CAcShC,EAdT,eAsBgChH,YAAUC,mBACtC,CAACY,EAAOC,KAAK,SAAU,QAASH,EAAOI,KAAKb,YAC5C4F,EAAQkD,WAxBZ,2CAsBSpB,EAtBT,eA0B0B5H,YAAUC,mBAChC,CAACY,EAAOC,KAAK,UAAW,QAASH,EAAOI,KAAKb,YAC7C4F,EAAQkD,WA5BZ,2CA0BSE,EA1BT,eA+BqCnB,QAAMC,0BACvCC,8BACA9H,mBACA8D,EAAOlD,KACPwB,EAAOyC,WAnCX,eA+BQqF,EA/BR,iBAqCoCtC,QAAMC,0BACtCC,8BACA9H,mBACAQ,EAAOI,KACPwB,EAAOyC,WAzCX,eAqCQsF,EArCR,kBA8CUC,EAAexG,EACjB,GACA,CACEgE,QAAMyC,wCACJvC,8BACA9H,mBACA8D,EAAOlD,KACPsJ,EACA9H,EAAOyC,UACPzC,EAAOyC,aAKFpE,KACXkF,EAAQ2E,YAAYC,aAAa,CAC/BhB,SAAU,CACRzF,OAAQyC,EACRK,OAAQ9C,EAAO8C,OACfpG,OAAQiH,EACR+B,OAAQpH,EAAOyC,UACfjE,KAAMkD,EAAOlD,KACbsI,cAAegB,EACfrD,eAAgBA,EAChB6C,aAAc1J,mBACd2J,MAAOC,sBACPC,KAAMC,qBACNC,cAAeC,gBAAcnB,cAzEvC,UA6EUlD,EAAQ0D,IAAI3H,cAAc,CAC9B6H,SAAU,CACRzF,OAAQyC,EACRK,OAAQ9C,EAAO8C,OACfpG,OAAQiH,EACR+B,OAAQpH,EAAOyC,UACfjE,KAAMJ,EAAOI,KACbsI,cAAeiB,EACfV,eAAgBV,EAChBW,aAAc1J,oBAEhBoK,aAAcA,IAxFpB,QA2FIhH,EAAM,CACJoF,MAAO,uBACPC,YAAY,0BAAD,OAA4BjI,EAAOyC,SAASgH,KAA5C,KACXvB,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEdjE,IACAe,IACAnE,KApGJ,mDAsGIgE,QAAQC,IAAI,0BAAZ,MAEApC,EAAM,CACJoF,MAAO,mBACPC,YAAY,GAAD,aACXC,OAAQ,QACRC,SAAU,IACVC,YAAY,IA7GlB,QAiHEzG,IAjHF,2DAD+B,sDAoH/B,CACE2B,EACAI,EACAd,EACAQ,EACAxB,EACAD,EACAuB,EACAiB,EACAe,EACAnE,KAIEI,GAAsBiD,sBAAW,uCACrC,WAAOpE,GAAP,qCAAAb,EAAA,yDACOyC,GAAWA,EAAOyC,WAAcf,EADvC,wDAGEJ,IAEMiC,EAAU,IAAIS,IAClBC,IACAtD,EACAmB,GARJ,SAUgCrE,YAAUC,mBACtC,CAACY,EAAOC,KAAK,SAAU,QAASmD,EAAO4C,IAAI3G,YAC3C4F,EAAQkD,WAZZ,0CAUStC,EAVT,eAciC1G,YAAUC,mBACvC,CACEY,EAAOC,KAAK,UAAW,QACvBmD,EAAO4C,IAAI3G,WACX+D,EAAOlD,KAAKb,YAEd4F,EAAQkD,WApBZ,2CAcShC,EAdT,eAsBgChH,YAAUC,mBACtC,CAACY,EAAOC,KAAK,SAAU,QAASH,EAAOI,KAAKb,YAC5C4F,EAAQkD,WAxBZ,2CAsBSpB,EAtBT,eA2B8BG,QAAMC,0BAChCC,8BACA9H,mBACA8D,EAAOlD,KACPwB,EAAOyC,WA/BX,eA2BQqE,EA3BR,iBAoCUkB,EAAexG,EACjB,GACA,CACEgE,QAAMyC,wCACJvC,8BACA9H,mBACA8D,EAAOlD,KACPsI,EACA9G,EAAOyC,UACPzC,EAAOyC,YA7CnB,UAiDUc,EAAQ0D,IAAIkB,aAAa,CAC7BhB,SAAU,CACRzF,OAAQyC,EACRK,OAAQ9C,EAAO8C,OACfpG,OAAQiH,EACR+B,OAAQpH,EAAOyC,UACfjE,KAAMkD,EAAOlD,KACbsI,cAAeA,EACfrC,eAAgBA,EAChB6C,aAAc1J,mBACd2J,MAAOC,sBACPC,KAAMC,qBACNC,cAAeC,gBAAcnB,WAE/BuB,aAAcA,IA/DpB,QAkEIhH,EAAM,CACJoF,MAAO,sBACPC,YAAY,6CAAD,OAA+CjI,EAAOyC,SAASgH,KAA/D,KACXvB,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEdjE,IACAe,IACAnE,KA3EJ,mDA6EIgE,QAAQC,IAAI,0BAAZ,MAEApC,EAAM,CACJoF,MAAO,kCACPC,YAAY,GAAD,aACXC,OAAQ,QACRC,SAAU,IACVC,YAAY,IApFlB,QAwFEzG,IAxFF,2DADqC,sDA2FrC,CACE2B,EACAI,EACAd,EACAQ,EACAxB,EACAD,EACAuB,EACAiB,EACAe,EACAnE,KAIJ,OACE,eAAC,IAAQiJ,SAAT,CACEC,MAAO,CACL3G,SACA7C,QAASA,GAAW,GACpBC,cAAeA,GAAiB,GAChC0C,cACAzC,sBACAC,2BACAC,eACAE,oBACAC,iBACAC,eACAC,iBACAC,wBAbJ,UAgBGwB,EACD,cAAC,IAAD,CAAmBjB,OAAQuB,EAAYtB,QAASA,U,uOC3oBhDY,EAAY,IAAIlD,YAAUmD,EAAIC,SAAS5D,SAsgB9BqL,IApgBmB,SAAC,GAAkB,IAAhBvH,EAAe,EAAfA,SAC7BC,EAAQC,cACNC,EAAeC,cAAfD,WACFlB,EAASC,cACf,EAAkDsI,cAA1C7G,EAAR,EAAQA,OAAQF,EAAhB,EAAgBA,YAAarC,EAA7B,EAA6BA,iBAE7B,EAAgDiC,cAAhCC,EAAhB,EAAQvB,OAAoBwB,EAA5B,EAA4BA,OAAQvB,EAApC,EAAoCA,QACpC,EAA8BwB,qBAA9B,mBAAOiH,EAAP,KAAgBC,EAAhB,KACA,EAAwClH,qBAAxC,mBAAOmH,EAAP,KAAqBC,EAArB,KACA,EAA8BpH,qBAA9B,mBAAOqH,EAAP,KAAgBC,EAAhB,KACA,EAAoDtH,mBAClD,IADF,mBAAO/B,EAAP,KAA2BsJ,EAA3B,KAIMhH,EAAWC,mBACf,kBACE,IAAIvE,IAAgB0D,EAAYlB,EAAe,CAC7CgC,oBAAqB,gBAEzB,CAACd,EAAYlB,IAMT+I,EAAevG,sBAAW,sBAAC,oCAAAjF,EAAA,6DACzBgG,EAAU,IAAIS,IAClBgF,IACArI,EACAmB,GAJ6B,SAOArE,YAAUC,mBACvC,CAACY,EAAOC,KAAK,WAAY2D,IAAU+G,WAAWtL,YAC9CgD,GAT6B,0CAOxBuI,EAPwB,cAYF3F,EAAQC,QAAQgF,QAAQpE,MAAM8E,GAZ5B,OAYzBC,EAZyB,OAc/BV,EAAW,CACTnE,IAAK6E,EAAe7E,IACpBC,MAAO4E,EAAe5E,MACtBC,OAAQ2E,EAAe3E,OACvBhG,KAAM2K,EAAe3K,KACrB4K,SAAUD,EAAeC,SACzBC,OAAQF,EAAeE,OACvBC,UAAWH,EAAeG,UAC1BC,cAAeJ,EAAeI,cAC9BC,aAAcL,EAAeK,eAvBA,4CAyB9B,CAAC1H,IAEJuB,qBAAU,WACR0F,MACC,CAACA,IAKJ,IAAMtJ,EAAa+C,sBAAW,uCAC5B,WAAOiH,GAAP,uBAAAlM,EAAA,yDACOiL,EADP,wDAGQjF,EAAU,IAAIS,IAClBgF,IACArI,EACAmB,GANJ,SASwBrE,YAAUC,mBAC9B,CACEY,EAAOC,KAAK,SACZiK,EAAQlE,IAAI3G,WACZ,IAAI+L,IAAGD,GAAOE,YAAYrL,EAAQ,KAAM,IAE1CqC,GAfJ,0CASSiJ,EATT,eAkB6BrG,EAAQC,QAAQqG,aAAazF,MAAMwF,GAlBhE,eAkBQE,EAlBR,yBAoBS,CACLL,MAAOK,EAAaL,MACpBM,MAAOD,EAAaC,MACpBC,UAAWF,EAAaE,UACxBC,IAAKH,EAAaG,IAClBC,OAAQJ,EAAaI,SAzBzB,4CAD4B,sDA6B5B,CAACpI,EAAU0G,IAMP2B,EAAoB3H,sBAAW,sBAAC,sBAAAjF,EAAA,yDAC/BiL,EAD+B,6DAEpCG,EAFoC,SAEdlJ,EAAW+I,EAAQc,UAAUvE,YAFf,6EAGnC,CAACyD,EAAS/I,IAEb4D,qBAAU,WACR8G,MACC,CAACA,IAKJ,IAAMC,EAA0B5H,sBAAW,sBAAC,8BAAAjF,EAAA,yDACrCyC,GAAWA,EAAOyC,UADmB,wDAGpCc,EAAU,IAAIS,IAClBgF,IACArI,EACAmB,GANwC,kBAWXyB,EAAQC,QAAQ6G,qBAAqB5G,MAX1B,OAWlC6G,EAXkC,OAYxCxB,EACEwB,EACGnI,KAAI,SAACC,GAAD,MAAQ,CACXmI,OAAQnI,EAAEoB,QAAQ+G,OAClBd,MAAOrH,EAAEoB,QAAQiG,MACjBO,UAAW5H,EAAEoB,QAAQwG,cAEtBlH,QAAO,SAACV,GAAD,aAAOA,EAAEmI,OAAO1G,cAAT,UAAwB7D,EAAOyC,iBAA/B,aAAwB,EAAkBoB,eACxD2G,MAAK,SAACjN,EAAGkN,GAAJ,OAAUlN,EAAEkM,MAAM1E,WAAa0F,EAAEhB,MAAM1E,eApBT,kDAuBxC5B,QAAQC,IAAI,+BAAZ,MAvBwC,0DAyBzC,CAACtB,EAAU9B,IAEdqD,qBAAU,WACR+G,MACC,CAACA,IAKJ,IAAMM,EAAelI,sBAAW,sBAAC,sBAAAjF,EAAA,yDAC1BiL,EAD0B,6DAE/BK,EAF+B,SAGtB/G,EAASZ,WAAWyJ,WAAWnC,EAAQhE,QAHjB,iCAG4B,GAAM,GAHlC,yEAK9B,CAACgE,EAAS1G,EAAU+G,IAEvBxF,qBAAU,WACRqH,MACC,CAACA,IAMJ,IAAMhL,GAAkB8C,sBAAW,sBAAC,0EAAAjF,EAAA,yDAC7ByC,GAAWA,EAAOyC,WAAc+F,EADH,wDAGlClH,IAEMiC,EAAU,IAAIS,IAClBgF,IACArI,EACAmB,GARgC,SAUHrE,YAAUC,mBACvC,CAACY,EAAOC,KAAK,UAAW,QAASiK,EAAQlE,IAAI3G,YAC7C4F,EAAQkD,WAZwB,0CAU3ByC,EAV2B,eAcXzL,YAAUC,mBAC/B,CAACY,EAAOC,KAAK,SAAU,QAASiK,EAAQlE,IAAI3G,YAC5C4F,EAAQkD,WAhBwB,oCAc3BjC,EAd2B,KAoB5BoG,EAAeC,KAAKC,IACxB,GACAD,KAAKE,OACFF,KAAKjB,MAAMrE,KAAKyF,MAAQ,KAAQxC,EAAQe,cAAcxE,YACrDyD,EAAQa,OAAOtE,aAIrB5B,QAAQC,IAAR,UACKyH,KAAKE,OACLF,KAAKjB,MAAMrE,KAAKyF,MAAQ,KAAQxC,EAAQe,cAAcxE,YACrDyD,EAAQa,OAAOtE,YAHrB,mBAOMiD,EAAe,GACZ3F,EAAI,EApCqB,aAoClBA,EAAIuI,EAAe,GApCD,kCAqCCnN,YAAUC,mBACzC,CACEY,EAAOC,KAAK,QAAS,QACrBiK,EAAQlE,IAAI3G,WACZ6K,EAAQc,UAAUpD,IAAI,IAAIwD,IAAGrH,EAAI,IAAIsH,YAAYrL,EAAQ,KAAM,IAEjEqC,GA3C8B,2CAqCzBiJ,EArCyB,KAqClBqB,EArCkB,eA6CFxN,YAAUC,mBACtC,CACEY,EAAOC,KAAK,QAAS,QACrBiK,EAAQlE,IAAI3G,WACZ6K,EAAQc,UAAUpD,IAAI,IAAIwD,IAAGrH,IAAIsH,YAAYrL,EAAQ,KAAM,IAE7DqC,GAnD8B,oCA6CzBuK,EA7CyB,KAqDhClD,EAAa3J,KACXkF,EAAQ2E,YAAYxI,gBAAgBuL,EAAW,CAC7C9D,SAAU,CACRqB,QAASU,EACT1E,OAAQA,EACRqF,aAAcD,EACduB,gBAAiBD,EACjBE,MAAOpL,EAAOyC,UACd8E,MAAOC,sBACPC,KAAMC,qBACNC,cAAeC,gBAAcnB,cA/DH,QAoCIpE,IApCJ,mDAsEC5E,YAAUC,mBACzC,CACEY,EAAOC,KAAK,QAAS,QACrBiK,EAAQlE,IAAI3G,WACZ6K,EAAQc,UACLpD,IAAI,IAAIwD,IAAGkB,IACXjB,YAAYrL,EAAQ,KAAM,IAE/BqC,GA9E8B,2CAsEzBiJ,EAtEyB,KAsElBqB,EAtEkB,eAgFFxN,YAAUC,mBACtC,CACEY,EAAOC,KAAK,QAAS,QACrBiK,EAAQlE,IAAI3G,WACZ6K,EAAQc,UACLpD,IAAI,IAAIwD,IAAGkB,EAAe,IAC1BjB,YAAYrL,EAAQ,KAAM,IAE/BqC,GAxF8B,2CAgFzBuK,EAhFyB,eA2F1B3H,EAAQ0D,IAAIvH,gBAAgBuL,EAAW,CAC3C9D,SAAU,CACRqB,QAASU,EACT1E,OAAQA,EACRqF,aAAcD,EACduB,gBAAiBD,EACjBE,MAAOpL,EAAOyC,UACd8E,MAAOC,sBACPC,KAAMC,qBACNC,cAAeC,gBAAcnB,WAE/BuB,aAAcA,IAtGgB,QAyGhChH,EAAM,CACJoF,MAAO,2BACPC,YAAY,+BAAD,OAAiCmC,EAAQc,UACjDpD,IAAI,IAAIwD,IAAGkB,IACX7F,YACHuB,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEduC,IACAqB,IAnHgC,mDAqHhCjH,QAAQC,IAAI,mBAAZ,MAEApC,EAAM,CACJoF,MAAO,8BACPC,YAAY,GAAD,aACXC,OAAQ,QACRC,SAAU,IACVC,YAAY,IA5HkB,QAgIlCzG,IAhIkC,2DAiIjC,CACDyI,EACA1G,EACAd,EACAhB,EACAD,EACAuB,EACAyH,EACAqB,IAGIzK,GAAc6C,sBAAW,uCAC7B,WAAOwH,GAAP,mCAAAzM,EAAA,yDACOyC,GAAWA,EAAOyC,WAAc+F,GAAY9G,GAAWF,EAD9D,wDAIEF,IAEMiC,EAAU,IAAIS,IAClBgF,IACArI,EACAmB,GATJ,SAWiCrE,YAAUC,mBACvC,CAACY,EAAOC,KAAK,UAAW,QAASiK,EAAQlE,IAAI3G,YAC7C4F,EAAQkD,WAbZ,0CAWSyC,EAXT,eAgBwBzL,YAAUC,mBAC9B,CACEY,EAAOC,KAAK,QAAS,QACrBiK,EAAQlE,IAAI3G,WACZ6K,EAAQc,UAAUK,YAAYrL,EAAQ,KAAM,IAE9CqC,GAtBJ,2CAgBSiJ,EAhBT,eAyBUnM,YAAUC,mBACd,CACEY,EAAOC,KAAK,gBAAiB,QAC7BiK,EAAQlE,IAAI3G,WACZ6K,EAAQc,UAAUK,YAAYrL,EAAQ,KAAM,GAC5C0B,EAAOyC,UAAU9E,YAEnBgD,GAhCN,2CAwBS0K,EAxBT,KAwBwBC,EAxBxB,mCAsCY/H,EAAQC,QAAQ6G,qBAAqBjG,MAAMiH,GAtCvD,yBAyCY9H,EAAQ0D,IAAIsE,oBAAoBvB,EAAW,CAC/C7C,SAAU,CACRqB,QAASU,EACTW,aAAcD,EACdyB,cAAeA,EACfd,OAAQvK,EAAOyC,UACf+I,cAAehK,EAAYvE,QAC3BmM,SAAU1H,EAAO+C,eACjB6C,aAAc1J,mBACd2J,MAAOC,sBACPC,KAAMC,qBACNC,cAAeC,gBAAcnB,aApDvC,4EAwDYlD,EAAQ0D,IAAItH,YAAY2L,EAAmBtB,EAAW,CAC1D7C,SAAU,CACRqB,QAASU,EACTW,aAAcD,EACdyB,cAAeA,EACfd,OAAQvK,EAAOyC,UACf+I,cAAehK,EAAYvE,QAC3BmM,SAAU1H,EAAO+C,eACjB6C,aAAc1J,mBACd2J,MAAOC,sBACPC,KAAMC,qBACNC,cAAeC,gBAAcnB,aAnEvC,QAuEIzF,EAAM,CACJoF,MAAO,wBACPC,YAAY,2BAAD,OACTmC,EAAQc,UAAUvE,WAAa,GAEjCuB,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEduC,IACA5J,IACAiL,IAlFJ,mDAoFIjH,QAAQC,IAAI,uBAAZ,MAEApC,EAAM,CACJoF,MAAO,uBACPC,YAAY,GAAD,aACXC,OAAQ,QACRC,SAAU,IACVC,YAAY,IA3FlB,QA+FEzG,IA/FF,mEAD6B,sDAkG7B,CACEyI,EACA1G,EACAJ,EACAF,EACAR,EACAhB,EACAD,EACAuB,EACAyH,EACA5J,EACAiL,IAIExK,GAAqB4C,sBAAW,uCACpC,WAAOiH,GAAP,uCAAAlM,EAAA,yDACOyC,GAAWA,EAAOyC,WAAc+F,GAAY9G,GAAWF,EAD9D,wDAIEF,IAEMiC,EAAU,IAAIS,IAClBgF,IACArI,EACAmB,GATJ,SAWiCrE,YAAUC,mBACvC,CAACY,EAAOC,KAAK,UAAW,QAASiK,EAAQlE,IAAI3G,YAC7C4F,EAAQkD,WAbZ,0CAWSyC,EAXT,eAeyBzL,YAAUC,mBAC/B,CAACY,EAAOC,KAAK,SAAU,QAASiK,EAAQlE,IAAI3G,YAC5C4F,EAAQkD,WAjBZ,2CAeSjC,EAfT,eAmBwB/G,YAAUC,mBAC9B,CACEY,EAAOC,KAAK,QAAS,QACrBiK,EAAQlE,IAAI3G,WACZ,IAAI+L,IAAGD,GAAOE,YAAYrL,EAAQ,KAAM,IAE1CqC,GAzBJ,2CAmBSiJ,EAnBT,eA2BgCnM,YAAUC,mBACtC,CACEY,EAAOC,KAAK,gBAAiB,QAC7BiK,EAAQlE,IAAI3G,WACZ,IAAI+L,IAAGD,GAAOE,YAAYrL,EAAQ,KAAM,GACxC0B,EAAOyC,UAAU9E,YAEnBgD,GAlCJ,2CA2BS0K,EA3BT,yBAsCU9H,EAAQ0D,IAAIrH,mBAAmB,CACnCuH,SAAU,CACRqB,QAASU,EACT1E,OAAQA,EACRqF,aAAcD,EACdyB,cAAeA,EACfd,OAAQvK,EAAOyC,UACf8E,MAAOC,sBACPC,KAAMC,qBACNC,cAAeC,gBAAcnB,aA/CrC,QAmDIzF,EAAM,CACJoF,MAAO,wBACPC,YAAY,+BAAD,OAAiCoD,GAC5CnD,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEduC,IACAqB,IA3DJ,mDA6DIjH,QAAQC,IAAI,kBAAZ,MAEApC,EAAM,CACJoF,MAAO,kBACPC,YAAY,GAAD,aACXC,OAAQ,QACRC,SAAU,IACVC,YAAY,IApElB,QAwEEzG,IAxEF,2DADoC,sDA2EpC,CACEyI,EACA1G,EACAJ,EACAF,EACAR,EACAhB,EACAD,EACAuB,EACAyH,EACAqB,IAIJ,OACE,eAAC,IAAQhC,SAAT,CACEC,MAAO,CACLG,UACAE,eACAE,UACApJ,qBACAC,aACAC,mBACAC,eACAC,uBATJ,UAYGmB,EACD,cAAC,IAAD,CAAmBjB,OAAQuB,EAAYtB,QAASA,U,+24nECvhBzCuC,EAAb,WAIE,WAAYmJ,GAAuB,yBAHnCA,WAGkC,OAFlCC,YAEkC,EAChCC,KAAKF,MAAQA,EAAMG,QACnBD,KAAKD,OAAS,GAGd,IADA,IAAIG,EAASF,KAAKF,MAAMtJ,IAAIG,EAAWwJ,UAChCD,EAAO1O,OAAS,IACrBwO,KAAKD,OAAOrN,KAAKwN,EAAOD,SACF,IAAlBC,EAAO1O,SACX0O,EAASA,EAAOE,QAAO,SAACC,EAAKC,EAAK9N,EAAK+N,GACrC,GAAI/N,EAAM,IAAM,EAAG,CACjB,IAAMgO,EAAMD,EAAI/N,EAAM,GACtB6N,EAAI3N,KAAKiE,EAAW8J,aAAaH,EAAKE,IAExC,OAAOH,IACNK,SAlBT,2CAgCE,WACE,OAAOV,KAAKD,OAAOC,KAAKD,OAAOvO,OAAS,GAAG,KAjC/C,0BAoCE,WACE,IADuB,EACnB+O,EAAM,GADa,cAETP,KAAKW,UAAUC,UAFN,IAEvB,2BAAuC,CAAC,IAA/BC,EAA8B,QACrCN,EAAI7N,KAAKmO,IAHY,8BAKvB,OAAON,IAzCX,sBA4CE,SAAS/N,GACP,OAAOwN,KAAKD,OAAOK,QAAO,SAACU,EAAOC,GAChC,IAAMC,EAAgB,EAANxO,EAOhB,OANIwO,EAAUD,EAAMvP,QAClBsP,EAAMpO,KAAKqO,EAAMC,IAGnBxO,EAAM0M,KAAKE,MAAM5M,EAAM,GAEhBsO,IACN,MAtDP,2BAyDE,SAAchD,GACZ,IAD2B,EACvBmD,EAAM,GADiB,cAGbjB,KAAKkB,SAASpD,IAHD,IAG3B,2BAAoC,CAAC,IAAD,EAA3BrH,EAA2B,QAC9B8J,EAAgB,GADc,cAEpB9J,EAAEmK,UAFkB,IAElC,2BAA0B,CAAC,IAAlBC,EAAiB,QACxBN,EAAI7N,KAAKmO,IAHuB,8BAKlCI,EAAIvO,KAAK6N,IARgB,8BAU3B,OAAOU,IAnEX,wBAsEE,WACE,OAAOjB,KAAKW,UAAUzI,SAAS,SAvEnC,yBA0EE,SAAY1F,GACV,OAAOwN,KAAKkB,SAAS1O,GAAKgE,KAAI,SAAC2K,GAAD,OAAQA,EAAGjJ,SAAS,YA3EtD,yBA8EE,SAAY1F,EAAasO,EAAiB3H,GACxC,IAD+D,EAC3DiI,EAAOzK,EAAWwJ,SAASH,KAAKF,MAAMtN,IADqB,cAE5CsO,GAF4C,IAE/D,2BAA0B,CAAC,IAAhBO,EAAe,QACxBD,EAAOzK,EAAW8J,aAAaW,EAAMC,IAHwB,8BAM/D,OAAOD,EAAKE,OAAOnI,MApFvB,uBAsBE,SAAgB7G,GACd,OAAOK,EAAOC,KAAK2O,aAAWC,OAAX,CAAmB,GAAnB,mBAA4BlP,QAvBnD,0BA0BE,SAAoBmP,EAAeC,GACjC,IAAKA,EAAQ,OAAOD,EACpB,MAAmB,CAACA,EAAOC,GAAQ7C,KAAKlM,EAAOgP,SAA/C,mBAAOC,EAAP,KAAYC,EAAZ,KACA,OAAOlP,EAAOC,KAAK2O,aAAWC,OAAX,CAAmB,GAAnB,mBAA4BI,GAA5B,YAAoCC,QA7B3D,yBAuFE,SAAmBC,EAAchB,EAAiB3H,GAChD,IADuE,EACnEiI,EAAOzK,EAAWwJ,SAAS2B,GADwC,cAEpDhB,GAFoD,IAEvE,2BAA0B,CAAC,IAAhBO,EAAe,QACxBD,EAAOzK,EAAW8J,aAAaW,EAAMC,IAHgC,8BAMvE,OAAOD,EAAKE,OAAOnI,OA7FvB,O,qmJCFA,yEAOM4I,GAAU,EAqBHC,GAFyB,IAAInQ,IAAU,OAE5B,CACtB,CAAEqK,KAAM,cACR,CAAEA,KAAM,cACR,CAAEA,KAAM,YACR,CAAEA,KAAM,WACR,CAAEA,KAAM,SACR,CAAEA,KAAM,WACR,CAAEA,KAAM,cACR,CAAEA,KAAM,cAGJ+F,EAAkB,CACtBC,QAASH,EACTI,QAASC,IAAqBC,OAC9BC,OAAQ,SACRC,WAAY,IAAI1Q,IAAYC,UAC1B,+CAEFyG,UAAW,IAAI1G,IAAYC,UACzB,gDAEFwL,WAAY,IAAIzL,IAAYC,UAC1B,gDAEFoD,SAAUsN,GAmBNjM,GAdK6L,IAAqBK,QAElB,IAAI5Q,IAAYC,UAC1B,+CAES,IAAID,IAAYC,UACzB,gDAEU,IAAID,IAAYC,UAC1B,gDAK2CmQ,GAEhC1L,O,0uBCvBAmM,EAtCO,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,OAC9C,OACE,cAAC,IAAD,CACEF,KAAMA,EACNG,KAAM,QACNC,QAAS,QACTC,EAAG,EACHC,QAAS,KACTC,OAAQ,CAAEC,GAAIC,YAAkB,UAAW,aAC3CC,OAAQR,EAAS,cAAWS,EAP9B,SASE,eAAC,IAAD,CAAOC,UAAW,MAAOC,MAAO,SAAhC,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,WAAY,eACZC,YAAa,CAAEC,MAAO,YACtBC,WAAY,IAHd,SAKGlB,IAEH,cAAC,IAAD,CAAMmB,SAAU,KAAhB,SAAuBjB,OAEzB,cAAC,IAAD,CACEa,WAAY,eACZK,UAAW,oBACXC,QAAS,EACTL,YAAa,CAAEK,QAAS,OAAQD,UAAW,iBAC3CE,QAAS,WACTR,MAAO,SACPS,KAAM,EAPR,SASE,cAAC,IAAD,CAAMN,MAAO,WAAYhP,EAAG,EAAGC,EAAG,EAAGsP,GAAIC,cCfpCC,EA1BmB,CAChC,CACE1B,MAAO,OACPC,KAAM,MAER,CACED,MAAO,UACPC,KAAM,aAER,CACED,MAAO,UACPC,KAAM,aAER,CACED,MAAO,YACPvN,SAAU,CACR,CACEuN,MAAO,qBACPE,SAAU,oCACVD,KAAM,8BACNE,QAAQ,MCwCDwB,EAlDI,WACjB,IAAMC,EAAYlB,YAAkB,WAAY,YAC1CmB,EAAiBnB,YAAkB,WAAY,SAC/CoB,EAAwBpB,YAAkB,QAAS,YAEzD,OACE,cAAC,IAAD,CAAOG,UAAW,MAAOhP,QAAS,EAAlC,SACG6P,EAAU7N,KAAI,SAACkO,GAAD,OACb,cAAC,IAAD,UACE,eAAC,IAAD,CAASC,QAAS,QAASC,UAAW,eAAtC,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACE3B,EAAG,EACHL,KAAM8B,EAAQ9B,KACdkB,SAAU,KACVD,WAAY,IACZD,MAAOW,EACPpB,OAAQ,CACN0B,eAAgB,OAChBjB,MAAOY,GAETlB,OAAQoB,EAAQ5B,OAAS,cAAWS,EAVtC,SAYGmB,EAAQ/B,UAIZ+B,EAAQtP,UACP,cAAC,IAAD,CACE0P,OAAQ,EACRC,UAAW,KACX3B,GAAIqB,EACJxB,EAAG,EACHC,QAAS,KACT8B,KAAM,KANR,SAQE,cAAC,IAAD,UACGN,EAAQtP,SAASoB,KAAI,SAACyO,GAAD,OACpB,cAAC,EAAD,eAAqCA,GAAjBA,EAAMtC,kBA9B5B+B,EAAQ/B,aCNpBuC,EAAgB,SAAC,GAAwC,IAAtCvC,EAAqC,EAArCA,MAAOvN,EAA8B,EAA9BA,SAAUwN,EAAoB,EAApBA,KACxC,EAA6BnN,cAArBtB,EAAR,EAAQA,OAAQgR,EAAhB,EAAgBA,SAEhB,OACE,eAAC,IAAD,CAAO3Q,QAAS,EAAG4Q,QAAShQ,GAAY+P,EAAxC,UACE,eAAC,IAAD,CACEE,GAAI,EACJlB,GAAImB,IACJ1C,KAAI,OAAEA,QAAF,IAAEA,IAAQ,IACdqB,QAAS,gBACTR,MAAO,SACPN,OAAQ,CACN0B,eAAgB,QAPpB,UAUE,cAAC,IAAD,CACEhB,WAAY,IACZD,MAAOP,YAAkB,WAAY,YAFvC,SAIGV,IAEFvN,GACC,cAAC,IAAD,CACE+O,GAAIoB,IACJ7B,WAAY,uBACZK,UAAW5P,EAAS,iBAAmB,GACvCS,EAAG,EACHC,EAAG,OAKT,cAAC,IAAD,CAAU2Q,GAAIrR,EAAQsR,gBAAc,EAACC,MAAO,CAAEC,UAAW,eAAzD,SACE,cAAC,IAAD,CACEC,GAAI,EACJC,GAAI,EACJC,WAAY,EACZC,YAAa,QACbC,YAAa3C,YAAkB,WAAY,YAC3CI,MAAO,QANT,SAQGrO,GACCA,EAASoB,KAAI,SAACyO,GAAD,OACX,cAAC,IAAD,CAAwBI,GAAI,EAAGzC,KAAMqC,EAAMrC,KAA3C,SACGqC,EAAMtC,OADEsC,EAAMtC,kBAwBhBsD,EAdG,WAChB,OACE,cAAC,IAAD,CACE7C,GAAIC,YAAkB,QAAS,YAC/BJ,EAAG,EACHD,QAAS,CAAEkD,GAAI,QAHjB,SAKG7B,EAAU7N,KAAI,SAACkO,GAAD,OACb,cAAC,EAAD,eAAuCA,GAAnBA,EAAQ/B,a,oCChBrBwD,EAvCiC,SAAC,GAAyB,IAAvBhS,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACnDC,EAASC,cAET8R,EAAqBvP,uBACzB,SAACwP,GAA4B,IAAD,EAC1BhS,EAAOiS,OAAOD,GACd,UAAAhS,EAAOkS,eAAP,SAAgBC,YAElB,CAACnS,IAGH,OACE,eAAC,IAAD,CAAOF,OAAQA,EAAQC,QAASA,EAAhC,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,+BACA,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAQI,QAAQ,MAAMC,GAAI,EAA1B,SACGJ,EAAOoS,QAAQjQ,KAAI,SAACnC,GAAD,OAClB,cAAC,IAAD,CAEEqS,MAAM,OACNrB,GAAI,EACJsB,SACE,cAAC,IAAD,CAAOjS,IAAKL,EAAOM,KAAMiS,IAAKvS,EAAO6H,KAAMwK,MAAO,IAEpDtB,QAAS,kBAAMgB,EAAmB/R,EAAO6H,OAP3C,SASG7H,EAAO6H,MARH7H,EAAO6H,oB,yBCGb2K,EAlCgB,WAC7B,MAAoCpR,cAA5BtB,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAASuB,EAAzB,EAAyBA,OACzB,EAA6CrB,cAArCwS,EAAR,EAAQA,UAAWhQ,EAAnB,EAAmBA,UAAWiQ,EAA9B,EAA8BA,WACtBlR,EAAgBmR,cAAhBnR,YAQR,OANA6B,qBAAU,WACJoP,GACF1S,MAED,CAAC0S,EAAW1S,IAGb,qCACE,cAAC,EAAD,CAAaD,OAAQA,EAAQC,QAASA,IACrC0S,EACC,qCACGjR,GACC,cAAC,IAAD,CAAKf,KAAK,KAAKmS,QAAQ,SAASC,YAAY,OAA5C,SACE,eAAC,IAAD,YACIrR,EAAYsR,OAAO/N,WAAnB,SAAgC,GAAM,IAAGgO,QAAQ,GADrD,KAC2D7Q,IAAU+L,YAIzE,cAAC,IAAD,CAAQ8C,QAAS2B,EAAjB,SACG1V,YAAY,OAACyF,QAAD,IAACA,OAAD,EAACA,EAAWoB,iBAI7B,cAAC,IAAD,CAAQkN,QAASzP,EAAjB,yBCtBF0R,EAAOC,YAAW,CACtBC,YAAa,OACbC,QAAS,oBACTC,KACE,sBACEC,KAAK,eACLC,EAAE,i2CACF5D,UAAU,iCAKD,SAAS6D,IACtB,MAA6BnS,cAArBtB,EAAR,EAAQA,OAAQgR,EAAhB,EAAgBA,SAEhB,OACE,eAAC,IAAD,WACE,eAAC,IAAD,CACE/B,GAAIC,YAAkB,QAAS,YAC/BO,MAAOP,YAAkB,WAAY,SACrCwE,KAAM,OACNxC,GAAI,CAAEyC,KAAM,GACZC,GAAI,CAAED,KAAM,GACZE,aAAc,EACdjC,YAAa,QACbC,YAAa3C,YAAkB,WAAY,YAC3CI,MAAO,SATT,UAWE,cAAC,IAAD,CACES,KAAM,CAAE4D,KAAM,EAAG5B,GAAI,QACrB+B,GAAI,CAAEH,MAAO,GACb9E,QAAS,CAAE8E,KAAM,OAAQ5B,GAAI,QAH/B,SAKE,cAAC,IAAD,CACEd,QAASD,EACTxQ,KACER,EAAS,cAAC,IAAD,CAAWS,EAAG,EAAGC,EAAG,IAAQ,cAAC,IAAD,CAAeD,EAAG,EAAGC,EAAG,IAE/DoS,QAAS,QACT,aAAY,wBAGhB,eAAC,IAAD,CAAM/C,KAAM,CAAE4D,KAAM,GAAK7D,QAAS,CAAE6D,KAAM,SAAU5B,GAAI,SAAxD,UACE,cAACmB,EAAD,CAAMa,QAAS,EAAGtE,MAAOP,YAAkB,WAAY,WAEvD,cAAC,IAAD,CAAML,QAAS,CAAE8E,KAAM,OAAQ5B,GAAI,QAAU+B,GAAI,GAAjD,SACE,cAAC,EAAD,SAIJ,cAAC,IAAD,CACE/D,KAAM,CAAE4D,KAAM,EAAG5B,GAAI,GACrBjC,QAAS,WACTT,UAAW,MACXhP,QAAS,EAJX,SAME,cAAC,EAAD,SAIJ,cAAC,IAAD,CAAUgR,GAAIrR,EAAQsR,gBAAc,EAApC,SACE,cAAC,EAAD,S,qBCNO0C,EAzDQ,WACrB,MAAuBvS,qBAAhBwS,EAAP,oBAEA,OACE,cAAC,IAAD,CAAW7T,KAAM,MAAjB,SACE,eAAC,IAAD,CACE8T,UAAW,SACX5E,MAAO,SACPjP,QAAS,CAAEsT,KAAM,EAAG5B,GAAI,IACxBb,GAAI,CAAEyC,KAAM,GAAI5B,GAAI,IAJtB,UAME,eAAC,IAAD,CACErC,WAAY,IACZC,SAAU,CAAEgE,KAAM,MAAOQ,GAAI,MAAOpC,GAAI,OACxCqC,WAAY,OAHd,kBAKQ,IACN,cAAC,IAAD,CAAMpE,GAAI,OAAQP,MAAO,WAAzB,sBAIF,cAAC,IAAD,CAAMA,MAAO,WAAYrP,KAAM,MAA/B,6lBAWA,cAAC,IAAD,CAAOC,QAAS,EAAGgP,UAAW,MAA9B,SACE,cAAC,IAAD,CACEW,GAAImB,IACJkD,GAAG,cACHtF,QAAS,OACT6E,GAAI,EACJb,YAAa,OACb9D,GAAI,WACJD,OAAQ,CAAEC,GAAI,YAPhB,2BAYF,cAAC,IAAD,CAAMxO,EAAG,OAAQqP,QAAQ,SAAzB,SACGmE,EACC,cAAC,IAAD,CAAO1T,IAAK0T,EAAc7T,KAAK,QAAQ2O,QAAQ,SAE/C,cAAC,IAAD,CAAgBpO,KAAK,kB,iCCsClB2T,GA5F6B,SAAC,GAAe,IAAbxO,EAAY,EAAZA,MAC7C,EAOI2C,cANFxJ,EADF,EACEA,oBACAC,EAFF,EAEEA,yBACAC,EAHF,EAGEA,YACAI,EAJF,EAIEA,YACAC,EALF,EAKEA,cACAC,EANF,EAMEA,oBAGF,EAA8CgC,qBAA9C,mBAAO8S,EAAP,KAAwBC,EAAxB,KACA,EAA0C/S,mBAAe,IAAIgE,MAA7D,mBAAOgP,EAAP,KAAsBC,EAAtB,KAEMC,EAAmBjS,sBAAW,uBAAC,sBAAAjF,EAAA,kEACnC+W,EADmC,SACVrV,EAAY2G,EAAMpH,MADR,6EAElC,CAACoH,EAAO3G,IAEXoE,qBAAU,WACHuC,EAAMV,WAAWuP,MACrB,CAAC7O,EAAO6O,IAEXpR,qBAAU,WACR,IAAMqR,EAAWC,aAAY,kBAAMH,EAAiB,IAAIjP,QAAS,KACjE,OAAO,kBAAMqP,cAAcF,MAC1B,CAACF,IAEJ,IAAMK,EAAcrS,sBAAW,uBAAC,sBAAAjF,EAAA,yDACzB8W,EADyB,iEAExBhV,EAAYgV,GAFY,2CAG7B,CAACA,EAAiBhV,IAEfyV,EAAgBtS,sBAAW,uBAAC,sBAAAjF,EAAA,yDAC3B8W,EAD2B,iEAE1B/U,EAAc+U,GAFY,2CAG/B,CAACA,EAAiB/U,IAEfyV,EAAcvS,sBAAW,uBAAC,sBAAAjF,EAAA,yDACzB8W,EADyB,iEAExB9U,EAAoB8U,GAFI,OAG9BI,IAH8B,2CAI7B,CAACJ,EAAiB9U,EAAqBkV,IAE1C,OACE,eAAC,IAAD,CACElU,EAAE,QACFC,EAAE,OACFwU,GAAG,IACH7F,UAAU,SACV8F,WAAW,SACXC,eAAe,SACfC,YAAY,MACZtG,QAAQ,KACRuG,OAAO,KATT,UAWE,cAAC,IAAD,CAAO/U,IAAKuF,EAAM/E,SAASwU,MAAOxG,QAAQ,KAAKtO,EAAE,QAAQ+U,KAAK,QAAQC,IAAI,MAC1E,cAAC,IAAD,CAAM9F,SAAS,MAAMD,WAAW,OAAOjP,EAAE,QAAQyT,UAAU,SAA3D,SACGpO,EAAM/E,SAASgH,OAElB,eAAC,IAAD,CAAK+G,EAAE,IAAIrO,EAAE,OAAb,UACE,eAAC,IAAD,CAAMA,EAAE,OAAR,UACE,cAAC,IAAD,iCACA,cAAC,IAAD,IACA,cAAC,IAAD,UAAOxB,EAAoB6G,SAEb,OAAfyO,QAAe,IAAfA,OAAA,EAAAA,EAAiBnP,YAChB,eAAC,IAAD,CAAM3E,EAAE,OAAR,UACE,cAAC,IAAD,+BACA,cAAC,IAAD,IACA,cAAC,IAAD,UACGvB,EAAyBqV,EAAiBE,GAAexB,QAAQ,SAIxD,OAAfsB,QAAe,IAAfA,OAAA,EAAAA,EAAiBnP,WAChB,eAAC,IAAD,WACE,cAAC,IAAD,CAAQsQ,aAAW,EAAC3C,YAAY,OAAO9B,QAAS+D,EAAhD,qBAGA,cAAC,IAAD,CAAQU,aAAW,EAAC3C,YAAY,QAAQ9B,QAASgE,EAAjD,sBAKF,cAAC,IAAD,CAAQS,aAAW,EAAC3C,YAAY,QAAQ9B,QAAS8D,EAAjD,0BCjEKY,GArBW,WACxB,MAA2ClN,cAAnC1J,EAAR,EAAQA,QAAS6C,EAAjB,EAAiBA,OAAQ5C,EAAzB,EAAyBA,cAEzB,OADAqE,QAAQC,IAAI1B,GAEV,cAAC,IAAD,CAAMyN,UAAU,SAAS5O,EAAE,OAAO6O,MAAM,SAASR,EAAE,OAAnD,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASoF,UAAU,SAAnB,0BACCnV,EAAQ1B,OAAS2B,EAAc3B,OAAS,EACvC,cAAC,IAAD,UACG2B,EAAc4W,OAAO7W,GAASsD,KAAI,SAACC,GAAD,OACjC,cAAC,GAAD,CAAmCwD,MAAOxD,GAA1BA,EAAE5D,KAAKqF,iBAI3B,cAAC,IAAD,CAAS+K,EAAE,IAAX,iD,6BCVK+G,GANI,WACjB,OAAO,eACFC,qBAAWC,Q,6BCmFHC,GArE+B,SAAC,GAAiB,IAAfhY,EAAc,EAAdA,QAC/C,EAA0D6X,KAAlDjN,EAAR,EAAQA,aAAclJ,EAAtB,EAAsBA,mBAAoBG,EAA1C,EAA0CA,YAE1C,EAA4B4B,qBAA5B,mBAAOuR,EAAP,KAAeiD,EAAf,KAEMC,EAAsBxT,uBAAY,WACtC,GAAKsQ,EAAL,CAEA,IAAM9I,EAAYqC,MAAM,GACrBgH,KAAK,GACLlR,KAAI,kBAAM,IAAIuH,KAAG,MACpBM,EAAUlM,GAAW,IAAI4L,KAAGoJ,EAAM,SAAG,GAAM,IAC3CnT,EAAYqK,MACX,CAAC8I,EAAQhV,EAAS6B,IAEfsW,EAAuBlU,mBAAQ,WACnC,OAAOvC,EAAmBsD,QACxB,SAACV,GAAD,OAAOA,EAAEqH,MAAM1E,cAAR,OAAuB2D,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAce,MAAM1E,eAClD,KACD,CAACvF,EAAoBkJ,IAExB,OACE,cAAC,IAAD,CACEnI,EAAE,QACFC,EAAE,OACFwU,GAAG,IACH7F,UAAU,SACV8F,WAAW,SACXC,eAAe,SACfC,YAAY,MACZtG,QAAQ,KACRuG,OAAO,KATT,SAWE,eAAC,IAAD,CAAQjV,QAAQ,IAAIyO,EAAE,IAAtB,UACE,cAAC,IAAD,UAAUjB,IAAS7P,GAAS+J,OAC5B,eAAC,KAAD,WACE,eAAC,KAAD,yBAAuB3F,IAAU+L,OAAjC,aACA,cAAC,KAAD,CACEiI,KAAK,SACLC,YAAY,0BACZC,SAAU,SAAChU,GAAD,OAAO2T,EAAUM,OAAOjU,EAAE6M,OAAO5G,cAG/C,eAAC,IAAD,CAAM9H,EAAE,OAAR,UACE,cAAC,IAAD,yCACA,cAAC,IAAD,IACA,cAAC,IAAD,UACG0V,EACGA,EAAqBjM,UAAUlM,GAASiH,WAAxC,SAAqD,GAAM,GAC3D,OAGR,eAAC,IAAD,CAAMxE,EAAE,OAAR,UACE,cAAC,IAAD,0BACA,cAAC,IAAD,IACA,cAAC,IAAD,UACGmI,EACGA,EAAasB,UAAUlM,GAASiH,WAAhC,SAA6C,GAAM,GACnD,OAGR,cAAC,IAAD,CAAQyQ,aAAW,EAAC3C,YAAY,QAAQ9B,QAASiF,EAAjD,uCCIOM,GA1EqC,SAAC,GAAuB,IAArBjL,EAAoB,EAApBA,cACrD,EAA2CsK,KAAnClW,EAAR,EAAQA,WAAYG,EAApB,EAAoBA,mBAEpB,EAA0B2B,qBAA1B,mBAAOqI,EAAP,KAAc2M,EAAd,KAEMC,EAA0BhU,sBAAW,uBAAC,4BAAAjF,EAAA,sEAC1BkC,EAAW4L,EAAc5B,MAAM1E,YADL,QACpC0R,EADoC,SAEnCF,EAASE,GAF0B,2CAGzC,CAACpL,EAAc5B,MAAOhK,IAEzB4D,qBAAU,WACRmT,MACC,CAACA,IAEJ,IAAMR,EAAsBxT,uBAC1B,SAACiH,GACC7J,EAAmB6J,KAErB,CAAC7J,IAGH,OACE,eAAC,IAAD,CACEW,EAAE,OACFC,EAAE,OACFoO,EAAE,IACFO,UAAU,MACV8F,WAAW,SACXC,eAAe,SACfC,YAAY,MACZtG,QAAQ,KACRuG,OAAO,KATT,UAWE,eAAC,IAAD,qBAAiB/J,EAAc5B,MAAM1E,cACrC,cAAC,IAAD,IACA,eAAC,IAAD,CAAQqK,MAAM,QAAd,UACE,eAAC,IAAD,uBACY,IACT/D,EAAcrB,UAAU+B,QAAO,SAACxO,EAAGkN,GAAJ,OAAUlN,EAAE2I,IAAIuE,MAAI1F,WAAnD,SACC,GAAM,GAAG,IAHb,IAII7C,IAAU+L,OAJd,oBAMCrE,GACC,qCACE,eAAC,IAAD,0BAAmBA,EAAMK,IAAIpG,WAA7B,UACA,eAAC,IAAD,6BAAsB8J,IAAS/D,EAAMM,OAAS,GAAGrC,QACjD,eAAC,IAAD,wBACawD,EAAcrB,UAAUJ,EAAMM,OAAS,GAAGrG,WADvD,KAEG3B,IAAU+L,OAFb,qBAIA,eAAC,IAAD,wBACa,IACVrE,EAAMI,UAAUJ,EAAMM,OAAS,GAAGwM,GAAG,IAAIhN,KAAG,IACzC2B,EAAcrB,UAAUJ,EAAMM,OAAS,GACpCyM,IAAI,IAAIjN,KAAG,MACXtE,IAAIwE,EAAMI,UAAUJ,EAAMM,OAAS,IACnCnF,WAAa,IAChB,EAPN,wBAaN,cAAC,IAAD,IACA,cAAC,IAAD,CACE8N,YAAY,OACZ9B,QAAS,kBAAMiF,EAAoB3K,EAAc5B,MAAM1E,aAFzD,qCC0CS6R,GAnGW,WACxB,IAAM5W,EAASC,cACf,EACE0V,KADMnN,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,aAAcE,EAA/B,EAA+BA,QAASpJ,EAAxC,EAAwCA,mBAAoBE,EAA5D,EAA4DA,gBAG5D,EAAsB6B,qBAAtB,mBAAOyJ,EAAP,KAAY6L,EAAZ,KAEMC,EAAatU,uBAAY,WAC7B,IAAKkG,IAAiBF,IAAYwC,EAAK,OAAO,KAE9C,IAAM+L,EAAarO,EAAaqB,MAC7B7D,IAAIsC,EAAQa,QACZ2N,IAAI,IAAItN,KAAGsB,IACXjG,WACGkS,EAAOpM,KAAKE,MAAOgM,EAAU,MAAqB,GAClDG,EAAQrM,KAAKE,MAAOgM,EAAU,KAAgB,IAC9CI,EAAUtM,KAAKE,MAAOgM,EAAa,GAAM,IACzCK,EAAUvM,KAAKE,MAAMgM,EAAa,IAExC,MAAM,GAAN,OAAUE,EAAO,GAAK,IAAMA,EAAOA,EAAnC,YACEC,EAAQ,GAAK,IAAMA,EAAQA,EAD7B,YAEIC,EAAU,GAAK,IAAMA,EAAUA,EAFnC,YAGEC,EAAU,GAAK,IAAMA,EAAUA,KAEhC,CAAC5O,EAASE,EAAcsC,IAE3B3H,qBAAU,WACR,IAAMgU,EAAQC,YAAW,WACvBT,EAAOhM,KAAKjB,MAAMrE,KAAKyF,MAAQ,QAC9B,KAEH,OAAO,kBAAMuM,aAAaF,OAG5B,IAAMG,EAAiBhV,uBAAY,WACjC9C,MACC,CAACA,IAEJ,OACE,cAAC,IAAD,CAAMyP,UAAU,SAAS5O,EAAE,OAAO6O,MAAM,SAASR,EAAE,OAAnD,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASoF,UAAU,SAAnB,qBACCxL,GAAWE,GACV,eAAC,IAAD,CAAK0G,MAAM,SAAX,UACE,eAAC,IAAD,CAAS4E,UAAU,SAASvT,KAAK,KAAjC,2BACiBiI,EAAae,MAAM1E,cAEpC,eAAC,IAAD,CAASiP,UAAU,SAASvT,KAAK,KAAjC,6BACmB,IAChBiI,EAAauB,IAAI7E,IAAI,IAAIsE,KAAJ,SAAO,GAAM,KAAI3E,WAFzC,UAICiG,GACDxC,EAAQe,cAAcrD,IAAIsC,EAAQa,QAAQtE,WAAaiG,EACrD,eAAC,IAAD,CAASgJ,UAAU,SAASvT,KAAK,KAAjC,kCACwBqW,IADxB,4BAC+D,IAC5DlO,GAAW,EAFd,UAKA,cAAC,IAAD,CACEiK,YAAY,OACZ4E,EAAE,IACF1G,QAASyG,EACTE,UAAW1X,EAAOyC,UAJpB,iCAWN,cAAC,IAAD,CAAMgV,EAAE,IAAI7H,QAAQ,SAApB,SACGjC,IAASxL,KAAI,SAACC,EAAGC,GAAJ,OACZ,cAAC,GAAD,CAA0BvE,QAASuE,GAAjBD,EAAEyF,WAGvBrI,EAAmBrC,OAAS,GAC3B,qCACE,cAAC,IAAD,CAASiD,GAAG,SACZ,cAAC,IAAD,CAAS4T,UAAU,SAAS2D,GAAG,IAA/B,sCAGA,cAAC,IAAD,UACGnY,EACEsD,QACC,SAACV,GAAD,OAAOA,EAAEqH,MAAM1E,cAAR,OAAuB2D,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAce,MAAM1E,eAEnD5C,KAAI,SAACC,GAAD,OACH,cAAC,GAAD,CAEEiJ,cAAejJ,GADVA,EAAEqH,MAAM1E,0B,UC7DlB6S,GAlCS,WACtB,IAAM5X,EAASC,cACPiB,EAAeC,eAAfD,WACAsH,EAAYmN,KAAZnN,QACR,EAA4BjH,mBAAiB,GAA7C,mBAAOuR,EAAP,KAAeiD,EAAf,KAEM8B,EAAarV,uBAAY,WACxBgG,GAAYxI,EAAOyC,WACxBzC,EAAOgG,iBACL,IAAIC,gBAAcC,IAChB0B,iBAAckQ,SAAS,CACrBC,WAAY/X,EAAOyC,UACnBuV,SAAUxP,EAAQhE,OAClByT,SAAUnF,KAGd5R,KAED,CAACA,EAAYlB,EAAQwI,EAASsK,IAE3BoF,EAAe1V,uBAAY,SAAC2V,GAChCpC,EAAUoC,EAAC,SAAG,GAAI,MACjB,CAACpC,IAEJ,OACE,eAAC,IAAD,CAAW7V,KAAM,MAAjB,UACE,cAAC,KAAD,CAAOgW,KAAK,SAASE,SAAU,SAAAhU,GAAC,OAAI8V,EAAa7B,OAAOjU,EAAE6M,OAAO5G,WACjE,cAAC,IAAD,CAAQ0I,QAAS8G,EAAYH,SAAqB,IAAX5E,EAAvC,0BCRAsF,GAA4B,SAAC,GAAkB,IAAhBrX,EAAe,EAAfA,SAC7B+M,EAAU5L,IAAU2L,QACtBE,IAAqBK,QACrBL,IAAqBC,OAEnBqK,EAAgBtW,mBAAQ,kBAAMuW,yBAAcxK,KAAU,CAACA,IACvDyK,EAAWrW,IAAU2L,QACvB,uCAEAwK,EACErX,EAAQC,cAERmR,EAAUrQ,mBACd,iBAAM,CACJyW,cACAC,cACAC,cACAC,YAAe,CACbC,QAAS,CAAEC,SAAU,gDAEvBC,cACAC,YAAgB,CAAEjL,YAClBkL,YAAyB,CAAElL,eAE7B,CAACA,IAGGmL,EAAUzW,uBACd,SAAC0W,GAAD,OACElY,EAAM,CACJoF,MAAO,QACPC,YAAa6S,EAAMC,QAAN,UACND,EAAMrR,KADA,aACSqR,EAAMC,SACxBD,EAAMrR,KACVvB,OAAQ,QACRC,SAAU,IACVC,YAAY,MAEhB,CAACxF,IAGH,OACE,cAACoY,EAAA,EAAD,CACEb,SAAUA,EACVc,OAAQ,CAAEC,iCAAkC,KAF9C,SAIE,cAACC,EAAA,EAAD,CAAgBnH,QAASA,EAAS6G,QAASA,EAA3C,SACE,cAAC,IAAD,UAAsBlY,SAMxByY,GAAsB,SAAC,GAAkB,IAAhBzY,EAAe,EAAfA,SAC7B,OACE,cAAC,IAAD,UACE,cAAC,GAAD,UACE,cAAC0Y,EAAA,EAAD,UACE,cAAC,KAAD,UAAkB1Y,WAuBb2Y,OAhBf,WACE,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOtG,KAAK,IAAIuG,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOvG,KAAK,WAAWuG,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOvG,KAAK,WAAWuG,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOvG,KAAK,SAASuG,QAAS,cAAC,GAAD,eCzFzBC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,M,4DCNerR,IANG,WAChB,OAAO,eACFqN,qBAAW8E,S","file":"static/js/main.7a663250.chunk.js","sourcesContent":["export type Lottery = {\n  \"version\": \"0.1.0\",\n  \"name\": \"lottery\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeLottery\",\n      \"accounts\": [\n        {\n          \"name\": \"lotteryKey\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"InitializeLotteryBumps\"\n          }\n        },\n        {\n          \"name\": \"period\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"setLottery\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"mint\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"treasury\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"period\",\n          \"type\": \"i64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"newLotteryRound\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"oldLotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bump\",\n          \"type\": \"u8\"\n        }\n      ]\n    },\n    {\n      \"name\": \"participate\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"playerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bump\",\n          \"type\": \"u8\"\n        },\n        {\n          \"name\": \"spendings\",\n          \"type\": {\n            \"array\": [\n              \"u64\",\n              8\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"updateParticipation\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"playerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"spendings\",\n          \"type\": {\n            \"array\": [\n              \"u64\",\n              8\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"claimParticipation\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"lottery\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"InitializeLotteryBumps\"\n            }\n          },\n          {\n            \"name\": \"key\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"treasury\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"period\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastRound\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastTimestamp\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"unclaimedPot\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"lotteryRound\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"start\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"spendings\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                8\n              ]\n            }\n          },\n          {\n            \"name\": \"pot\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"winner\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"lotteryParticipation\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"player\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"spendings\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                8\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeLotteryBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"lottery\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"round\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"TooSoonForNewRound\",\n      \"msg\": \"Trying to start a new round earlier than the period\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"RoundFinished\",\n      \"msg\": \"Too late to participate in this round\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"RoundNotFinished\",\n      \"msg\": \"The round is not finished yet\"\n    }\n  ]\n};\n\nexport const IDL: Lottery = {\n  \"version\": \"0.1.0\",\n  \"name\": \"lottery\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeLottery\",\n      \"accounts\": [\n        {\n          \"name\": \"lotteryKey\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"InitializeLotteryBumps\"\n          }\n        },\n        {\n          \"name\": \"period\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"setLottery\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"mint\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"treasury\",\n          \"type\": \"publicKey\"\n        },\n        {\n          \"name\": \"period\",\n          \"type\": \"i64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"newLotteryRound\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"oldLotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bump\",\n          \"type\": \"u8\"\n        }\n      ]\n    },\n    {\n      \"name\": \"participate\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"playerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bump\",\n          \"type\": \"u8\"\n        },\n        {\n          \"name\": \"spendings\",\n          \"type\": {\n            \"array\": [\n              \"u64\",\n              8\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"updateParticipation\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"playerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasury\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"spendings\",\n          \"type\": {\n            \"array\": [\n              \"u64\",\n              8\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"claimParticipation\",\n      \"accounts\": [\n        {\n          \"name\": \"lottery\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lotteryRound\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"participation\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"player\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"lottery\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"InitializeLotteryBumps\"\n            }\n          },\n          {\n            \"name\": \"key\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"treasury\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"period\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastRound\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastTimestamp\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"unclaimedPot\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"lotteryRound\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"start\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"spendings\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                8\n              ]\n            }\n          },\n          {\n            \"name\": \"pot\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"winner\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"lotteryParticipation\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"player\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"spendings\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                8\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeLotteryBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"lottery\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"round\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"TooSoonForNewRound\",\n      \"msg\": \"Trying to start a new round earlier than the period\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"RoundFinished\",\n      \"msg\": \"Too late to participate in this round\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"RoundNotFinished\",\n      \"msg\": \"The round is not finished yet\"\n    }\n  ]\n};\n","import * as anchor from \"@project-serum/anchor\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\nexport const shortAddress = (address: string | undefined): string => {\n  if (!address) return \"???\";\n  return (\n    address.substring(0, 4) +\n    \"...\" +\n    address.substring(address.length - 4, address.length)\n  );\n};\n\nexport const findTokenAddress = async (\n  walletAddress: anchor.web3.PublicKey,\n  tokenMintAddress: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      TOKEN_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const findAssociatedTokenAddress = async (\n  walletAddress: anchor.web3.PublicKey,\n  tokenMintAddress: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const factionToNumber = (faction: string) => {\n  switch (faction) {\n    case \"Sarengti\":\n      return 1;\n    case \"Amphibian\":\n      return 2;\n    case \"Reptile\":\n      return 3;\n    case \"Misfit\":\n      return 4;\n    case \"Bird\":\n      return 5;\n    case \"Monkey\":\n      return 6;\n    case \"Carnivore\":\n      return 7;\n    case \"Mythic\":\n      return 8;\n    default:\n      throw new Error(\"unknown faction\")\n  }\n};\n\nexport const buildLeaves = (\n  data: { mint: anchor.web3.PublicKey; rarity: number; faction: number }[]\n) => {\n  const leaves: Array<Buffer> = [];\n  for (let idx = 0; idx < data.length; ++idx) {\n    const animal = data[idx];\n    leaves.push(\n      Buffer.from([\n        ...animal.mint.toBuffer(),\n        ...new anchor.BN(animal.rarity).toArray(\"le\", 8),\n        ...new anchor.BN(animal.faction).toArray(\"le\", 8),\n      ])\n    );\n  }\n\n  return leaves;\n};","export type Jungle = {\n  \"version\": \"0.1.0\",\n  \"name\": \"jungle\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeJungle\",\n      \"accounts\": [\n        {\n          \"name\": \"jungleKey\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"InitializeJungleBumps\"\n          }\n        },\n        {\n          \"name\": \"maxRarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"maxMultiplier\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"baseWeeklyEmissions\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"root\",\n          \"type\": {\n            \"array\": [\n              \"u8\",\n              32\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"setJungle\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"newOwner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"maxRarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"maxMultiplier\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"baseWeeklyEmissions\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"root\",\n          \"type\": {\n            \"array\": [\n              \"u8\",\n              32\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"withdrawRewards\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"ownerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"stakeAnimal\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"depositAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"StakeAnimalBumps\"\n          }\n        },\n        {\n          \"name\": \"proof\",\n          \"type\": {\n            \"vec\": {\n              \"array\": [\n                \"u8\",\n                32\n              ]\n            }\n          }\n        },\n        {\n          \"name\": \"rarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"faction\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"unstakeAnimal\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"depositAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"claimStaking\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"jungle\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"key\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"InitializeJungleBumps\"\n            }\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardsAccount\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"animalsStaked\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"maximumRarity\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"maximumRarityMultiplier\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"baseWeeklyEmissions\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"start\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"root\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                32\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"animal\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"StakeAnimalBumps\"\n            }\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"staker\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rarity\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"faction\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"lastClaim\",\n            \"type\": \"i64\"\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeJungleBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"jungle\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"rewards\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"StakeAnimalBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"animal\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"deposit\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InvalidMultiplier\",\n      \"msg\": \"Invalid multiplier, must be greater than 10000\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"TooEarly\",\n      \"msg\": \"Too early to stake\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"InvalidProof\",\n      \"msg\": \"Merkle proof is invalid\"\n    }\n  ]\n};\n\nexport const IDL: Jungle = {\n  \"version\": \"0.1.0\",\n  \"name\": \"jungle\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeJungle\",\n      \"accounts\": [\n        {\n          \"name\": \"jungleKey\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"InitializeJungleBumps\"\n          }\n        },\n        {\n          \"name\": \"maxRarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"maxMultiplier\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"baseWeeklyEmissions\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"root\",\n          \"type\": {\n            \"array\": [\n              \"u8\",\n              32\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"setJungle\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"newOwner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"maxRarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"maxMultiplier\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"baseWeeklyEmissions\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"start\",\n          \"type\": \"i64\"\n        },\n        {\n          \"name\": \"root\",\n          \"type\": {\n            \"array\": [\n              \"u8\",\n              32\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"withdrawRewards\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"ownerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"stakeAnimal\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"depositAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"bumps\",\n          \"type\": {\n            \"defined\": \"StakeAnimalBumps\"\n          }\n        },\n        {\n          \"name\": \"proof\",\n          \"type\": {\n            \"vec\": {\n              \"array\": [\n                \"u8\",\n                32\n              ]\n            }\n          }\n        },\n        {\n          \"name\": \"rarity\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"faction\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"unstakeAnimal\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"depositAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"claimStaking\",\n      \"accounts\": [\n        {\n          \"name\": \"jungle\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"animal\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"staker\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"mint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rewardsAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"clock\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"jungle\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"key\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"InitializeJungleBumps\"\n            }\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rewardsAccount\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"animalsStaked\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"maximumRarity\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"maximumRarityMultiplier\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"baseWeeklyEmissions\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"start\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"root\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                32\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"animal\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"StakeAnimalBumps\"\n            }\n          },\n          {\n            \"name\": \"mint\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"staker\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"rarity\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"faction\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"lastClaim\",\n            \"type\": \"i64\"\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeJungleBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"jungle\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"escrow\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"rewards\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"StakeAnimalBumps\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"animal\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"deposit\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InvalidMultiplier\",\n      \"msg\": \"Invalid multiplier, must be greater than 10000\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"TooEarly\",\n      \"msg\": \"Too early to stake\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"InvalidProof\",\n      \"msg\": \"Merkle proof is invalid\"\n    }\n  ]\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport { createContext } from \"react\";\n\nimport { ContextValues } from \"./types\";\n\nconst Context = createContext<ContextValues>({\n  animals: [],\n  stakedAnimals: [],\n  getRarityMultiplier: () => 0,\n  getPendingStakingRewards: () => 0,\n  fetchAnimal: (mint: PublicKey) => new Promise(() => {}),\n  fetchUserAccount: () => new Promise(() => {}),\n  createAccount: () => new Promise(() => {}),\n  stakeAnimal: () => new Promise(() => {}),\n  unstakeAnimal: () => new Promise(() => {}),\n  claimStakingRewards: () => new Promise(() => {}),\n});\n\nexport default Context;\n","import { createContext } from \"react\";\n\nimport { ContextValues } from \"./types\";\n\nconst Context = createContext<ContextValues>({\n  userParticipations: [],\n  fetchRound: () => new Promise(() => {}),\n  newLotteryRound: () => new Promise(() => {}),\n  participate: () => new Promise(() => {}),\n  claimParticipation: () => new Promise(() => {}),\n});\n\nexport default Context;\n","import {\n  VStack,\n  Image,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\ninterface ConfirmationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst ConfirmationModal: React.FC<ConfirmationModalProps> = ({\n  isOpen,\n  onClose\n}) => {\n  const wallet = useWallet();\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent maxW=\"350px\">\n        <ModalHeader>Confirming transaction...</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing=\"8px\" my={2}>\n            <Image src={wallet.wallet?.icon} w=\"100%\" h=\"100%\" />\n            <Spinner size=\"xl\" thickness={\"8px\"} />\n          </VStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ConfirmationModal;\n","import React, { useCallback, useEffect, useState, useMemo } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\nimport {\n  AccountInfo as TokenAccount,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Program } from \"@project-serum/anchor\";\nimport { Metadata } from \"@metaplex-foundation/mpl-token-metadata\";\nimport { useDisclosure, useToast } from \"@chakra-ui/react\";\n\nimport { buildLeaves, factionToNumber, findTokenAddress } from \"utils\";\nimport ConfirmationModal from \"../../components/ConfirmationModal\";\nimport Context from \"./Context\";\nimport constants from \"../../constants\";\nimport { Animal, Jungle } from \".\";\nimport {\n  Jungle as JungleProgram,\n  IDL as JundleIdl,\n} from \"../../constants/types/jungle\";\nimport idl from \"../../constants/idls/jungle.json\";\nimport { MerkleTree } from \"utils/merkleTree\";\n\nconst programID = new PublicKey(idl.metadata.address);\n\nconst JungleProvider: React.FC = ({ children }) => {\n  const toast = useToast();\n  const { connection } = useConnection();\n  const wallet = useWallet();\n\n  const { isOpen: confirming, onOpen, onClose } = useDisclosure();\n  const [userAccount, setUserAccount] = useState<TokenAccount>();\n  const [jungle, setJungle] = useState<Jungle>();\n  const [animals, setAnimals] = useState<Animal[]>();\n  const [stakedAnimals, setStakedAnimals] = useState<Animal[]>();\n\n  const provider = useMemo(\n    () =>\n      new anchor.Provider(connection, wallet as any, {\n        preflightCommitment: \"confirmed\",\n      }),\n    [connection, wallet]\n  );\n\n  const tree = useMemo(() => {\n    const leaves = buildLeaves(\n      constants.metadata.map((e, i) => ({\n        mint: new PublicKey(e.mint),\n        rarity: e.rarity,\n        faction: factionToNumber(e.faction),\n      }))\n    );\n    return new MerkleTree(leaves);\n  }, []);\n\n  /**\n   * Fetches the animals owned by the user\n   */\n  const fetchAnimals = useCallback(async () => {\n    if (!connection || !wallet.publicKey) return;\n\n    try {\n      const owned = await Metadata.findDataByOwner(\n        connection,\n        wallet.publicKey\n      );\n      const collectionMints = constants.metadata.map((e) => e.mint);\n      setAnimals(\n        owned\n          .map((e) => e.mint)\n          .filter((e) => collectionMints.includes(e))\n          .map((e) => {\n            const metadataItem = constants.metadata.filter(\n              (f) => f.mint === e\n            )[0];\n            return {\n              mint: new PublicKey(e),\n              metadata: metadataItem.arweave,\n              rarity: metadataItem.rarity,\n              faction: metadataItem.faction,\n            };\n          })\n      );\n    } catch (err) {\n      console.log(\"Failed fetching owned tokens\", err);\n    }\n  }, [wallet.publicKey, connection]);\n\n  useEffect(() => {\n    if (!animals) fetchAnimals();\n  }, [fetchAnimals, animals]);\n\n  /**\n   * Fetches the animals staked by the user\n   */\n  const fetchStakedAnimals = useCallback(async () => {\n    if (!connection || !wallet.publicKey) return;\n\n    const program = new anchor.Program(idl as anchor.Idl, programID, provider);\n\n    try {\n      const staked = await program.account.animal.all([\n        {\n          memcmp: {\n            offset: 42, // Bumps + mint\n            bytes: wallet.publicKey?.toString(),\n          },\n        },\n      ]);\n      const collectionMints = constants.metadata.map((e) => e.mint);\n      setStakedAnimals(\n        staked\n          .map((e) => e.account.mint.toString())\n          .filter((e) => collectionMints.includes(e))\n          .map((e) => {\n            const metadataItem = constants.metadata.filter(\n              (f) => f.mint === e\n            )[0];\n            return {\n              mint: new PublicKey(e),\n              metadata: metadataItem.arweave,\n              rarity: metadataItem.rarity,\n              faction: metadataItem.faction,\n            };\n          })\n      );\n    } catch (err) {\n      console.log(\"Failed fetching owned tokens\", err);\n    }\n  }, [provider, wallet.publicKey, connection]);\n\n  useEffect(() => {\n    if (!stakedAnimals) fetchStakedAnimals();\n  }, [fetchStakedAnimals, stakedAnimals]);\n\n  /**\n   * Fetches the jungle\n   */\n  const fetchJungle = useCallback(async () => {\n    const program = new Program<JungleProgram>(JundleIdl, programID, provider);\n\n    const [jungleAddress] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"jungle\"), constants.jungleKey.toBuffer()],\n      programID\n    );\n\n    const fetchedJungle = await program.account.jungle.fetch(jungleAddress);\n\n    setJungle({\n      key: fetchedJungle.key,\n      owner: fetchedJungle.owner,\n      escrow: fetchedJungle.escrow,\n      mint: fetchedJungle.mint,\n      rewardsAccount: fetchedJungle.rewardsAccount,\n      animalsStaked: fetchedJungle.animalsStaked,\n      maximumRarity: fetchedJungle.maximumRarity,\n      maximumRarityMultiplier: fetchedJungle.maximumRarityMultiplier,\n      baseWeeklyEmissions: fetchedJungle.baseWeeklyEmissions,\n      root: fetchedJungle.root,\n    });\n  }, [provider]);\n\n  useEffect(() => {\n    fetchJungle();\n  }, [fetchJungle]);\n\n  const getRarityMultiplier = useCallback(\n    (animal: Animal) => {\n      if (!jungle) return;\n\n      return (\n        ((animal.rarity / jungle.maximumRarity.toNumber()) *\n          (jungle.maximumRarityMultiplier.toNumber() - 10000) +\n          10000) /\n        10000\n      );\n    },\n    [jungle]\n  );\n\n  const getPendingStakingRewards = useCallback(\n    (animal: Animal, end: Date) => {\n      const animalMultiplier = getRarityMultiplier(animal) || 1;\n      if (!jungle || !animal.lastClaim || end < animal.lastClaim) return 0;\n\n      const elapsed = (end.valueOf() - animal.lastClaim.valueOf()) / 1000;\n      const emissionsPerSecond = jungle.baseWeeklyEmissions\n        .div(new anchor.BN(604800))\n        .toNumber();\n\n      return (\n        (elapsed * emissionsPerSecond * animalMultiplier) /\n        jungle.animalsStaked.toNumber() /\n        10 ** 9\n      );\n    },\n    [jungle, getRarityMultiplier]\n  );\n\n  /**\n   * Fetches a staking account\n   */\n  const fetchAnimal = useCallback(\n    async (mint: PublicKey) => {\n      if (!connection) return;\n\n      const program = new anchor.Program(\n        idl as anchor.Idl,\n        programID,\n        provider\n      );\n\n      const [animalAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"animal\"), mint.toBuffer()],\n        programID\n      );\n\n      const metadataItem = constants.metadata.filter(\n        (e) => e.mint === mint.toString()\n      )[0];\n      try {\n        const fetchedAnimal = await program.account.animal.fetch(animalAddress);\n\n        return {\n          mint: mint,\n          metadata: metadataItem.arweave,\n          rarity: fetchedAnimal.rarity.toString(),\n          faction: fetchedAnimal.faction,\n          lastClaim: new Date(fetchedAnimal.lastClaim.toNumber() * 1000),\n        };\n      } catch (err) {\n        return {\n          mint: mint,\n          metadata: metadataItem.arweave,\n          rarity: metadataItem.rarity,\n          faction: metadataItem.faction,\n        };\n      }\n    },\n    [connection, provider]\n  );\n\n  /**\n   * Fetches the staking rewards account\n   */\n  const fetchUserAccount = useCallback(async () => {\n    if (!jungle || !connection || !wallet.publicKey) return;\n\n    try {\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        jungle.mint,\n        wallet.publicKey\n      );\n      const token = new Token(\n        connection,\n        jungle.mint,\n        TOKEN_PROGRAM_ID,\n        wallet as any\n      );\n      setUserAccount(await token.getAccountInfo(associatedAddress));\n    } catch (err) {\n      console.log(\"User has no account yet\");\n    }\n  }, [connection, jungle, wallet]);\n\n  useEffect(() => {\n    fetchUserAccount();\n  }, [fetchUserAccount]);\n\n  const createAccount = useCallback(async () => {\n    if (!wallet.publicKey || !wallet.signTransaction || !jungle) return;\n\n    onOpen();\n\n    const tokenAccountAddress = await findTokenAddress(\n      wallet.publicKey,\n      jungle.mint\n    );\n\n    try {\n      await wallet.sendTransaction(\n        new anchor.web3.Transaction().add(\n          Token.createInitAccountInstruction(\n            TOKEN_PROGRAM_ID,\n            jungle.mint,\n            tokenAccountAddress,\n            wallet.publicKey\n          )\n        ),\n        connection\n      );\n      toast({\n        title: \"Account creation successful\",\n        description: `Successfully created an account`,\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      });\n      fetchUserAccount();\n    } catch (err) {\n      console.log(err);\n\n      toast({\n        title: \"Account creation failed\",\n        description: `Failed to created an account`,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      onClose();\n    }\n  }, [jungle, connection, toast, wallet, onClose, onOpen, fetchUserAccount]);\n\n  const stakeAnimal = useCallback(\n    async (animal: Animal) => {\n      if (!wallet || !wallet.publicKey || !jungle) return;\n\n      onOpen();\n\n      const program = new Program<JungleProgram>(\n        JundleIdl,\n        programID,\n        provider\n      );\n      const [jungleAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"jungle\", \"utf8\"), jungle.key.toBuffer()],\n        program.programId\n      );\n      const [animalAddress, animalBump] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"animal\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n      const [deposit, depositBump] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"deposit\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n\n      const bumps = {\n        animal: animalBump,\n        deposit: depositBump,\n      };\n\n      const stakerAccount = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        animal.mint,\n        wallet.publicKey\n      );\n      const indexStaked = constants.metadata.findIndex(\n        (e) => e.mint === animal.mint.toString()\n      );\n\n      try {\n        await program.rpc.stakeAnimal(\n          bumps,\n          tree.getProofArray(indexStaked),\n          new anchor.BN(animal.rarity),\n          new anchor.BN(animal.faction),\n          {\n            accounts: {\n              jungle: jungleAddress,\n              escrow: jungle.escrow,\n              animal: animalAddress,\n              staker: wallet.publicKey,\n              mint: animal.mint,\n              stakerAccount: stakerAccount,\n              depositAccount: deposit,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n              systemProgram: SystemProgram.programId,\n            },\n          }\n        );\n\n        toast({\n          title: \"Staking successful\",\n          description: `Successfully staked \"${animal.metadata.name}\"`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchAnimals();\n        fetchStakedAnimals();\n      } catch (err) {\n        console.log(\"Failed staking animal\", err);\n\n        toast({\n          title: \"Staking failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      jungle,\n      provider,\n      tree,\n      toast,\n      wallet,\n      onClose,\n      onOpen,\n      fetchAnimals,\n      fetchStakedAnimals,\n    ]\n  );\n\n  const unstakeAnimal = useCallback(\n    async (animal: Animal) => {\n      if (!wallet || !wallet.publicKey || !jungle) return;\n\n      onOpen();\n\n      const program = new Program<JungleProgram>(\n        JundleIdl,\n        programID,\n        provider\n      );\n      const [jungleAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"jungle\", \"utf8\"), jungle.key.toBuffer()],\n        program.programId\n      );\n      const [rewardsAccount] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"rewards\", \"utf8\"),\n          jungle.key.toBuffer(),\n          jungle.mint.toBuffer(),\n        ],\n        program.programId\n      );\n      const [animalAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"animal\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n      const [deposit] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"deposit\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n\n      const rewardsStakerAccount = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        jungle.mint,\n        wallet.publicKey\n      );\n      const animalStakerAccount = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        animal.mint,\n        wallet.publicKey\n      );\n\n      try {\n        // Create an reward account if the user does not have one\n        const instructions = userAccount\n          ? []\n          : [\n              Token.createAssociatedTokenAccountInstruction(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                jungle.mint,\n                rewardsStakerAccount,\n                wallet.publicKey,\n                wallet.publicKey\n              ),\n            ];\n\n        // Claim rewards as well\n        instructions.push(\n          program.instruction.claimStaking({\n            accounts: {\n              jungle: jungleAddress,\n              escrow: jungle.escrow,\n              animal: animalAddress,\n              staker: wallet.publicKey,\n              mint: jungle.mint,\n              stakerAccount: rewardsStakerAccount,\n              rewardsAccount: rewardsAccount,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n              systemProgram: SystemProgram.programId,\n            },\n          })\n        );\n        await program.rpc.unstakeAnimal({\n          accounts: {\n            jungle: jungleAddress,\n            escrow: jungle.escrow,\n            animal: animalAddress,\n            staker: wallet.publicKey,\n            mint: animal.mint,\n            stakerAccount: animalStakerAccount,\n            depositAccount: deposit,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          },\n          instructions: instructions,\n        });\n\n        toast({\n          title: \"Unstaking successful\",\n          description: `Successfully unstaked \"${animal.metadata.name}\"`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchAnimals();\n        fetchStakedAnimals();\n        fetchUserAccount();\n      } catch (err) {\n        console.log(\"Failed unstaking animal\", err);\n\n        toast({\n          title: \"Unstaking failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      jungle,\n      provider,\n      toast,\n      userAccount,\n      wallet,\n      onClose,\n      onOpen,\n      fetchAnimals,\n      fetchStakedAnimals,\n      fetchUserAccount,\n    ]\n  );\n\n  const claimStakingRewards = useCallback(\n    async (animal: Animal) => {\n      if (!wallet || !wallet.publicKey || !jungle) return;\n\n      onOpen();\n\n      const program = new Program<JungleProgram>(\n        JundleIdl,\n        programID,\n        provider\n      );\n      const [jungleAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"jungle\", \"utf8\"), jungle.key.toBuffer()],\n        program.programId\n      );\n      const [rewardsAccount] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"rewards\", \"utf8\"),\n          jungle.key.toBuffer(),\n          jungle.mint.toBuffer(),\n        ],\n        program.programId\n      );\n      const [animalAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"animal\", \"utf8\"), animal.mint.toBuffer()],\n        program.programId\n      );\n\n      const stakerAccount = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        jungle.mint,\n        wallet.publicKey\n      );\n\n      try {\n        // Create an reward account if the user does not have one\n        const instructions = userAccount\n          ? []\n          : [\n              Token.createAssociatedTokenAccountInstruction(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                jungle.mint,\n                stakerAccount,\n                wallet.publicKey,\n                wallet.publicKey\n              ),\n            ];\n\n        await program.rpc.claimStaking({\n          accounts: {\n            jungle: jungleAddress,\n            escrow: jungle.escrow,\n            animal: animalAddress,\n            staker: wallet.publicKey,\n            mint: jungle.mint,\n            stakerAccount: stakerAccount,\n            rewardsAccount: rewardsAccount,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            clock: SYSVAR_CLOCK_PUBKEY,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId,\n          },\n          instructions: instructions,\n        });\n\n        toast({\n          title: \"Claiming successful\",\n          description: `Successfully claimed staking rewards for \"${animal.metadata.name}\"`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchAnimals();\n        fetchStakedAnimals();\n        fetchUserAccount();\n      } catch (err) {\n        console.log(\"Failed claiming rewards\", err);\n\n        toast({\n          title: \"Claiming staking rewards failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      jungle,\n      provider,\n      toast,\n      userAccount,\n      wallet,\n      onClose,\n      onOpen,\n      fetchAnimals,\n      fetchStakedAnimals,\n      fetchUserAccount,\n    ]\n  );\n\n  return (\n    <Context.Provider\n      value={{\n        jungle,\n        animals: animals || [],\n        stakedAnimals: stakedAnimals || [],\n        userAccount,\n        getRarityMultiplier,\n        getPendingStakingRewards,\n        fetchAnimal,\n        fetchUserAccount,\n        createAccount,\n        stakeAnimal,\n        unstakeAnimal,\n        claimStakingRewards,\n      }}\n    >\n      {children}\n      <ConfirmationModal isOpen={confirming} onClose={onClose} />\n    </Context.Provider>\n  );\n};\n\nexport default JungleProvider;\n","import React, { useCallback, useEffect, useState, useMemo } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { BN, Program } from \"@project-serum/anchor\";\nimport { useDisclosure, useToast } from \"@chakra-ui/react\";\n\nimport ConfirmationModal from \"../../components/ConfirmationModal\";\nimport Context from \"./Context\";\nimport constants from \"../../constants\";\nimport { Lottery, LotteryRound, Participation } from \".\";\nimport {\n  Lottery as LotteryProgram,\n  IDL as LotteryIdl,\n} from \"../../constants/types/lottery\";\nimport idl from \"../../constants/idls/lottery.json\";\nimport useJungle from \"hooks/useJungle\";\n\nconst programID = new PublicKey(idl.metadata.address);\n\nconst LotteryProvider: React.FC = ({ children }) => {\n  const toast = useToast();\n  const { connection } = useConnection();\n  const wallet = useWallet();\n  const { jungle, userAccount, fetchUserAccount } = useJungle();\n\n  const { isOpen: confirming, onOpen, onClose } = useDisclosure();\n  const [lottery, setLottery] = useState<Lottery>();\n  const [currentRound, setCurrentRound] = useState<LotteryRound>();\n  const [nextPot, setNextPot] = useState<number>();\n  const [userParticipations, setUserParticipations] = useState<Participation[]>(\n    []\n  );\n\n  const provider = useMemo(\n    () =>\n      new anchor.Provider(connection, wallet as any, {\n        preflightCommitment: \"confirmed\",\n      }),\n    [connection, wallet]\n  );\n\n  /**\n   * Fetches the lottery\n   */\n  const fetchLottery = useCallback(async () => {\n    const program = new Program<LotteryProgram>(\n      LotteryIdl,\n      programID,\n      provider\n    );\n\n    const [lotteryAddress] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"lottery\"), constants.lotteryKey.toBuffer()],\n      programID\n    );\n\n    const fetchedLottery = await program.account.lottery.fetch(lotteryAddress);\n\n    setLottery({\n      key: fetchedLottery.key,\n      owner: fetchedLottery.owner,\n      escrow: fetchedLottery.escrow,\n      mint: fetchedLottery.mint,\n      treasury: fetchedLottery.treasury,\n      period: fetchedLottery.period,\n      lastRound: fetchedLottery.lastRound,\n      lastTimestamp: fetchedLottery.lastTimestamp,\n      unclaimedPot: fetchedLottery.unclaimedPot,\n    });\n  }, [provider]);\n\n  useEffect(() => {\n    fetchLottery();\n  }, [fetchLottery]);\n\n  /**\n   * Fetches a specific round\n   */\n  const fetchRound = useCallback(\n    async (index: number) => {\n      if (!lottery) return;\n\n      const program = new Program<LotteryProgram>(\n        LotteryIdl,\n        programID,\n        provider\n      );\n\n      const [round] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\"),\n          lottery.key.toBuffer(),\n          new BN(index).toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n\n      const fetchedRound = await program.account.lotteryRound.fetch(round);\n\n      return {\n        index: fetchedRound.index,\n        start: fetchedRound.start,\n        spendings: fetchedRound.spendings,\n        pot: fetchedRound.pot,\n        winner: fetchedRound.winner,\n      };\n    },\n    [provider, lottery]\n  );\n\n  /**\n   * Fetches the current lottery round\n   */\n  const fetchCurrentRound = useCallback(async () => {\n    if (!lottery) return;\n    setCurrentRound(await fetchRound(lottery.lastRound.toNumber()));\n  }, [lottery, fetchRound]);\n\n  useEffect(() => {\n    fetchCurrentRound();\n  }, [fetchCurrentRound]);\n\n  /**\n   * Fetches the user participations\n   */\n  const fetchUserParticipations = useCallback(async () => {\n    if (!wallet || !wallet.publicKey) return;\n\n    const program = new Program<LotteryProgram>(\n      LotteryIdl,\n      programID,\n      provider\n    );\n\n    try {\n      // TODO: User filters to only fetch this player's participations\n      const participations = await program.account.lotteryParticipation.all();\n      setUserParticipations(\n        participations\n          .map((e) => ({\n            player: e.account.player,\n            index: e.account.index,\n            spendings: e.account.spendings,\n          }))\n          .filter((e) => e.player.toString() === wallet.publicKey?.toString())\n          .sort((a, b) => a.index.toNumber() - b.index.toNumber())\n      );\n    } catch (err) {\n      console.log(\"Failed fetching owned tokens\", err);\n    }\n  }, [provider, wallet]);\n\n  useEffect(() => {\n    fetchUserParticipations();\n  }, [fetchUserParticipations]);\n\n  /**\n   * Fetch the amount of SOL currently waiting for the next round\n   */\n  const fetchNextPot = useCallback(async () => {\n    if (!lottery) return;\n    setNextPot(\n      (await provider.connection.getBalance(lottery.escrow)) / 10 ** 9\n    );\n  }, [lottery, provider, setNextPot]);\n\n  useEffect(() => {\n    fetchNextPot();\n  }, [fetchNextPot]);\n\n  /**\n   * Create a new round of lottery.\n   * This can be called only after the previous round expires\n   */\n  const newLotteryRound = useCallback(async () => {\n    if (!wallet || !wallet.publicKey || !lottery) return;\n\n    onOpen();\n\n    const program = new Program<LotteryProgram>(\n      LotteryIdl,\n      programID,\n      provider\n    );\n    const [lotteryAddress] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"lottery\", \"utf8\"), lottery.key.toBuffer()],\n      program.programId\n    );\n    const [escrow] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"escrow\", \"utf8\"), lottery.key.toBuffer()],\n      program.programId\n    );\n\n    // Checking the number of rounds behind and skip several in one tx\n    const roundsToSkip = Math.min(\n      16, // Maximum number possible\n      Math.floor(\n        (Math.round(Date.now() / 1000) - lottery.lastTimestamp.toNumber()) /\n          lottery.period.toNumber()\n      )\n    );\n\n    console.log(\n      `${Math.floor(\n        (Math.round(Date.now() / 1000) - lottery.lastTimestamp.toNumber()) /\n          lottery.period.toNumber()\n      )} rounds behind`\n    );\n\n    const instructions = [];\n    for (let i = 0; i < roundsToSkip - 1; i++) {\n      const [round, roundBump] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound.add(new BN(i + 1)).toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      const [previousRound] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound.add(new BN(i)).toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      instructions.push(\n        program.instruction.newLotteryRound(roundBump, {\n          accounts: {\n            lottery: lotteryAddress,\n            escrow: escrow,\n            lotteryRound: round,\n            oldLotteryRound: previousRound,\n            payer: wallet.publicKey,\n            clock: SYSVAR_CLOCK_PUBKEY,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId,\n          },\n        })\n      );\n    }\n\n    try {\n      const [round, roundBump] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound\n            .add(new BN(roundsToSkip))\n            .toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      const [previousRound] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound\n            .add(new BN(roundsToSkip - 1))\n            .toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n\n      await program.rpc.newLotteryRound(roundBump, {\n        accounts: {\n          lottery: lotteryAddress,\n          escrow: escrow,\n          lotteryRound: round,\n          oldLotteryRound: previousRound,\n          payer: wallet.publicKey,\n          clock: SYSVAR_CLOCK_PUBKEY,\n          rent: SYSVAR_RENT_PUBKEY,\n          systemProgram: SystemProgram.programId,\n        },\n        instructions: instructions,\n      });\n\n      toast({\n        title: \"A new round is starting!\",\n        description: `Successfully started round #${lottery.lastRound\n          .add(new BN(roundsToSkip))\n          .toNumber()}`,\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      });\n      fetchLottery();\n      fetchUserParticipations();\n    } catch (err) {\n      console.log(\"Failed new round\", err);\n\n      toast({\n        title: \"Starting a new round failed\",\n        description: `${err}`,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n\n    onClose();\n  }, [\n    lottery,\n    provider,\n    toast,\n    wallet,\n    onClose,\n    onOpen,\n    fetchLottery,\n    fetchUserParticipations,\n  ]);\n\n  const participate = useCallback(\n    async (spendings: BN[]) => {\n      if (!wallet || !wallet.publicKey || !lottery || !jungle || !userAccount)\n        return;\n\n      onOpen();\n\n      const program = new Program<LotteryProgram>(\n        LotteryIdl,\n        programID,\n        provider\n      );\n      const [lotteryAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"lottery\", \"utf8\"), lottery.key.toBuffer()],\n        program.programId\n      );\n\n      const [round] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          lottery.lastRound.toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      const [participation, participationBump] =\n        await PublicKey.findProgramAddress(\n          [\n            Buffer.from(\"participation\", \"utf8\"),\n            lottery.key.toBuffer(),\n            lottery.lastRound.toArrayLike(Buffer, \"le\", 8),\n            wallet.publicKey.toBuffer(),\n          ],\n          programID\n        );\n\n      try {\n        try {\n          // Check if there already is a participation\n          await program.account.lotteryParticipation.fetch(participation);\n\n          // If it works, update it, else create it\n          await program.rpc.updateParticipation(spendings, {\n            accounts: {\n              lottery: lotteryAddress,\n              lotteryRound: round,\n              participation: participation,\n              player: wallet.publicKey,\n              playerAccount: userAccount.address,\n              treasury: jungle.rewardsAccount,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n              systemProgram: SystemProgram.programId,\n            },\n          });\n        } catch (err) {\n          await program.rpc.participate(participationBump, spendings, {\n            accounts: {\n              lottery: lotteryAddress,\n              lotteryRound: round,\n              participation: participation,\n              player: wallet.publicKey,\n              playerAccount: userAccount.address,\n              treasury: jungle.rewardsAccount,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n              systemProgram: SystemProgram.programId,\n            },\n          });\n        }\n        toast({\n          title: \"Your bet is accepted!\",\n          description: `Successfully bet round #${\n            lottery.lastRound.toNumber() + 1\n          }`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchLottery();\n        fetchUserAccount();\n        fetchUserParticipations();\n      } catch (err) {\n        console.log(\"Failed participating\", err);\n\n        toast({\n          title: \"Participation failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      lottery,\n      provider,\n      jungle,\n      userAccount,\n      toast,\n      wallet,\n      onClose,\n      onOpen,\n      fetchLottery,\n      fetchUserAccount,\n      fetchUserParticipations,\n    ]\n  );\n\n  const claimParticipation = useCallback(\n    async (index: number) => {\n      if (!wallet || !wallet.publicKey || !lottery || !jungle || !userAccount)\n        return;\n\n      onOpen();\n\n      const program = new Program<LotteryProgram>(\n        LotteryIdl,\n        programID,\n        provider\n      );\n      const [lotteryAddress] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"lottery\", \"utf8\"), lottery.key.toBuffer()],\n        program.programId\n      );\n      const [escrow] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"escrow\", \"utf8\"), lottery.key.toBuffer()],\n        program.programId\n      );\n      const [round] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"round\", \"utf8\"),\n          lottery.key.toBuffer(),\n          new BN(index).toArrayLike(Buffer, \"le\", 8),\n        ],\n        programID\n      );\n      const [participation] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"participation\", \"utf8\"),\n          lottery.key.toBuffer(),\n          new BN(index).toArrayLike(Buffer, \"le\", 8),\n          wallet.publicKey.toBuffer(),\n        ],\n        programID\n      );\n\n      try {\n        await program.rpc.claimParticipation({\n          accounts: {\n            lottery: lotteryAddress,\n            escrow: escrow,\n            lotteryRound: round,\n            participation: participation,\n            player: wallet.publicKey,\n            clock: SYSVAR_CLOCK_PUBKEY,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId,\n          },\n        });\n\n        toast({\n          title: \"Claimed participation\",\n          description: `Successfully claimed round #${index}`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        fetchLottery();\n        fetchUserParticipations();\n      } catch (err) {\n        console.log(\"Failed claiming\", err);\n\n        toast({\n          title: \"Claiming failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      lottery,\n      provider,\n      jungle,\n      userAccount,\n      toast,\n      wallet,\n      onClose,\n      onOpen,\n      fetchLottery,\n      fetchUserParticipations,\n    ]\n  );\n\n  return (\n    <Context.Provider\n      value={{\n        lottery,\n        currentRound,\n        nextPot,\n        userParticipations,\n        fetchRound,\n        newLotteryRound,\n        participate,\n        claimParticipation,\n      }}\n    >\n      {children}\n      <ConfirmationModal isOpen={confirming} onClose={onClose} />\n    </Context.Provider>\n  );\n};\n\nexport default LotteryProvider;\n","import { keccak_256 } from \"js-sha3\";\n\nexport class MerkleTree {\n  leafs: Array<Buffer>;\n  layers: Array<Array<Buffer>>;\n\n  constructor(leafs: Array<Buffer>) {\n    this.leafs = leafs.slice();\n    this.layers = [];\n\n    let hashes = this.leafs.map(MerkleTree.nodeHash);\n    while (hashes.length > 0) {\n      this.layers.push(hashes.slice());\n      if (hashes.length === 1) break;\n      hashes = hashes.reduce((acc, cur, idx, arr) => {\n        if (idx % 2 === 0) {\n          const nxt = arr[idx + 1];\n          acc.push(MerkleTree.internalHash(cur, nxt));\n        }\n        return acc;\n      }, Array<Buffer>());\n    }\n  }\n\n  static nodeHash(data: Buffer): Buffer {\n    return Buffer.from(keccak_256.digest([0x00, ...data]));\n  }\n\n  static internalHash(first: Buffer, second: Buffer | undefined): Buffer {\n    if (!second) return first;\n    const [fst, snd] = [first, second].sort(Buffer.compare);\n    return Buffer.from(keccak_256.digest([0x01, ...fst, ...snd]));\n  }\n\n  getRoot(): Buffer {\n    return this.layers[this.layers.length - 1][0];\n  }\n\n  getRootArray(): number[] {\n    let arr = [];\n    for (let v of this.getRoot().values()) {\n      arr.push(v);\n    }\n    return arr;\n  }\n\n  getProof(idx: number): Buffer[] {\n    return this.layers.reduce((proof, layer) => {\n      const sibling = idx ^ 1;\n      if (sibling < layer.length) {\n        proof.push(layer[sibling]);\n      }\n\n      idx = Math.floor(idx / 2);\n\n      return proof;\n    }, []);\n  }\n\n  getProofArray(index: number) {\n    let res = [];\n\n    for (let e of this.getProof(index)) {\n      let arr: number[] = [];\n      for (let v of e.values()) {\n        arr.push(v);\n      }\n      res.push(arr)\n    }\n    return res;\n  }\n\n  getHexRoot(): string {\n    return this.getRoot().toString(\"hex\");\n  }\n\n  getHexProof(idx: number): string[] {\n    return this.getProof(idx).map((el) => el.toString(\"hex\"));\n  }\n\n  verifyProof(idx: number, proof: Buffer[], root: Buffer): boolean {\n    let pair = MerkleTree.nodeHash(this.leafs[idx]);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n  static verifyClaim(leaf: Buffer, proof: Buffer[], root: Buffer): boolean {\n    let pair = MerkleTree.nodeHash(leaf);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n}\n","import * as anchor from \"@project-serum/anchor\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\n\nimport mainnetMetadata from \"./mainnetMetadata.json\";\nimport devnetMetadata from \"./devnetMetadata.json\";\nimport { MetadataJson } from \"@metaplex/js\";\n\nconst MAINNET = false;\n\nexport type StaticMetadata = {\n  metadata: {\n    name: string;\n    symbol: string;\n    uri: string;\n    seller_fee_basis_points: number;\n    creators: {\n      address: string;\n      share: number;\n    }[];\n  };\n  arweave: MetadataJson;\n  mint: string;\n  rarity: number;\n  faction: string;\n};\n\nexport const COLLECTION_CLAIM_DELAY = new anchor.BN(86400);\n\nexport const FACTIONS = [\n  { name: \"Serengetis\" },\n  { name: \"Amphibians\" },\n  { name: \"Reptiles\" },\n  { name: \"Misfits\" },\n  { name: \"Birds\" },\n  { name: \"Monkeys\" },\n  { name: \"Carnivores\" },\n  { name: \"Extincts\" },\n];\n\nconst devnetConstants = {\n  mainnet: MAINNET,\n  network: WalletAdapterNetwork.Devnet,\n  ticker: \"ANIMAL\",\n  wrappedSol: new anchor.web3.PublicKey(\n    \"So11111111111111111111111111111111111111112\"\n  ),\n  jungleKey: new anchor.web3.PublicKey(\n    \"BRK9vQaBnXBLCMd4QUaYTFFq5eTZ2yZHA76zwf5nZmtW\"\n  ),\n  lotteryKey: new anchor.web3.PublicKey(\n    \"7zPZHrsSe2uWjGai7Li9gAqCW1YBg1JZnk3Ym9rT713R\"\n  ),\n  metadata: devnetMetadata as any as StaticMetadata[],\n};\n\nconst mainnetConstants = {\n  mainnet: MAINNET,\n  network: WalletAdapterNetwork.Mainnet,\n  ticker: \"ANIMAL\",\n  wrappedSol: new anchor.web3.PublicKey(\n    \"So11111111111111111111111111111111111111112\"\n  ),\n  jungleKey: new anchor.web3.PublicKey(\n    \"BomSWAVr2Ab8CngV2zWbxiBP6fBDPfNM2sFimAUfgvWP\"\n  ),\n  lotteryKey: new anchor.web3.PublicKey(\n    \"EJBKqVd4CKTbZCqh2RBoQbxEMUTeCRQdasee79Xx9DZP\"\n  ),\n  metadata: mainnetMetadata as any as StaticMetadata[],\n};\n\nconst constants = MAINNET ? mainnetConstants : devnetConstants;\n\nexport default constants;\n","import { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Flex,\n  Stack,\n  Link,\n  Text,\n  useColorModeValue,\n  Icon,\n} from \"@chakra-ui/react\";\nimport { NavItem } from \"./types\";\n\nconst DesktopSubNav = ({ label, href, subLabel, newTab }: NavItem) => {\n  return (\n    <Link\n      href={href}\n      role={\"group\"}\n      display={\"block\"}\n      p={2}\n      rounded={\"md\"}\n      _hover={{ bg: useColorModeValue(\"pink.50\", \"gray.900\") }}\n      target={newTab ? \"_blank\" : undefined}\n    >\n      <Stack direction={\"row\"} align={\"center\"}>\n        <Box>\n          <Text\n            transition={\"all .3s ease\"}\n            _groupHover={{ color: \"pink.400\" }}\n            fontWeight={500}\n          >\n            {label}\n          </Text>\n          <Text fontSize={\"sm\"}>{subLabel}</Text>\n        </Box>\n        <Flex\n          transition={\"all .3s ease\"}\n          transform={\"translateX(-10px)\"}\n          opacity={0}\n          _groupHover={{ opacity: \"100%\", transform: \"translateX(0)\" }}\n          justify={\"flex-end\"}\n          align={\"center\"}\n          flex={1}\n        >\n          <Icon color={\"pink.400\"} w={5} h={5} as={ChevronRightIcon} />\n        </Flex>\n      </Stack>\n    </Link>\n  );\n};\n\nexport default DesktopSubNav;\n","import { NavItem } from \"./types\";\n\nconst NAV_ITEMS: Array<NavItem> = [\n  {\n    label: \"Home\",\n    href: \"#/\"\n  },\n  {\n    label: \"Staking\",\n    href: \"#/staking\"\n  },\n  {\n    label: \"Lottery\",\n    href: \"#/lottery\"\n  },\n  {\n    label: \"Resources\",\n    children: [\n      {\n        label: \"The Jungle Discord\",\n        subLabel: \"SolSteads official Discord server\",\n        href: \"https://discord.gg/tbZe5jyx\",\n        newTab: true,\n      },\n    ],\n  },\n];\n\nexport default NAV_ITEMS;\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\nimport {\n  Box,\n  Stack,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  Link,\n} from \"@chakra-ui/react\";\nimport DesktopSubNav from \"./DesktopSubNav\";\nimport NAV_ITEMS from \"./items\";\n\nconst DesktopNav = () => {\n  const linkColor = useColorModeValue(\"gray.600\", \"gray.200\");\n  const linkHoverColor = useColorModeValue(\"gray.800\", \"white\");\n  const popoverContentBgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  return (\n    <Stack direction={\"row\"} spacing={4}>\n      {NAV_ITEMS.map((navItem) => (\n        <Box key={navItem.label}>\n          <Popover trigger={\"hover\"} placement={\"bottom-start\"}>\n            <PopoverTrigger>\n              <Link\n                p={2}\n                href={navItem.href}\n                fontSize={\"sm\"}\n                fontWeight={500}\n                color={linkColor}\n                _hover={{\n                  textDecoration: \"none\",\n                  color: linkHoverColor,\n                }}\n                target={navItem.newTab ? \"_blank\" : undefined}\n              >\n                {navItem.label}\n              </Link>\n            </PopoverTrigger>\n\n            {navItem.children && (\n              <PopoverContent\n                border={0}\n                boxShadow={\"xl\"}\n                bg={popoverContentBgColor}\n                p={4}\n                rounded={\"xl\"}\n                minW={\"sm\"}\n              >\n                <Stack>\n                  {navItem.children.map((child) => (\n                    <DesktopSubNav key={child.label} {...child} />\n                  ))}\n                </Stack>\n              </PopoverContent>\n            )}\n          </Popover>\n        </Box>\n      ))}\n    </Stack>\n  );\n};\n\nexport default DesktopNav;\n","import { ChevronDownIcon } from \"@chakra-ui/icons\";\nimport {\n  Collapse,\n  Flex,\n  Link,\n  Icon,\n  Stack,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport NAV_ITEMS from \"./items\";\nimport { NavItem } from \"./types\";\n\nconst MobileNavItem = ({ label, children, href }: NavItem) => {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack spacing={4} onClick={children && onToggle}>\n      <Flex\n        py={2}\n        as={Link}\n        href={href ?? \"#\"}\n        justify={\"space-between\"}\n        align={\"center\"}\n        _hover={{\n          textDecoration: \"none\",\n        }}\n      >\n        <Text\n          fontWeight={600}\n          color={useColorModeValue(\"gray.600\", \"gray.200\")}\n        >\n          {label}\n        </Text>\n        {children && (\n          <Icon\n            as={ChevronDownIcon}\n            transition={\"all .25s ease-in-out\"}\n            transform={isOpen ? \"rotate(180deg)\" : \"\"}\n            w={6}\n            h={6}\n          />\n        )}\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity style={{ marginTop: \"0!important\" }}>\n        <Stack\n          mt={2}\n          pl={4}\n          borderLeft={1}\n          borderStyle={\"solid\"}\n          borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n          align={\"start\"}\n        >\n          {children &&\n            children.map((child) => (\n              <Link key={child.label} py={2} href={child.href}>\n                {child.label}\n              </Link>\n            ))}\n        </Stack>\n      </Collapse>\n    </Stack>\n  );\n};\n\nconst MobileNav = () => {\n  return (\n    <Stack\n      bg={useColorModeValue(\"white\", \"gray.800\")}\n      p={4}\n      display={{ md: \"none\" }}\n    >\n      {NAV_ITEMS.map((navItem) => (\n        <MobileNavItem key={navItem.label} {...navItem} />\n      ))}\n    </Stack>\n  );\n};\n\nexport default MobileNav;\n","import {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Image,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletName } from \"@solana/wallet-adapter-wallets\";\nimport { useCallback } from \"react\";\n\ninterface WalletModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst WalletModal: React.FC<WalletModalProps> = ({ isOpen, onClose }) => {\n  const wallet = useWallet();\n\n  const handleChooseWallet = useCallback(\n    (walletName: WalletName) => {\n      wallet.select(walletName);\n      wallet.adapter?.connect()\n    },\n    [wallet]\n  );\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Connect a wallet</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing=\"8px\" my={2}>\n            {wallet.wallets.map((wallet) => (\n              <Button\n                key={wallet.name}\n                width=\"100%\"\n                py={2}\n                leftIcon={\n                  <Image src={wallet.icon} alt={wallet.name} width={8} />\n                }\n                onClick={() => handleChooseWallet(wallet.name)}\n              >\n                {wallet.name}\n              </Button>\n            ))}\n          </VStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default WalletModal;\n","import { Button, Tag, TagLabel } from \"@chakra-ui/react\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport WalletModal from \"../../components/WalletModal\";\nimport { useEffect } from \"react\";\nimport { shortAddress } from \"utils\";\n\nimport useCollection from \"../../hooks/useJungle\";\nimport constants from \"../../constants\";\n\nconst WalletButton: React.FC = () => {\n  const { isOpen, onClose, onOpen } = useDisclosure();\n  const { connected, publicKey, disconnect } = useWallet();\n  const { userAccount } = useCollection();\n\n  useEffect(() => {\n    if (connected) {\n      onClose();\n    }\n  }, [connected, onClose]);\n\n  return (\n    <>\n      <WalletModal isOpen={isOpen} onClose={onClose} />\n      {connected ? (\n        <>\n          {userAccount && (\n            <Tag size=\"lg\" variant=\"subtle\" colorScheme=\"cyan\">\n              <TagLabel>\n                {(userAccount.amount.toNumber() / 10 ** 9).toFixed(2)} ${constants.ticker}\n              </TagLabel>\n            </Tag>\n          )}\n          <Button onClick={disconnect}>\n            {shortAddress(publicKey?.toString())}\n          </Button>\n        </>\n      ) : (\n        <Button onClick={onOpen}>Connect</Button>\n      )}\n    </>\n  );\n};\n\nexport default WalletButton;\n","import {\n  Box,\n  Flex,\n  IconButton,\n  Stack,\n  Collapse,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { HamburgerIcon, CloseIcon, createIcon } from \"@chakra-ui/icons\";\n\nimport DesktopNav from \"./DesktopNav\";\nimport MobileNav from \"./MobileNav\";\n\nimport WalletButton from \"./WalletButton\";\n\nconst Logo = createIcon({\n  displayName: \"Logo\",\n  viewBox: \"0 0 538.27 742.48\",\n  path: (\n    <path\n      fill=\"currentColor\"\n      d=\"M741.65,815.19H711.52v-206H704V549.3h10.3V529.38h-2.76L680.24,397.64V360.25l20-.87v4.4l32.15-1.41s-10.35-2.64-8-4.46c5.4-4.25,12-3.54,4.92-3.86-2-.09-11.41-.37-19-.59a6.4,6.4,0,0,0-1.89-2.89c-2.25-1.58-23.64-1-28.16-.91v-4h-1.77v52L647.21,529.38h-2.76V549.3h10.28v41.59h-6.9v18.34h-6.42V590.89h-7.25v18.34h-8.49V590.89H618.4v18.34h-1.23v-72h7.09V523.46h-1.9l-21.57-90.87v-25.8l13.79-.61v3l22.18-1s-7.14-1.81-5.55-3.08c3.73-2.92,8.28-2.44,3.4-2.66-1.39-.06-7.88-.25-13.1-.41a4.29,4.29,0,0,0-1.29-2c-1.57-1.09-16.3-.72-19.43-.63v-2.75h-1.23v35.86l-13.93,58.76-58.09-145-20.77,51.86L464.89,221.63V164.2l30.69-1.35v6.77l49.4-2.17s-15.91-4-12.35-6.85c8.29-6.52,18.43-5.44,7.57-5.92-3.09-.14-17.51-.57-29.14-.91a9.43,9.43,0,0,0-2.93-4.44c-3.45-2.42-36.17-1.61-43.24-1.41v-6.13h-2.72v79.84L419.6,401,397.68,346.3,346,475.44,335.8,432.59v-25.8l13.78-.61v3l22.18-1s-7.14-1.81-5.54-3.08c3.72-2.92,8.28-2.44,3.4-2.66-1.39-.06-7.88-.25-13.1-.41a4.21,4.21,0,0,0-1.29-2c-1.56-1.09-16.31-.72-19.43-.63v-2.75h-1.23v35.86L313,523.46H311.1V537.2h6.82v19.47h.29v52.56h-3.16V590.89H307.8v18.34h-6.41V590.89h-7.26v18.34h-8.5V549.3h10.29V529.38h-2.76L261.9,397.64V360.25l20-.87v4.4L314,362.37s-10.35-2.64-8-4.46c5.39-4.25,12-3.54,4.91-3.86-2-.09-11.4-.37-19-.59a6.23,6.23,0,0,0-1.88-2.89c-2.26-1.58-23.64-1-28.15-.91v-4h-1.78v52L228.87,529.38h-2.78V549.3h10.3v59.93h-10.3v206H203.38v69.08H741.65Z\"\n      transform=\"translate(-203.38 -141.79)\"\n    />\n  ),\n});\n\nexport default function WithSubnavigation() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Box>\n      <Flex\n        bg={useColorModeValue(\"white\", \"gray.800\")}\n        color={useColorModeValue(\"gray.600\", \"white\")}\n        minH={\"60px\"}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={\"solid\"}\n        borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\n        align={\"center\"}\n      >\n        <Flex\n          flex={{ base: 1, md: \"auto\" }}\n          ml={{ base: -2 }}\n          display={{ base: \"flex\", md: \"none\" }}\n        >\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={\"ghost\"}\n            aria-label={\"Toggle Navigation\"}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: \"center\", md: \"start\" }}>\n          <Logo boxSize={8} color={useColorModeValue(\"gray.600\", \"white\")} />\n\n          <Flex display={{ base: \"none\", md: \"flex\" }} ml={10}>\n            <DesktopNav />\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={\"flex-end\"}\n          direction={\"row\"}\n          spacing={6}\n        >\n          <WalletButton />\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <MobileNav />\n      </Collapse>\n    </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Flex,\n  Heading,\n  Container,\n  Image,\n  Stack,\n  Text,\n  SkeletonCircle,\n} from \"@chakra-ui/react\";\n\nimport { Link } from \"react-router-dom\";\n\nconst Home: React.FC = () => {\n  const [currentImage] = useState<string>();\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack\n        textAlign={\"center\"}\n        align={\"center\"}\n        spacing={{ base: 8, md: 10 }}\n        py={{ base: 20, md: 28 }}\n      >\n        <Heading\n          fontWeight={600}\n          fontSize={{ base: \"3xl\", sm: \"4xl\", md: \"6xl\" }}\n          lineHeight={\"110%\"}\n        >\n          Lorem{\" \"}\n          <Text as={\"span\"} color={\"blue.400\"}>\n            Ipsum\n          </Text>\n        </Heading>\n        <Text color={\"gray.500\"} maxW={\"3xl\"}>\n          Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam\n          nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat,\n          sed diam voluptua. At vero eos et accusam et justo duo dolores et ea\n          rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem\n          ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur\n          sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et\n          dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam\n          et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea\n          takimata sanctus est Lorem ipsum dolor sit amet.\n        </Text>\n        <Stack spacing={6} direction={\"row\"}>\n          <Button\n            as={Link}\n            to=\"leaderboard\"\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n          >\n            Get started\n          </Button>\n        </Stack>\n        <Flex w={\"full\"} justify=\"center\">\n          {currentImage ? (\n            <Image src={currentImage} maxW=\"300px\" rounded=\"full\" />\n          ) : (\n            <SkeletonCircle size=\"300px\" />\n          )}\n        </Flex>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Flex, Box, Image, Text, HStack, Button, Spacer } from \"@chakra-ui/react\";\nimport { Animal } from \"contexts/Jungle\";\nimport useJungle from \"hooks/useJungle\";\n\ninterface TokenCardProps {\n  token: Animal;\n}\n\nconst TokenCard: React.FC<TokenCardProps> = ({ token }) => {\n  const {\n    getRarityMultiplier,\n    getPendingStakingRewards,\n    fetchAnimal,\n    stakeAnimal,\n    unstakeAnimal,\n    claimStakingRewards,\n  } = useJungle();\n\n  const [augmentedAnimal, setAugmentedAnimal] = useState<Animal>();\n  const [stakingPeriod, setStakingPeriod] = useState<Date>(new Date());\n\n  const fetchAnimalStats = useCallback(async () => {\n    setAugmentedAnimal(await fetchAnimal(token.mint));\n  }, [token, fetchAnimal]);\n\n  useEffect(() => {\n    if (!token.lastClaim) fetchAnimalStats();\n  }, [token, fetchAnimalStats]);\n\n  useEffect(() => {\n    const interval = setInterval(() => setStakingPeriod(new Date()), 500);\n    return () => clearInterval(interval);\n  }, [setStakingPeriod]);\n\n  const handleStake = useCallback(async () => {\n    if (!augmentedAnimal) return;\n    await stakeAnimal(augmentedAnimal);\n  }, [augmentedAnimal, stakeAnimal]);\n\n  const handleUnstake = useCallback(async () => {\n    if (!augmentedAnimal) return;\n    await unstakeAnimal(augmentedAnimal);\n  }, [augmentedAnimal, unstakeAnimal]);\n\n  const handleClaim = useCallback(async () => {\n    if (!augmentedAnimal) return;\n    await claimStakingRewards(augmentedAnimal);\n    fetchAnimalStats();\n  }, [augmentedAnimal, claimStakingRewards, fetchAnimalStats]);\n\n  return (\n    <Flex\n      w=\"280px\"\n      h=\"100%\"\n      pt=\"0\"\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth=\"2px\"\n      rounded=\"lg\"\n      shadow=\"lg\"\n    >\n      <Image src={token.metadata.image} rounded=\"lg\" w=\"280px\" maxH=\"400px\" top=\"0\" />\n      <Text fontSize=\"2xl\" fontWeight=\"bold\" w=\"280px\" textAlign=\"center\">\n        {token.metadata.name}\n      </Text>\n      <Box p=\"3\" w=\"100%\">\n        <Flex w=\"100%\">\n          <Text>Rarity multiplier:</Text>\n          <Spacer />\n          <Text>{getRarityMultiplier(token)}</Text>\n        </Flex>\n        {augmentedAnimal?.lastClaim && (\n          <Flex w=\"100%\">\n            <Text>Pending rewards:</Text>\n            <Spacer />\n            <Text>\n              {getPendingStakingRewards(augmentedAnimal, stakingPeriod).toFixed(2)}\n            </Text>\n          </Flex>\n        )}\n        {augmentedAnimal?.lastClaim ? (\n          <HStack>\n            <Button isFullWidth colorScheme=\"blue\" onClick={handleUnstake}>\n              Unstake\n            </Button>\n            <Button isFullWidth colorScheme=\"green\" onClick={handleClaim}>\n              Claim\n            </Button>\n          </HStack>\n        ) : (\n          <Button isFullWidth colorScheme=\"green\" onClick={handleStake}>\n            Stake\n          </Button>\n        )}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default TokenCard;\n","import React from \"react\";\nimport { Box, Flex, Heading, Wrap } from \"@chakra-ui/react\";\n\nimport useJungle from \"../../hooks/useJungle\";\nimport TokenCard from \"../../components/TokenCard\";\n\nconst Staking: React.FC = () => {\n  const { animals, jungle, stakedAnimals } = useJungle();\n  console.log(jungle)\n  return (\n    <Flex direction=\"column\" w=\"100%\" align=\"center\" p=\"10px\">\n      <Box>\n        <Heading textAlign=\"center\">Your animals</Heading>\n        {animals.length + stakedAnimals.length > 0 ? (\n          <Wrap>\n            {stakedAnimals.concat(animals).map((e) => (\n              <TokenCard key={e.mint.toString()} token={e} />\n            ))}\n          </Wrap>\n        ) : (\n          <Heading p=\"5\">You don't have any animals...</Heading>\n        )}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Staking;\n","import { useContext } from \"react\";\n\nimport { LotteryContext } from \"../contexts/Lottery\";\n\nconst useLottery = () => {\n  return {\n    ...useContext(LotteryContext),\n  };\n};\n\nexport default useLottery;\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport {\n  Flex,\n  Text,\n  Button,\n  Spacer,\n  VStack,\n  Heading,\n  FormControl,\n  FormLabel,\n  Input,\n} from \"@chakra-ui/react\";\nimport constants, { FACTIONS } from \"../../constants\";\nimport useLottery from \"hooks/useLottery\";\nimport { BN } from \"@project-serum/anchor\";\n\ninterface TokenCardProps {\n  faction: number;\n}\n\nconst FactionCard: React.FC<TokenCardProps> = ({ faction }) => {\n  const { currentRound, userParticipations, participate } = useLottery();\n\n  const [amount, setAmount] = useState<number>();\n\n  const handleParticipation = useCallback(() => {\n    if (!amount) return;\n\n    const spendings = Array(8)\n      .fill(0)\n      .map(() => new BN(0));\n    spendings[faction] = new BN(amount * 10 ** 9);\n    participate(spendings);\n  }, [amount, faction, participate]);\n\n  const currentParticipation = useMemo(() => {\n    return userParticipations.filter(\n      (e) => e.index.toNumber() === currentRound?.index.toNumber()\n    )[0];\n  }, [userParticipations, currentRound]);\n\n  return (\n    <Flex\n      w=\"280px\"\n      h=\"100%\"\n      pt=\"0\"\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth=\"2px\"\n      rounded=\"lg\"\n      shadow=\"lg\"\n    >\n      <VStack spacing=\"2\" p=\"2\">\n        <Heading>{FACTIONS[faction].name}</Heading>\n        <FormControl>\n          <FormLabel>Amount of ${constants.ticker} to bet</FormLabel>\n          <Input\n            type=\"number\"\n            placeholder=\"Choose an amount to bet\"\n            onChange={(e) => setAmount(Number(e.target.value))}\n          />\n        </FormControl>\n        <Flex w=\"100%\">\n          <Text>Your bets on this faction:</Text>\n          <Spacer />\n          <Text>\n            {currentParticipation\n              ? currentParticipation.spendings[faction].toNumber() / 10 ** 9\n              : 0}\n          </Text>\n        </Flex>\n        <Flex w=\"100%\">\n          <Text>Total bets:</Text>\n          <Spacer />\n          <Text>\n            {currentRound\n              ? currentRound.spendings[faction].toNumber() / 10 ** 9\n              : 0}\n          </Text>\n        </Flex>\n        <Button isFullWidth colorScheme=\"green\" onClick={handleParticipation}>\n          Bet on this faction\n        </Button>\n      </VStack>\n    </Flex>\n  );\n};\n\nexport default FactionCard;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Flex, Text, Button, Spacer, VStack, Heading } from \"@chakra-ui/react\";\nimport useLottery from \"hooks/useLottery\";\nimport { LotteryRound, Participation } from \"contexts/Lottery\";\nimport { BN } from \"@project-serum/anchor\";\nimport constants, { FACTIONS } from \"../../constants\";\n\ninterface TokenCardProps {\n  participation: Participation;\n}\n\nconst ParticipationCard: React.FC<TokenCardProps> = ({ participation }) => {\n  const { fetchRound, claimParticipation } = useLottery();\n\n  const [round, setRound] = useState<LotteryRound>();\n\n  const fetchCorrespondingRound = useCallback(async () => {\n    const r = await fetchRound(participation.index.toNumber());\n    if (r) setRound(r);\n  }, [participation.index, fetchRound]);\n\n  useEffect(() => {\n    fetchCorrespondingRound();\n  }, [fetchCorrespondingRound]);\n\n  const handleParticipation = useCallback(\n    (index: number) => {\n      claimParticipation(index);\n    },\n    [claimParticipation]\n  );\n\n  return (\n    <Flex\n      w=\"100%\"\n      h=\"100%\"\n      p=\"5\"\n      direction=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth=\"2px\"\n      rounded=\"lg\"\n      shadow=\"lg\"\n    >\n      <Heading>Round #{participation.index.toNumber()}</Heading>\n      <Spacer />\n      <VStack align=\"start\">\n        <Text>\n          You spent{\" \"}\n          {participation.spendings.reduce((a, b) => a.add(b)).toNumber() /\n            10 ** 9}{\" \"}\n          ${constants.ticker} on this round\n        </Text>\n        {round && (\n          <>\n            <Text>The pot was {round.pot.toString()} SOL</Text>\n            <Text>The winner was {FACTIONS[round.winner - 1].name}</Text>\n            <Text>\n              You spent {participation.spendings[round.winner - 1].toString()} $\n              {constants.ticker} on the winner.\n            </Text>\n            <Text>\n              You earned{\" \"}\n              {round.spendings[round.winner - 1].gt(new BN(0))\n                ? participation.spendings[round.winner - 1]\n                    .mul(new BN(10000))\n                    .div(round.spendings[round.winner - 1])\n                    .toNumber() / 100\n                : 0}\n              % of the pot\n            </Text>\n          </>\n        )}\n      </VStack>\n      <Spacer />\n      <Button\n        colorScheme=\"blue\"\n        onClick={() => handleParticipation(participation.index.toNumber())}\n      >\n        Claim participation\n      </Button>\n    </Flex>\n  );\n};\n\nexport default ParticipationCard;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  Heading,\n  VStack,\n  Wrap,\n} from \"@chakra-ui/react\";\n\nimport useLottery from \"hooks/useLottery\";\nimport { FACTIONS } from \"../../constants\";\nimport { BN } from \"@project-serum/anchor\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport FactionCard from \"components/FactionCard\";\nimport ParticipationCard from \"components/ParticipationCard\";\n\nconst Lottery: React.FC = () => {\n  const wallet = useWallet();\n  const { lottery, currentRound, nextPot, userParticipations, newLotteryRound } =\n    useLottery();\n\n  const [now, setNow] = useState<number>();\n\n  const formatTime = useCallback(() => {\n    if (!currentRound || !lottery || !now) return null;\n\n    const difference = currentRound.start\n      .add(lottery.period)\n      .sub(new BN(now))\n      .toNumber();\n    const days = Math.floor((difference / (60 * 60 * 24)) % 7);\n    const hours = Math.floor((difference / (60 * 60)) % 24);\n    const minutes = Math.floor((difference / 60) % 60);\n    const seconds = Math.floor(difference % 60);\n\n    return `${days < 10 ? \"0\" + days : days}:${\n      hours < 10 ? \"0\" + hours : hours\n    }:${minutes < 10 ? \"0\" + minutes : minutes}:${\n      seconds < 10 ? \"0\" + seconds : seconds\n    }`;\n  }, [lottery, currentRound, now]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(Math.round(Date.now() / 1000));\n    }, 1000);\n    // Clear timeout if the component is unmounted\n    return () => clearTimeout(timer);\n  });\n\n  const handleNewRound = useCallback(() => {\n    newLotteryRound();\n  }, [newLotteryRound]);\n\n  return (\n    <Flex direction=\"column\" w=\"100%\" align=\"center\" p=\"10px\">\n      <Box>\n        <Heading textAlign=\"center\">Lottery</Heading>\n        {lottery && currentRound && (\n          <Box align=\"center\">\n            <Heading textAlign=\"center\" size=\"lg\">\n              Current round {currentRound.index.toNumber()}\n            </Heading>\n            <Heading textAlign=\"center\" size=\"md\">\n              Jackpot is worth{\" \"}\n              {currentRound.pot.div(new BN(10 ** 9)).toNumber()} SOL\n            </Heading>\n            {now &&\n            lottery.lastTimestamp.add(lottery.period).toNumber() > now ? (\n              <Heading textAlign=\"center\" size=\"md\">\n                Next round starts in {formatTime()} and its pot is currently{\" \"}\n                {nextPot || 0} SOL\n              </Heading>\n            ) : (\n              <Button\n                colorScheme=\"blue\"\n                m=\"3\"\n                onClick={handleNewRound}\n                disabled={!wallet.publicKey}\n              >\n                Start next round\n              </Button>\n            )}\n          </Box>\n        )}\n        <Wrap m=\"2\" justify=\"center\">\n          {FACTIONS.map((e, i) => (\n            <FactionCard key={e.name} faction={i} />\n          ))}\n        </Wrap>\n        {userParticipations.length > 0 && (\n          <>\n            <Divider my=\"30px\" />\n            <Heading textAlign=\"center\" pb=\"3\">\n              Your past participations\n            </Heading>\n            <VStack>\n              {userParticipations\n                .filter(\n                  (e) => e.index.toNumber() !== currentRound?.index.toNumber()\n                )\n                .map((e) => (\n                  <ParticipationCard\n                    key={e.index.toNumber()}\n                    participation={e}\n                  />\n                ))}\n            </VStack>\n          </>\n        )}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Lottery;\n","import React, { useCallback, useState } from \"react\";\nimport {\n  Button,\n  Container,\n  Input,\n} from \"@chakra-ui/react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport useLottery from \"hooks/useLottery\";\nimport { SystemProgram, Transaction } from \"@solana/web3.js\";\n\nconst Admin: React.FC = () => {\n  const wallet = useWallet();\n  const { connection } = useConnection();\n  const { lottery } = useLottery();\n  const [amount, setAmount] = useState<number>(0);\n\n  const handleSend = useCallback(() => {\n    if (!lottery || !wallet.publicKey) return;\n    wallet.sendTransaction(\n      new Transaction().add(\n        SystemProgram.transfer({\n          fromPubkey: wallet.publicKey,\n          toPubkey: lottery.escrow,\n          lamports: amount,\n        })\n      ),\n      connection\n    );\n  }, [connection, wallet, lottery, amount]);\n\n  const handleChange = useCallback((n: number) => {\n    setAmount(n * 10**9)\n  }, [setAmount]);\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Input type=\"number\" onChange={e => handleChange(Number(e.target.value))}/>\n      <Button onClick={handleSend} disabled={amount === 0}>\n        Send SOL\n      </Button>\n    </Container>\n  );\n};\n\nexport default Admin;\n","import React, { useCallback, useMemo } from \"react\";\nimport { Route, HashRouter as Router, Routes } from \"react-router-dom\";\nimport { ChakraProvider, useToast } from \"@chakra-ui/react\";\nimport { WalletAdapterNetwork, WalletError } from \"@solana/wallet-adapter-base\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./views/Home\";\nimport { JungleProvider } from \"contexts/Jungle\";\nimport Staking from \"views/Staking\";\nimport constants from \"./constants\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport Lottery from \"views/Lottery\";\nimport { LotteryProvider } from \"contexts/Lottery\";\nimport Admin from \"views/Admin\";\n\nconst WalletProviders: React.FC = ({ children }) => {\n  const network = constants.mainnet\n    ? WalletAdapterNetwork.Mainnet\n    : WalletAdapterNetwork.Devnet;\n\n  const devnetEnpoint = useMemo(() => clusterApiUrl(network), [network]);\n  const endpoint = constants.mainnet\n    ? \"https://connect.runnode.com/?apikey=\" +\n      process.env.REACT_APP_RUN_NODE_API_KEY\n    : devnetEnpoint;\n  const toast = useToast();\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: { clientId: \"Get a client ID @ https://developer.tor.us\" },\n      }),\n      getLedgerWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  );\n\n  const onError = useCallback(\n    (error: WalletError) =>\n      toast({\n        title: \"Error\",\n        description: error.message\n          ? `${error.name}: ${error.message}`\n          : error.name,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      }),\n    [toast]\n  );\n\n  return (\n    <ConnectionProvider\n      endpoint={endpoint}\n      config={{ confirmTransactionInitialTimeout: 60000 }}\n    >\n      <WalletProvider wallets={wallets} onError={onError}>\n        <WalletModalProvider>{children}</WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <ChakraProvider>\n      <WalletProviders>\n        <JungleProvider>\n          <LotteryProvider>{children}</LotteryProvider>\n        </JungleProvider>\n      </WalletProviders>\n    </ChakraProvider>\n  );\n};\n\nfunction App() {\n  return (\n    <Providers>\n      <Router>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/staking\" element={<Staking />} />\n          <Route path=\"/lottery\" element={<Lottery />} />\n          <Route path=\"/admin\" element={<Admin />} />\n        </Routes>\n      </Router>\n    </Providers>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useContext } from \"react\";\n\nimport { JungleContext } from \"../contexts/Jungle\";\n\nconst useJungle = () => {\n  return {\n    ...useContext(JungleContext),\n  };\n};\n\nexport default useJungle;\n"],"sourceRoot":""}